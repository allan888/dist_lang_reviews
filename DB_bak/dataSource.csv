Title,Home Page,Developer,Developer Email,Developer Home Page,Problem,Algorithm,Language,Language Version,Release Date,Lines Total,Lines Pure,Additional Information,Additional Attributes,Release Version,List on DistAlgo Web Site,Platforms,Applications,Applications,Platforms
MESI cache coherence protocol verification,http://www.disi.unige.it/person/DelzannoG/CacheProtocol/mesi.hy,Giorgio Delzanno,giorgio.delzanno@unige.it,http://www.disi.unige.it/person/DelzannoG/, cache coherence,MOESI,HyTech,HyTech-1.04f,7/15/2000,98,81,"Reference paper: 
     Automatic Verification of Parameterized Cache Coherence Protocols.
Verification Language:
HyTech is an automatic tool for the analysis of embedded systems. HyTech computes the condition under which a linear hybrid system satisfies a temporal requirement. Hybrid systems are specified as collections of automata with discrete and continuous components, and temporal requirements are verified by symbolic model checking. ",,1,,"Mac OS, Linux",,,
MI_protocol,https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp,Jingyi Zhang,unknown,https://github.com/ivycheung1208, Cache coherence,MI,C++,unknown,12/3/2014,192,178,Implementation of MI protocol for a bus-bases broadcast system,"""MI_CACHE_I : 1""
""block_states[4]:{""X"",""I"",""IM"",""M""}""",1,,"Windows, Mac OS, Linux",none,,
banking-Paxos,https://github.com/goyalankit/banking-paxos,Ankit Goyal,ankitgoyal@utexas.edu,http://goyalankit.com, Distributed consensus,Paxos,Java,Java 1.7,11/28/2013,1832,1569,Implementation of a replicated bank applicaiton,,1,,"Windows, Mac OS, Linux",Banking,,
Erlang example dynamo,https://github.com/basho/riak_kv/tree/develop/src,open source community: https://github.com/basho/riak_kv/graphs/contributors,open source community: https://github.com/basho/riak_kv/graphs/contributors,https://github.com/basho/riak_kv/graphs/contributors, Distributed hash tables,Dynamo,Erlang,V5.10.3,8/24/2015,,,,,V2.1.1,,"Mac OS, Linux",Basho uses this implementation as part of their data platform services on the cloud clusters.,,
TLS implementation in haskell,https://github.com/vincenthz/hs-tls,Vincent Hanquez,tab@snarc.org,http://tab.snarc.org, security protocol,"TLS, SSL",Haskell,,9/10/2010,7619,5302,"This provides a high-level implementation of a sensitive security protocol, eliminating a common set of security issues through the use of the advanced type system, high level constructions and common Haskell features.","1.tiny codebase (more than 20 times smaller than OpenSSL, and 10 times smaller than gnuTLS)
2.client certificates
3.permissive license: BSD3
4.supported versions: SSL3, TLS1.0, TLS1.1, TLS1.2
5.key exchange supported: RSA, DHE-RSA, DHE-DSS
6.bulk algorithm supported: any stream or block ciphers
7.supported extensions: secure renegotiation, next protocol negotiation (draft 2), server name indication",1.3.3,,"Windows, Mac OS, Linux",,,
Distributed Hash Table,https://pypi.python.org/pypi/gevent_dht/0.1.3,Colin Rice,,github.com/c00w/gevent_dht,A basic implementation of a dht using gevent,Distributed hash table based on gevent,Python,2.7,4/4/2012,693,478,"Keys are not guaranteed to persist forever, nodes may crash, the network 
may eat messages etc. Additionally due to the time it takes for messages to travel the network sometimes a key will not be immediately available after user set it or when user get the result back it may not be completely current.",,4-Beta,,"Windows, Mac OS, Linux",Used in systems and networking,,
Python example for Paxos,https://pypi.python.org/pypi/paxos/0.1,Gary Wilson Jr. and Michael Stathopoulos,,https://github.com/gdub/python-paxos,A demo implementation of the Paxos algorithm implemented in Python,Paxos,Python,Python 3.2,7/28/2012,2157,1425,"Communication between processes occurs using Queue objects, so all processes are run on the same machine",,3-Alpha,,"Windows, Mac OS, Linux",,,
TLA+ specification for the Raft consensus algorithm,https://github.com/ongardie/raft.tla/blob/master/raft.tla,Diego Ongaro,,https://ongardie.net,A formal TLA+ specification for raft algorithm,Raft,TLA+,,1/5/2015,484,363,,,1,,"Windows, Mac OS, Linux",,,
Distributed hash table example based on chord,https://github.com/shashankkhasare/chord_dht,Shashank S. Khasare,shashank.khasare@gmail.com,https://github.com/shashankkhasare,A simple distribuetd hash table implementation based on C,Chord,C,,10/2/2014,2182,1599,,,1,,"Windows, Mac OS, Linux",,,
Python example for kerberos-protocol,https://github.com/nloyolag/kerberos-protocol,Noé Loyola,,https://github.com/nloyolag,Allows nodes communicating over a non-secure network to prove their identity to one another in a secure manner,Needham-Schroeder,Python,2.7,10/25/2015,341,196,,,1,,"Windows, Mac OS, Linux",,,
Python example for RAFT Consensus Algorithm,http://pypi.python.org/pypi/py-raft/0.0.1,Toby Burress,,https://github.com/kurin/py-raft,An implementation of the RAFT consensus algorithm.,RAFT consensus algorithm,Python,Python 2.7,10/5/2013,1687,1072,,,1,,"Windows, Mac OS, Linux",,,
Application for Cache Coherence Protocol,https://github.com/jbush001/NyuziProcessor/tree/master/hardware,Jeff Bush,jeffbush001@gmail.com,https://github.com/jbush001,Application using Cache Coherence Protocol,Used Snooping based cache coherence protocol,Verilog,3.1a,8/17/2014,13392,9093,,,v1_uarch,,"Windows, Mac OS, Linux",NA,,
Needham-Schroeder protocol,https://github.com/teddziuba/pqauth,Ted Dziuba,ted@teddziuba.com,,Authentication,Needham-Schroeder,Python,,,,,,,,,"Windows, Mac OS, Linux",,,
pqauth,https://github.com/coreos/etcd,Ted Dziuba,"ted@teddziuba.com, bender86@arcor.de",https://plus.google.com/11099634,Authentication,Needham-Schroeder,Python,Python 2.4,5/3/2013,400,350,"An implementation of the Needham-Schroeder-Lowe Public-Key Protocol over HTTP, Web APIs and their clients can authenticate each other using SSH keys, and agree on a session key, a temporary authentication token that the client sends along with API requests. pqauth employs a four way handshake protocol.Only client is implemented.","Simple: Implementation 
easy : to understand.",V1.0,,"Windows, Mac OS, Linux",Web API Authentication with SSH keys,,
s2n,https://github.com/awslabs/s2n,Colm MacCárthaigh,colm@apache.org,https://github.com/colmmacc,Authentication,"TLS, SSLv3",C,C99,9/9/2015,7000,6100,"s2n APIs are built along the same lines of POSIX I/O and is fairly easy to understand for developers having worked with POSIX I/O.
Small Codebase.
Backward compatible for various security algorithms implementations.","Simple, small, fast, and with security as a priority
Supports blocking, non-blocking, and full-duplex I/O.
No Locks or Mutexes used.",V1.0,,"Windows, Mac OS, Linux",Used in AWS to authenticate and strong security.,,
GnuTLS,http://gnutls.org/download.html,"Nikos Mavrogiannopoulos,Simon Josefsson",,http://nmav.gnutls.org/,"Authentication, Secure communication, Encryption",TLS,C,,12/9/2015,235509,159999,"GnuTLS is a free software implementation of the TLS, SSL and DTLS protocols",,3.4.5,,"Windows, Mac OS, Linux"," X.509, PKCS #12, OpenPGP",,
 OAuth-Apis,https://github.com/OAuth-Apis/apis,Okke Harsta,oharsta@zilverline.com,https://www.zilverline.com,Authorization as a Service,OAuth 2.0,Java,7,2/14/2014,,,"OAuth-Apis makes use of Jax-RS framework, JavaScript and CSS. Fairly easy to understand, use of Maven3 which simplifies the setup and build tasks.
simplifies all the communications between the client, server, and content provider. And the refresh tokens only exist to provide security when content is being accessed unencrypted.",Lisenced under APACHE 2.0,V 1.3.5,,"Windows, Mac OS, Linux","Many webservices make use of OAuth 2.0 (e.g. google, twitter, slack, Github etc.)",,
15418-Cache-Simulator,https://github.com/vrazdan/15418-Cache-Simulator,Vishnu Razdan,vishnu.razdan@gmail.com,,Cache  Coherence,"MSI, MESI, MOESI",C++,,5/11/2015,,,,,1,,Linux,Write-back buffer and Non atomic transactions,,
AMBA 4 ACE Cache Coherence Specification for SoC,http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0022e/index.html  http://www.gstitt.ece.ufl.edu/courses/eel4720_5721/labs/refs/AXI4_specification.pdf,ARM Ltd.,N/A,http://www.arm.com/,Cache Coherence,ACE,unknown,N/A,1/1/2011,N/A,N/A,Detailed protocol description description on pg. C-134 of the specification document listed in the homepage link,,4,,ARM SoCs,ARM SoCs,,
MultiCacheSim,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,http://brandonlucia.com,Cache Coherence,Any,C++,,8/30/2013,,,,,,,Linux,,,
 An Evaluation of Directory Schemes for Cache Coherence,http://eecs.vanderbilt.edu/Courses/eece343/papers/p280-agarwal.pdf,"  Anant Agarwal,Richard Simoni, John Hennessy, and Mark Horowitz",,,Cache Coherence,Cache Coherence,unknown,,6/1/1988,,,,,V1.0,,,,,
Directory-Based Cache Coherence Protocol for the DASH Multiprocessor ,http://www.cse.wustl.edu/~roger/569M.s09/p148-lenoski.pdf,"Daniel Lenoski, James Laudon, Kourosh Gharachorloo, Anoop Gupta, and John Hennessy",,http://research.microsoft.com/en-us/people/anoop/,Cache coherence,Directory Based Cache Coherence,unknown,,12/2/1990,,,,,,,,,,
gem5,http://www.m5sim.org/,"Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K. Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R. Hower, Tushar Krishna, Somayeh Sardashti, Rathijit Sen, Korey Sewell, Muhammad Shoaib, Nilay Vaish, Mark D. Hill, and David A. Wood",http://gem5.org,http://gem5.org,Cache Coherence,Directory Based Cache Coherence,"Ruby, C++","Ruby-1.9, C++ 2003",5/5/2011,1311,1144,gem5-stable-629fe6e6c781/src/mem/protocol/MOESI_CMP_directory-L1cache.sm is the file where the protocol is implemented for gem5 simulator.,,1,Yes,"Windows, Mac OS, Linux",No Known Applications,,
Cache,https://github.com/ashithav/cache,ashithav,N/A,https://github.com/ashithav,Cache coherence,Dragon,C,N/A,2/7/2015,910,737,"This SMP cache simulator is based on the uni core cache class developed by Ahmad Samih & Dr.Yan Solihin. It implements three cache coherence protocols: MSI, MESI and Dragon.",n/a,1,,Linux,N/A,,
Firefly - Cache Coherence Protocol,http://dl.acm.org/citation.cfm?doid=6513.6514  https://en.wikipedia.org/wiki/Firefly_(cache_coherence_protocol),DEC Systems Research Center,N/A,http://web.archive.org/web/20051215194340/http://www.research.compaq.com/SRC/publications/src-rr.html,Cache Coherence,Firefly,Hardware implementation,N/A,9/1/1986,N/A,N/A,Based on snooping type of cache coherence protocol.,,1,,DEC Firefly Workstation,Used in the DEC firefly workstation cache controller implementation,,
LimitLESS Directories: A Scalable Cache Coherence Scheme,http://groups.csail.mit.edu/cag/papers/pdf/asplos4.pdf,"David Chaiken, John Kubiatowicz, and Anant Agarwal",agarwal at& edx dot& org; ,http://people.csail.mit.edu/agarwal/,Cache coherence,LmitLESS,unknown,,6/1/1991,,,"""The LimitLESS scheme uses a combination of hardware and software techniques to realize the performance of a full-map directory with the memory
overhead of a limited directory""",,,,,,,
L2-Cache-Simulator,https://github.com/wicker/L2-Cache-Simulator,Jenner Hanni,eh.wicker@gmail.com,http://jennerhanni.net/,Cache Coherence,MESI,C,C11,1/18/2012,377,323,,,1,,"Windows, Mac OS, Linux",,,
C++ implemenation of MESI-cache-coherence,https://github.com/gsiddardha/MESI-cache-coherence,Siddardha Garimella,gsiddardha@gmail.com,https://github.com/gsiddardha,Cache Coherence,MESI,C++,C++,8/27/2011,788,573,"Simulator to implement MESI cache coherence protocol
They have implemented MESI using C++.",Active development : no.,1,Yes,Linux,,,
MESI & MOESI Protocol ,https://www.escholar.manchester.ac.uk/uk-ac-man-scw:218836,"Somdip Dey, Mamatha S. Nair",https://www.linkedin.com/pub/somdip-dey/2a/357/385,https://www.linkedin.com/redir/redirect?url=http%3A%2F%2Fwww%2Esomdipdey%2Ecom&urlhash=3vMU,Cache Coherence,"MESI, MOESI",Java,7,2/6/2014,~1000,~800,Code is very well documented,"""Documentation: Very Good"", ""Ease of understanding: Easy"", ""Code Size: Huge""",1,Yes,"Windows, Mac OS, Linux",None,,
MESI/ Illinois protocol,http://dl.acm.org/citation.cfm?doid=800015.808204,Mark S. Papamarcos and Janak H. Patel ,,https://www.linkedin.com/pub/mark-papamarcos/0/375/1aa,Cache coherence,MESI,unknown,,4/6/1984,,,"MESI in its naive, straightforward implementation exhibits two particular low-performance behaviours. First, when writing to an invalid cache line, there is a long delay while the line is fetched from another CPU. Second, moving cache lines to the invalid state is time-consuming.",Reference : http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.143.4198&rep=rep1&type=pdf,,,,MOESI protocol,,
MESI ,https://github.com/saurabharora90/MESI-Cache-Simulator,Saurabh,saurabharora90@gmail.com,Not Available,Cache Coherence,MESI,C#,C#5.0,11/18/2012,~700,~650,It is implemented by a student as a part of the assignment for Parallel Computer Architecture,None,1,,"Windows, Mac OS, Linux",None,,
MESI,https://github.com/mihirvj/smp-cache/blob/master/mesi.cc,Amro Awad and Dr.Yan Solihin,"ajawad@ncsu.edu, solihin@ece.ncsu.edu","https://sites.google.com/a/ncsu.edu/ajawad/home, http://www.ece.ncsu.edu/people/solihin",Cache Coherence,MESI,C++,,2/7/2009,673,481,- Results included,School Project: yes,1,,Linux,,,
MESI Implementation,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,,,Cache Coherence,MESI,C++,11,12/6/2015,265,244,"It implements MESI cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MSI, MOSI, MI. It is also easy to install and run.",,v1.0,,"Windows, Mac OS, Linux",,,
MESI,https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MESI_protocol.cpp,Akshay Sawant,asawant@gatech.edu,,Cache Coherence,MESI,C++,14,,431,400,,,,,,,,
MESI Coherency InterSection Controller,"http://opencores.org/project,mesi_isc","Amitay, Yair",yaira@opencores.org,"http://opencores.org/acc,view,yaira",Cache coherence,MESI,Verilog,,1/2/2013,3357,1893,"The MESI InterSection Controller (ISC) is a coherence system controller. It supports the MESI coherence protocol for a cache data consistency. It synchronizes the memory requests of the system masters. It enables to keep the consistency of the data in the memory and in the local caches. (description taken from http://opencores.org/project,mesi_isc)","Language: Verilog
Development status: Alpha
WishBone Compliant: No
License: LGPL",0.12,Yes,"Windows, Mac OS, Linux",,,
Cache coherence MESI.,"http://opencores.org/project,mesi_isc","Amitay, Yair ","http://opencores.org/project,mesi_isc","http://opencores.org/project,mesi_isc",Cache coherence,MESI,Verilog,lates,1/2/2013,10K,10K,,,1,,Linux,None.,,
"Implementation of MESI, MOSI protocols for a bus-bases broadcast system.",https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,Jingyi.Zhang@gatech.com,https://www.linkedin.com/in/jingyz,Cache coherence,"MESI, MOSI",C++,C++ 11,12/6/2014,618,400 approx,,,1,Yes,"Windows, Mac OS, Linux",,,
 Simulator to implement MESI cache coherence protocol,https://github.com/gsiddardha/MESI-cache-coherence,Siddardha Garimella,gsiddardha@gmail.com,,Cache Coherence,MESI,C++,,9/27/2011,1755,1550,It provides different matrix multiplication implementations to test the simulator.,,1,,Linux,,,
"Implementation of MI, MSI protocols for a bus-bases broadcast system.",https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,Jingyi.Zhang@gatech.com,https://www.linkedin.com/in/jingyz,Cache coherence,"MI, MSI",C++,C++ 11,12/6/2014,483,300 approx,,,1,Yes,"Windows, Mac OS, Linux",,,
Design of a simulator implementing MOESI cache coherence protocol ,https://github.com/ssc3/MOESI,Shubhojit Chattopadhyay,shubhojitchattopadhyay@gmail.com,,Cache coherence,MOESI,C++,,,1450,1200,This implementation is very easy to setup and run.,,1,,Linux,,,
MOESI,https://github.com/ssc3/MOESI,Shubhojit Chattopadhyay,shubhojitchattopadhyay@gmail.com ,,Cache Coherence,MOESI,C++,,2/25/2013,,,,,1,,Linux,,,
MOESI cache coherence protocol verification,http://www.disi.unige.it/person/DelzannoG/CacheProtocol/moesi.hy,Giorgio Delzanno,giorgio.delzanno at unige.it,http://www.disi.unige.it/person/DelzannoG/,cache coherence,MOESI,HyTech,V1.04f,7/15/2000,107,86,"Reference paper: Automatic Verification of Parameterized Cache Coherence Protocols

HyTech is an automatic tool for the analysis of embedded systems. HyTech computes the condition under which a linear hybrid system satisfies a temporal requirement. Hybrid systems are specified as collections of automata with discrete and continuous components, and temporal requirements are verified by symbolic model checking. ",,1,,"Mac OS, Linux",,,
MOESI implementation in C++,https://github.com/ssc3/MOESI,Shubhojit Chattopadhyay,shubhojitchattopadhyay@gmail.com,https://github.com/ssc3,Cache Coherence,MOESI ,C++,3,2/25/2013,1204,1006,Design of a simulator implementing MOESI cache coherence protocol.,,1,,"Mac OS, Linux",NA,,
MOESI,https://github.com/ssc3/MOESI,Shubhojit Chattopadhyay,shubhojitchattopadhyay@gmail.com,https://github.com/ssc3,Cache Coherence,MOESI,C++,,2/25/2013,1209,1009,MOESI Invalidation based Coherence Protocol for a 4-way shared memory multiprocessor.,,1.0.0,Yes,Linux,,,
MOESI,https://github.com/ssc3/MOESI,Shubhojit Chattopadhyay,shubhojitchattopadhyay@gmail.com,,Cache Coherence,MOESI,C++,,2/25/2013,1204,1006,"- for DM cache
- for set Associative cache
- Results included",,1,,Linux,,,
CacheCoherence (MOESI),https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,N/A,https://github.com/ivycheung1208,Cache Coherence,MOESI,C++,,12/5/2014,379,343,"MOESI is a full cache coherency protocol that encompasses all of the possible states commonly used in other protocols. In addition to the four common MESI states, there is a fifth ""Owned"" state representing data that is both modified and shared. This avoids the need to write modified data back to main memory before sharing it. (https://en.wikipedia.org/wiki/MOESI_protocol)",,1,,"Windows, Mac OS, Linux",,,
MOESI Protocol,https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MOESI_protocol.cpp,Akshay Sawant,asawant@gatech.edu,,Cache Coherence,MOESI,C++,11,1/6/2015,580,540,,,1,,Linux,,,
"Implementation of MOESI, and MOESIF protocols for a bus-bases broadcast system.",https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,Jingyi.Zhang@gatech.stonybrook.edu,https://www.linkedin.com/in/jingyz,Cache Coherence,"MOESI, MOESIF",C++,C++ 11,12/6/2014,801,492 approx,,,1,Yes,"Windows, Mac OS, Linux",,,
MOESIF Implementation,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,,,Cache Coherence,MOESIF,C++,11,12/6/2015,368,341,"It implements MOESIF cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MESI, MOSI, MI. It is also easy to install and run.",,v1.0,,"Windows, Mac OS, Linux",,,
MOESIF protocol,https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp,Jingyi Zhang,unknown,https://github.com/ivycheung1208,Cache Coherence,MOESIF,C++,unknown,12/6/2015,368,341,Implementation ofMOESIF protocol for a bus-bases broadcast system.,"""block_states[8] : {""X"",""I"",""S"",""M"",""O"",""IS"",""IM"",""OM""}""
""MOESI_CACHE_I :1""",1,,"Windows, Mac OS, Linux",none,,
MOESISm(MOESIF) protocol,https://github.com/ashwincnaik/Cache-Coherence/blob/master/protocols/MOESIF_protocol.cpp,Ashwin Naik,ashwincnaik@gatech.edu,,Cache Coherence,"MOESISm, MOESIF",C++,,5/7/2015,444,364,,School Project: yes,1,,Linux,,,
MOSI,https://github.com/samuelbritt/CS6290-prj3/blob/master/protocols/MOSI_protocol.cpp,Sam britt,,https://github.com/samuelbritt,Cache Coherence,MOSI,C++,C++11,4/27/2012,269,252,"In comparison to MSI protocol,  the processor supplies the data directly to the requesting processor and transitions into the Shared-Dirty state, thereby avoiding the costly write back to memory in MOSI (also known as Berkeley protocol).",,1,,"Mac OS, Linux",,,
Cache-Coherence,https://github.com/akshaycj47/Cache-Coherence,AKSHAY SUBHASH SAWANT,asawant@gatech.edu,http://www.prism.gatech.edu/~asawant7/,Cache Coherence,MSI,C++,C++11,1/6/2015,321,294,,,1,,"Windows, Mac OS, Linux",,,
Cache-Coherence,https://github.com/akshaycj47/Cache-Coherence,Akshay Sawant,asawant@gatech.edu,,Cache Coherence,MSI,C++,,1/10/2015,,,,,1,,Linux,Cache Coherence simulation,,
MSI Implementation,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,,,Cache Coherence,MSI,C++,11,12/6/2014,200,172,It implements MSI (Modified-Shared-Invalid) cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MESI and Dragon protocol. It is also easy to install and run.,,v1.0,,"Windows, Mac OS, Linux",,,
MSI in C++,https://github.com/akshaycj47/Cache-Coherence/,Akshay Sawant,asawant@gatech.edu,http://www.prism.gatech.edu/~asawant7/,Cache Coherence,MSI,C++,C++ 14,1/6/2015,~2500,~2000,The package is well documented and supports validation outputs also,"""Trace of memory operation displayed : Yes"" ",1,Yes,"Windows, Mac OS, Linux",None,,
Cache Coherence MSI Protocol,https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MSI_protocol.cpp,Akshay Sawant,asawant@gatech.edu,https://github.com/akshaycj47,Cache Coherence,MSI,C++,11,1/5/2015,322,300,,,1,,Linux,,,
MSI-cache coherence,https://github.com/blucia0a/MultiCacheSim ,Brandon Lucia ,https://github.com/blucia0a/MultiCacheSim ,https://github.com/blucia0a/MultiCacheSim ,Cache coherence,MSI,C++,latest,3/21/2010,5K,5K,,,1,,Linux,None,,
MultiCacheSim,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,http://brandonlucia.com,Cache Coherence,"MSI, MESI",C++,C++11,9/24/2013,805,689,MultiCacheSim is a simulation infrastructure for experimenting with coherent caches.,,2,Yes,"Windows, Mac OS, Linux",MultiCacheSim,,
C++ implementation of cache coherence protocol simulator.,https://github.com/vrazdan/15418-Cache-Simulator,Zhaodong,,https://github.com/zhaodong2013062,Cache Coherence,"MSI, MESI, MOESI",C++,C++,5/11/2015,>10000 lines,>10000 lines,"A a cache coherence protocol simulator having MSI, MESI, and MOESI protocols. [Ref : https://github.com/vrazdan/15418-Cache-Simulator]
Implementation is in C++.",Active development : no.,1,Yes,Linux,,,
C++ implementation of MSI / MESI / MESIF protocols.,https://github.com/isaaclimdc/cachemulator,Yuyang Guo and Isaac Lim,isaaclimdc@gmail.com,https://medium.com/@isaaclim/,Cache Coherence,"MSI, MESI, MESIF",C++,C++,5/9/2015,4400,1550,"A Snooping-based Coherent Parallel Cache Emulator
They have written C++ code to compare the performance of MSI / MESI / MESIF protocols.",,1,Yes,Linux,,,
Global Arrays,http://hpc.pnl.gov/globalarrays/applications.shtml,,hpctools@googlegroups.com.,,Cache coherence,PGAS,unknown,,5/1/2015,">10,000",">10,000",,,5.4b,,"Windows, Mac OS, Linux",http://hpc.pnl.gov/globalarrays/applications.shtml,,
cachemulator,http://isaaclimdc.github.io/cachemulator/,Yuyang Guo (yuyangg) and Isaac Lim (idl),isaaclimdc@gmail.com,https://github.com/isaaclimdc,Cache Coherence,Snooping,C++,C++11(Not sure),5/8/2014,2842,2703,None,None,,,Linux,None,,
coherence_cop,https://github.com/KarimaMa/coherence_cop,KarimaMa,Couldn't find,https://github.com/KarimaMa,Cache Coherence,Snooping,C++,C++11(Not sure),4/13/2015,2078,2054,None,None,1,,Linux,None,,
Coherence by Brenton Yiu,https://github.com/GTPenguins214/coherence,Brenton Yiu,Could not find,https://github.com/GTPenguins214,Cache Coherence,Snooping,C++,C++11(Not sure),7/20/2014,3979,3904,None,None,1,,Linux,None,,
MSI,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,jingyi.Zhang@gatech.edu,,Cache Coherence,Snooping based,C++,,12/6/2014,200,182,,,1,,"Windows, Mac OS, Linux","NUMA, SMP, Distributed Shared memory",,
MESI,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,jingyi.Zhang@gatech.edu,,Cache Coherence,Snooping based,C++,,12/6/2014,200,182,,,1,,"Windows, Mac OS, Linux","NUMA, SMP, Distributed Shared Memory",,
MOESI,https://github.com/ivycheung1208/CacheCoherence,Jingyi Zhang,jingyi.Zhang@gatech.edu,,Cache Coherence,Snooping based,C++,,12/6/2014,200,182,,,1,,"Windows, Mac OS, Linux","NUMA, SMP, Distributed Shared Memory",,
Simulating Snooping Based Cache Coherence Protocols,https://vrazdan.github.io/final.html,Vishnu Razdan vrazdan; Don Zheng zhaodonz,vishnu.razdan@gmail.com,,Cache Coherence,Snooping based Cache Coherence,C++,,5/11/2015,1546,1203,"Implementation of MSI, MESI, and MOESI protocols. In addition, implemented the ability to include a write-back buffer as well as non-atomic bus transactions for a more realistic simulation",,1.0.0,,Linux,,,
Cachemulator: A Snooping-based Coherent Parallel Cache Emulator,https://github.com/isaaclimdc/cachemulator,Isaac Lim,isaaclimdc@gmail.com,http://isaacl.net,cache coherence,Snooping based Cache Coherence,C++,C++11,5/9/2014,2209,1634,Cachemulator is a coherent multi-processor cache emulator that uses a snooping-based cache coherent protocol.,,1,,"Windows, Mac OS, Linux",,,
Cache emulator,http://isaaclimdc.github.io/cachemulator/,Yuyang Guo and Isaac Lim,idl@andrew.cmu.edu,isaaclim.net,Cache coherence,Snooping-based cache coherence (MSI / MESI / MESIF),C++,,5/7/2014,3400,2.5,,,1,,"Windows, Mac OS, Linux",,,
Automatic Verification of Cache Coherence Protocols via  Infinite-state Constraint-based Model Checking ,http://www.disi.unige.it/person/DelzannoG/protocol.html,Giorgio Delzanno,giorgio.delzanno at unige.it,http://www.disi.unige.it/person/DelzannoG/,Cache coherence,"Synapse, Mesi, Moesi, Illinois, Dragon, Firefly, Berkeley",unknown,HyTech/DMC,5/16/2000,2000,1.5k,,,1,,Linux,,,
Token Based Cache Coherence,http://gem5.org,Carl Beckmann,beckmann@s0-28.cs.wisc.edu,,Cache Coherence,token coherence implementation for gem5 simulator,gem5 ,NA,1/19/2005,2423,2064,The source is available as part of gem5 simulator in gem5-stable-629fe6e6c781/src/mem/protocol/MOESI_CMP_token-L1cache.sm,,1,Yes,"Mac OS, Linux",No known applications ,,
Uncore Coherence Manager,https://github.com/lowRISC/uncore,lowRISC Team,info@lowrisc.org,http://www.lowrisc.org/,Cache Coherence,Various ,Chisel,,8/18/2015,3400,2.9k,,,1,,FPGA/Simulator,lowRISC SoC,,
A CA Coherent Multiprocessor Cache Simulator,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,http://brandonlucia.com,Cache Coherence,,C++,,,3000,2500,,,1,,Linux,,,
TARDIS:Time Traveling Coherence Algorithm for Distributed Shared Memory, http://people.csail.mit.edu/devadas/pubs/tardis.pdf," Xiangyao Yu, Srinivas Devadas ", yxy@mit.edu  devadas@mit.edu ,,Cache Coherence,,unknown,,10/19/2015,,,,,V1.0,,,,,
MESI-Cache-Simulator,https://github.com/saurabharora90/MESI-Cache-Simulator/blob/master/Simulate.cs,Saurabh,saurabharora90@gmail.com,https://github.com/saurabharora90,cache coherence ,MESI,C#,unknown,12/30/2012,452,396,Improving the understanding of snooping cache coherence protocol-MESI.,"""PARAMS =:4""
""addressLenght:32""
""memoryToCache_cycles:10""",1,,"Windows, Mac OS, Linux",none,,
MOESI,https://github.com/samuelbritt/CS6290-prj3/blob/master/protocols/MOESI_protocol.cpp,Sam Britt,,https://github.com/samuelbritt,Cache Coherence ,MOESI,C++,C++11,4/27/2012,342,330,"The MOESI protocol is a five-state protocol that incorporates elements of both the MESI (Illinois) and MOSI (Berkeley-Ownership) protocols. It extends the basic MSI protocol with two new states: an Exclusive state, which is identical to the Exclusive state of the MESI, and an Owner state, which is identical to the Owner state of the MOSI protocol. Including both an Exclusive and an Owner state enables the MOESI protocol to enjoy the benefits that both the MESI and MOSI protocols offer.","Additional states wrt MESI and MOSI protocols :-
Exclusive State: Yes
Owner State : Yes",1,,"Mac OS, Linux",,,
"Implementation of cache-unaware, cache-aware, and cache-oblivious matrix multiplication algorithms",https://github.com/gsiddardha/MESI-cache-coherence,"Pavan Kumar Sunkara, Siddardha Garimella",pavan.sss1991@gmail.com; gsiddardha@gmail.com,https://github.com/pksunkara; https://www.linkedin.com/in/gsiddardha,Cache Coherence for write-back caches,MESI,C++,C++ 2.0,1/27/2011,789,712,"A cache simulator in which user can specify cache parameters such as cache size, associativity, block size. Using MESI, design implements cache-unaware, cache-aware, and cache-oblivious matrix multiplication algorithms and reports the cache statistics using this simulator.",,1,,"Mac OS, Linux",,,
Adaptive Cache Coherence Protocol Specification for Parallel Input/Output Systems,http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1291822,"Felix Garcia-Carballeira, Jesus Carretero, Alejandro Calderon, Jose M. Perez, and Jose D. Garcia",not listed,not listed,Cache Coherence in Parallel I/O Systems,"Dynamic, Adaptive Coherence Protocol",Hardware implementation,N/A,6/1/2004,,N/A,"Tries to solve the coherence problem by  using a dynamic scheme of
cache coherence protocols where data coherence is maintained
on user-defined coherence regions for the conflictive data elements in hugely parallel I/O systems.",,1,,Linux,ParFiSys - A parallel file system architecture using this protocol outlined in the same paper,,
MultiCacheSim,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,https://github.com/blucia0a,Cache Coherence Protocols,"Snooping, MSI, MESI",C++,2003,9/24/2013,3188,1900,The project is a simulator which tests multi-processor caches and also implements snooping based MSI and MESIs and simulates them.,,1,,Linux,Not applicable.,,
Gem5 simulator,http://gem5.org/Main_Page,cs.wisc.edu,NA,http://gem5.org/Main_Page,Cache Coherence Protocols Simation,"Token, Directory, Snooping Cache Coherence Protocols","C++, Ruby","C++03, Ruby",6/25/2015,365142,214845,"All the implementations of various cache coherence protocols are present in the src/mem/protocol directory in the simulator format. The format for specifications of the protocols is high-level language like distalgo called slicc and is similar to C++ or the code can also be implemented in ruby, which is similar to Python and easier to code.",,1,Yes,"Windows, Mac OS, Linux",Simulate various cache coherence protocols before implementing in Hardware,,
Multi Cache Coherence Simulator,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,http://brandonlucia.com/,Cache coherence simulations,Cache coherence,C++,,9/27/2011,,,,,1,,"Windows, Mac OS, Linux",,,
C++ example of MOESI,https://github.com/ssc3/MOESI,shubhojitchattopadhyay@gmail.com,shubhojitchattopadhyay@gmail.com,https://github.com/ssc3/MOESI,Cache coherence.,MOESI,C++,latest,1/2/2013,1000,1K,,,1,,Linux,"None,",,
MESI,https://github.com/ivycheung1208/CacheCoherence/blob/master/MESI_protocol.cpp,Jingyi Zhang,,https://www.linkedin.com/in/jingyz,Cache-Coherence,MESI,C++,11,12/1/2014,256,249,,,,,"Windows, Mac OS, Linux",,,
MOESI_protocol,https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESI_protocol.cpp,Jingyi Zhang,,https://www.linkedin.com/in/jingyz,Cache-Coherence,MOESI,C++,11,12/1/2015,328,321,,,,,Windows,Cache Coherence NUMA,,
MOESIF_protocol,https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp,Jingyi Zhang,,https://www.linkedin.com/in/jingyz,Cache-Coherence,MOESIF,C++,11,12/1/2014,368,361,,,,,"Windows, Mac OS",Cache Coherent NUMA,,
MESI-Cache-Coherence,https://github.com/gsiddardha/MESI-cache-coherence,Siddardha Garimella,gsiddardha@gmail.com,https://github.com/gsiddardha,Canche Coherence,MESI Cache Coherence Protocol,C++,,9/27/2011,1302,1105,"User can specify the cache parameters such as cache size, associativity, block size. The cache simulator uses the LRU replacement policy.",,1.0.0,,Linux,,,
Chord,http://open-chord.sourceforge.net/,MIT,MIT : http://open-chord.sourceforge.net/,http://open-chord.sourceforge.net/,Chord: DHT,Chord,Java,Latest,1/1/2008,10000,10K,,,1,Yes,Linux,,,
Kerberos,http://web.mit.edu/kerberos/,MIT,krbdev@mit.edu.,,client/server authentication,secret-key cryptography,C/C++,,2/13/2015,5531706,379178,"The Kerberos protocol uses strong cryptography so that a client can prove its identity to a server (and vice versa) across an insecure network connection. Kerberos protocol messages are protected against eavesdropping and replay attacks. Kerberos builds on symmetric key cryptography and requires a trusted third party, and optionally may use public-key cryptography during certain phases of authentication. It uses UDP port 88 by default.",Production Ready: Yes,1.13.2,Yes,"Windows, Mac OS, Linux","Microsoft WIndows,  FreeBSD, Mac OS X, Red Hat Enterprise Linux, Solaris, AIX, Z/OS, HP-UX and OpenVMS ",,
chord,https://github.com/sit/dht/blob/master/chord/chord.C,"Frans Kaashoek,Frank Dabek","kaashoek@lcs.mit.edu,fdabek@lcs.mit.edu","http://www.csail.mit.edu/user/1525,http://fdabek.com",decentralizing distributed system and providing lookup service,chord,C,unknown,1/1/2001,587,513,"very clean ,easy to understand",none,1,,"Windows, Mac OS, Linux",Chord lookup service and the cooperative file system (CFS):https://github.com/sit/dht,,
cluster,https://github.com/secondbit/wendy/blob/master/cluster.go,Paddy,paddy+github@paddy.io,https://github.com/paddyforan,decentralizing distributed system and providing lookup service,Pastry Distributed Hash Table.,Go,Go 1.0.3,5/16/2013,1062,997,"An open source, pure-Go implementation of the Pastry Distributed Hash Table.
Wendy was developed on OS X 10.8.1, using Go 1.0.3. It has been verified to work as expected running under Ubuntu 12.04 LTS (64-bit), using Go 1.0.3.
License: Copyright (c) 2012 Second Bit LLC
More information: https://github.com/secondbit/wendy
GoDoc : https://godoc.org/secondbit.org/wendy","""id:unique string""
""local_ip_address:string""
""global_ip_address:string""
""your_region:string""
""port:int""",beta1,,"Mac OS, Linux",none,,
Chordial,https://github.com/mattwilliamson/chordial,Matthew Williamson,matt@aimatt.com,http://aimatt.com,DHT,Chord,Erlang,5.7.3,6/10/2009,812,679,,,1,,"Windows, Mac OS, Linux",,,
Chord Distributed Hash Table,https://github.com/optimizely/chord,Brian Ollenberger,brian@ollenberger.com,https://github.com/bollenberger,DHT,Chord,Node.js,Node.js v0.10.2,8/7/2013,377,332,,,1,,"Windows, Mac OS, Linux",,,
webrtc-chord,https://github.com/tsujio/webrtc-chord,Jure Triglav,me@juretriglav.si,http://juretriglav.si,DHT,Chord,WebRTC,M37,7/5/2014,2889,2543,,,1.0.0,,"Windows, Mac OS, Linux",,,
The Raft Consensus Algorithm,https://raft.github.io,"Blake Mizerany, Xiang Li and Yicheng Qin",,https://github.com/logcabin/logcabin,Dist Concensus,Paxos,C++,,,10000,7000,,,,,Linux,,,
Plain Paxos Implementations in Python,https://github.com/cocagne/paxos,Tom Cocagne.,tom.cocagne@gmail.com,,Dist Concensus,Paxos,"Python, Java",,5/19/2012,2403,2010,It provides a testing library also,,1,,Linux,,,
Distributed hash table using a chord,https://github.com/chuckha/dht,Chuck,ha.chuck@gmail.com,http://chuckha.com,Dist Hash Table,Chord,Go,,,500,350,,,1,,Linux,,,
Chord distributed hash table,https://github.com/optimizely/chord,"Baraa Hamodi, Brian Lucas et al",,https://github.com/optimizely,Dist Hash Table,Chord,JavaScript,560,,400,,,,1,,Linux,,,
Chord DHT implementation in erlang,https://github.com/mattwilliamson/chordial,Matt Williamson,matt@aimatt.com,http://aimatt.com,Dist Hash Table,Chord DHT,Erlang,,,800,490,,,1,,Linux,,,
Distributed-Chat-Client-Application,https://github.com/DhruvaKumar/Distributed-Chat-Client-Application,Dhruva Kumar,dhruva.kumar08@gmail.com,https://github.com/DhruvaKumar,Distributed Chat Client Application,Needham Schroeder protocol,Java,Java 1.7,11/11/2012,2289,1937,,,1,Yes,"Windows, Mac OS, Linux",Distributed Chat Client Application,,
LibPaxos3,https://bitbucket.org/sciascid/libpaxos/src/7f500c892d72b975c43082fe5aec8c856cb4a85a/paxos/?at=master,Daniele Sciascia,Daniele.Sciascia@usi.ch ,http://atelier.inf.usi.ch/~sciascid/,Distributed Concensus,Lamport's Paxos,C,unknown,6/18/2013,2000,>2000,"LibPaxos  implements the core of the Paxos consensus protocol, and is not cluttered with network specific code. 
git clone https://bitbucket.org/sciascid/libPaxos.git","""proposer-timeout:10""
""proposer-preexec-window:1024""
""lmdb-mapsize:1gb""
""acceptor-trash-files:yes""
""learner-catch-up:no""
""tcp-nodelay:no""",LibPaxos3,Yes,"Windows, Mac OS, Linux",none,,
Java Paxos,https://github.com/cocagne/paxos,Tom cocagne, tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Concensus,Paxos,Java,,1/31/2013,,,"Test Cases
MIT License
Starred on Github",,2,,"Windows, Mac OS, Linux",,,
Plain Paxos Implementations in Python & Java,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Concensus,Paxos,"Python, Java",Python 3,1/1/2013,4258,,Implementations in both Python and Java are provided.,,2,,"Windows, Mac OS, Linux",,,
Erlang Raft Implementation,https://github.com/andrewjstone/rafter,Andrew J. Stone,,https://github.com/andrewjstone,Distributed Concensus,RAFT,Erlang,,4/12/2015,,,"Lot of documentation available in README.md
Apache 2.0 http://www.apache.org/licenses/LICENSE-2.0.html",,6,Yes,"Windows, Mac OS, Linux",,,
Distributed reliable key-value store for the most critical data of a distributed system,https://github.com/coreos/etcd,ETCD,etcd-dev,,Distributed Concensus,Raft,Go,,9/25/2015,347150,347150,,,2.2,Yes,"Windows, Mac OS, Linux",,,
An akka-cluster ready implementation of the raft consesus alg,https://github.com/ktoso/akka-raft,,,,Distributed concensus,Raft,Scala,,11/10/2015,4609,,,,,,"Windows, Mac OS, Linux",,,
Python Paxos ,https://github.com/cocagne/paxos,Tom Cocagne, tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Concensus ,Paxos,Python,,1/31/2013,,,"Test Cases available.
MIT license",,2,Yes,"Windows, Mac OS, Linux",,,
Hashicorp ,https://github.com/hashicorp/raft,Armon Dadgar,armon.dadgar@gmail.com,http://twitter.com/armon,Distributed Consencus,Raft,Go,1.2,10/12/2015,8764,6086," They enable building Consistent, Partition Tolerant (CP) systems, with limited fault tolerance as well and used to manage replicated state machines.",,V1.0,,"Windows, Mac OS, Linux",It is library for providing consensus,,
Atomix,https://github.com/kuujo,Jordan Halterman,jordan.halterman@gmail.com,https://github.com/kuujo,Distributed Consencus,Raft,Java,8,10/28/2015,13966,6725," Persistent 
Consistent 
 Fault-tolerant 
Database 
Coordinated
No need to worry about jars and build issues, maven largely takes care of everything.
Additional Attributes
has slight variations in implementations of asynchronous and synchronous clients/ servers/ distributed resources..
",Lisenced under Apache 2.0,V 1.0 (beta 4),,"Windows, Mac OS, Linux",Serves as a framework for building distributed systems featuring distributed coordination primitives.,,
Python-Paxos,https://github.com/gdub/python-paxos,Gary Wilson Jr.,gary@thegarywilson.com,thegarywilson.com,Distributed Consensum problem,Paxos,Python,Python 3.x,6/29/2012,1191,1005,"This implementation is a generalization of standard Paxos, which is equivalent to a weighted system where processes are assigned equal weights.
Also, Communication between processes occurs using Queue objects, so all processes are run on the same machine, Quorum Algorithm: Weighted instead of majority of processes.",,1,Yes,"Windows, Mac OS, Linux",,,
Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Python,2.7,8/30/2013,1096,970,The library is independent of application domains and networking infrastructures,,2,Yes,Linux,,,
Basic implementation of Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed consensus,Paxos,"Java, Python",Java 7.0,8/30/2013,1050,619,,,1,Yes,"Windows, Mac OS, Linux",,,
OpenReplica,https://github.com/denizalti/concoord,"Deniz Altınbüken, Deniz Altinbuken",concoord@systems.cs.cornell.edu,"http://www.cs.cornell.edu/people/egs/ , http://www.cs.cornell.edu/~deniz/",Distributed consensus,ConCoord,Python,Python 2.7,4/3/2014,12650,9788,"OpenReplica is the newest and easiest to use coordination service for distributed applications. OpenReplica provides availability, reliability and fault-tolerance in distributed systems. ",Reference : http://openreplica.org/,1.1.0,,Linux,,,
Go implementation of EPaxos( a variation of multi-Paxos),https://github.com/go-distributed/epaxos,Iulian Moraru,Iulian Moraru(can be contacted via github),https://github.com/go-distributed/epaxos,Distributed Consensus,EPaxos,Go,latest,3/6/2013,10000,19K,hhttps://github.com/go-distributed/ePaxos,,1,Yes,Linux,EPaxos,,
Copycat,http://atomix.io/copycat/,Jordan Halterman,jordan.halterman@gmail.com,https://github.com/kuujo,Distributed Consensus,Raft,Java,Java 8,10/1/2016,Java - 25k Maven - 700 XML - 80 YAML 25 Bourne Shell - 60,"Java 13262, Maven - 513, Bourne Shell- 45, XML -32 Yaml -15","Of all the raft implementations which I studied this is my favourite simply because how organized and navigatable their websites, features are. It is easy to implement and test with the help of their manual. Its a relatively new interface relased in October 2015 and it is still in the Beta dev phase. Also, the fact that it comes with a whole distributed system framework is highly useful. The atomix provides a complete distributed framework and Catalyst proides i/o and serialization framework. using all these parts, I believe a really quick and useful project can be developed in the timeframe for the final project simply because unlike most other implementations it is not built specifically for 1 purpose like a distributed DB, etc.","pros : has a active dev support, neat website, good user manual, easy installation, good supporting modules for other distributed tasks. 
Cons : Relatively recent, still in the beta phase, no real application has been developed on top of it. 
Leader Election + log replication : yes
Membership Changes : yes	
Log Compaction : yes
Active Development : yes",1.0.0Beta4,Yes,"Windows, Mac OS, Linux","Copycat is part of a whole distributed system stack called Atomix ( consists of Atomix - framework for the distributed system, Copycat - Distriuted concensus, Catalyst - synchronous i/o and serialization framework) . ",,
Nutanix Acropolis,http://www.nutanix.com/products/acropolis/,Nutanix,partnerhelp@nutanix.com,http://www.nutanix.com/contact/,Distributed Consensus,Multi-Paxos,unknown,Unknown,1/1/2011,,NA,More info in Readme,,NA,Yes,Linux,Nutanix - Acropolis Storage Metadata Consistency,,
Paxos,https://github.com/seancribbs/paxos,Justin Shoffstall,justin@shoffstall.net,https://github.com/jmshoffs0812,Distributed Consensus,Multi-Paxos,Erlang,5.10.1,4/12/2013,849,753,,,1,,"Windows, Mac OS, Linux",,,
Multi-Paxos - Distributed Consensus,https://github.com/cocagne/multi-paxos-example,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Consensus,Multi-Paxos,Python,2,4/4/2015,1042,774,"The implementation is very generic and any application that requires distributed consensus can be easily plugged into it. The code is built on top of popular twisted module in Python which is used in implementing event-driven model, which is well suited distributed applications. Also it uses Python mixins, to allow extensibility of the code, very easily, which is based on the concept derived from other functional programming languages.",,1,Yes,"Windows, Mac OS, Linux",No known application implemented using this library yet,,
Paxos Made Moderately Complex (PaxosMMC),https://github.com/denizalti/paxosmmc,DENİZ ALTINBÜKEN,deniz@cs.cornell.edu,http://www.cs.cornell.edu/~deniz/,Distributed Consensus,Multi-Paxos,Python,Python-3.4,3/23/2015,1657,1341,It is the exact implementation of Paxos Made Moderately Complex paper. Code is written in Python. It is easy to install and run.,,1,Yes,"Windows, Mac OS, Linux",Open Replication,,
Multi-Paxos Example,https://github.com/cocagne/multi-paxos-example,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Consensus,Multi-Paxos,Python,Python-2.7,4/4/2015,1234,942,"This implementation uses very simple but functional strategies for each of the implementation-defined aspects of multi-Paxos. The code is written in Python using an asynchronous programming model. The Twisted framework is used to provide UDP networking, the asynchronous callback mechanism, function scheduling, and the overall reactor loop.",,1,,"Windows, Mac OS, Linux",This implementation is done with a focus to understand the multi-Paxos algorithm in a simple way. Code is implemented with an eye towards strong separations of concerns so that implementations for various aspects of the codebase may be easily swapped out.,,
LibPaxos3,http://sourceforge.net/projects/libpaxos/files/LibPaxos3/,Daniele Sciascia,,http://atelier.inf.usi.ch/~sciascid,Distributed Consensus,Paxos,C,,7/11/2013,3740,3216,"Open source Paxos implementation in C, Depends on the Berkley DB although can be compiled to use in memory data structures.",,3,Yes,Linux,,,
LibPaxos,https://bitbucket.org/sciascid/libpaxos,Daniele Sciascia,Daniele.Sciascia@usi.ch,http://atelier.inf.usi.ch/~sciascid/,Distributed Consensus,Paxos,C,,10/24/2015,,,,,3,,Linux,Zookeeper,,
Paxos.Demo,https://github.com/ayende/Paxos.Demo,Ayende Rahien, ayende@ayende.com,http://ayende.com/Blog/,distributed consensus,Paxos,C#,5,3/8/2013,981,833,,,1,,Windows,,,
LibPaxos – General purpose Paxos library,http://sourceforge.net/projects/libpaxos/files/,Marco Tijuana,marco.tijuana@gmail.com,http://sourceforge.net/u/marco-tijuana/profile/,Distributed Consensus,Paxos,"C, Erlang","GCC(any), Erlang BEAM Emulator 5.6",9/1/2013,9800,~5400,Status: Beta,LibPaxos is a collection of open source implementations of the Paxos algorithm. The collection also includes implementations of RingPaxos & FastPaxos.,Rev. 10.4,,"Windows, Mac OS, Linux",,,
C++ example Multi Paxos,https://github.com/apache/mesos/tree/master/src/log,Open source project:https://github.com/apache/mesos/graphs/contributors,Open source project:https://github.com/apache/mesos/graphs/contributors,https://github.com/apache/mesos/graphs/contributors,Distributed consensus,Paxos,C++,C++ 11,10/7/2015,,,,,V0.25.0-rc3,,"Windows, Mac OS, Linux",Apache Mesos uses this for its replicated log. Apache Mesos is a cluster manager that provides efficient resource management for different distributed frameworks.,,
Distalgo vrPaxos original,https://github.com/DistAlgo/distalgo/tree/master/examples/vrpaxos/orig.da,Bo Lin and Yanhong Liu,liu@cs.stonybrook.edu,http://www.cs.stonybrook.edu/~liu,Distributed Consensus,Paxos,DistAlgo,DistAlgo-1.0.0b5,5/7/2015,209,161,None,None,1.0.0.b15,,"Windows, Linux",None,,
Java implementation of Simple Paxos,http://code.google.com/p/java-paxos/,"David Federman, Shane Pope",David.Fe...@gmail.com,,Distributed consensus,Paxos,Java,Java 5,11/29/2011,1262,1040,"simple Paxos implementation in Java , easy to run.",,1,,"Windows, Mac OS, Linux",,,
Paxos in Java,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Consensus,Paxos,Java,1.6+,1/1/2013,1023,889,"Essential Paxos provides basic implementations of the Paxos algorithm. The distinguishing characteristic of this implementation, as compared to other freely available and open-source implementations, is that this library is independent of application domains and networking infrastructures.",,2,,"Windows, Mac OS, Linux",It is a generic implementation of Paxos algorithm,,
Paxos Simulator,https://github.com/drewhannay/paxos,Drew Hannay,drewhannay@gmail.com,http://www.drewhannay.com/,Distributed Consensus,Paxos,Java,Java 7,12/19/2012,1548,1323,,,1,,"Windows, Mac OS, Linux",,,
Python-Paxos,https://github.com/gdub/python-paxos,Gary Wilson Jr.,gary@thegarywilson.com,http://thegarywilson.com,Distributed Consensus,Paxos,Python,Python 3.x,6/29/2012,1191,1007,"good documentation, easy install, Communication between processes occurs using Queue objects, so all processes are run on the same machine, Quorum Algorithm: Weighted instead of majority of processes.",,1,,"Windows, Mac OS, Linux",,,
OpenReplica,http://openreplica.org/,"Deniz Altınbüken, Emin Gün Sirer",concoord@systems.cs.cornell.edu ,http://www.cs.cornell.edu/~deniz/,Distributed Consensus,Paxos,Python,Python 2.7.2,6/5/2012,9917,6304,Implemented by DENİZ ALTINBÜKEN at Cornell who worked with Robbert van Renesse on Paxos made moderately complex paper!,,1.1.0,,"Windows, Mac OS, Linux",None,,
Paxo implementation,https://github.com/gdub/python-paxos,Gary Wilson Jr. and Michael Stathopoulos,gary@thegarywilson.com,http://thegarywilson.com,distributed consensus,Paxos,Python,Python-3.2,7/28/2012,2157,1425,"A demo implementation of the Paxos consensus algorithm implemented in Python.

This was work for a class project in distributed computing to study a weighted version of the Paxos algorithm, in which a quorum is a majority of weight instead of a majority of processes. Weighted Paxos is a generalization of standard Paxos, which is equivalent to a weighted system where processes are assigned equal weights.",,0.1,,"Windows, Mac OS, Linux",,,
essential-Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Python,Python 3.x,1/1/2013,1102,904,This implementation is independent of application domains and networking infrastructures. Very well documented and easy to install.,,2.0.0,Yes,"Windows, Mac OS, Linux",This implementation is independent of application domains and networking infrastructures.,,
Concoord,https://github.com/denizalti/concoord, Deniz Altinbuken and Emin Gun Sirer,"deniz@systems.cs.cornell.edu, egs@systems.cs.cornell.edu",,Distributed Consensus,Paxos,Python,2.7.2,4/3/2014,,,,,1.1.0,,Linux,,,
Python-composable-Paxos,https://github.com/cocagne/python-composable-paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Python and Java,,4/4/2015,,,,,1,,Linux,,,
Essential Paxos,https://github.com/cocagne/paxos,Tom Cocagne and Perry Kundert,"tom.cocagne@gmail.com, perry@hardconsulting.com","https://github.com/cocagne, https://github.com/pjkundert",Distributed consensus,Paxos,"Python, Java",Python-3.2.3,8/30/2013,858,751,,,2,Yes,"Windows, Mac OS, Linux",,,
Essential Paxos ,https://github.com/cocagne/paxos,tom cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,"Python,Java","Python-2.7.6,JDK-1.7",1/15/2013,1100,700,"4 versions of algorithm. Each version adds new features for leader failure handling,leardership management, etc",,2,Yes,"Windows, Mac OS, Linux",,,
Byzantine Paxos algorithm,http://research.microsoft.com/en-us/um/people/lamport/tla/byzpaxos.html,Miguel Castro and Barbara Liskov,"{castro,liskov}@lcs.mit.edu",http://pmg.csail.mit.edu/~castro/osdi99_html/osdi99.html,Distributed consensus,Paxos,TLA+,,11/1/2002,4800,~4k,,,1,,"Windows, Mac OS, Linux",,,
Essential Paxos (Simple Paxos),https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Java and Python,Python-2.7,1/1/2013,1096,500,"It is one of the very few open source implementations of basic Paxos that is independent of application domains and networking infrastructures. So, this can be used both for educational purposes and direct use in networked applications. It also has best documentation, it is well tested and code for testing is also available. It has code written for both Java and Python. It is also easy to install and run.",,2,,"Windows, Mac OS, Linux",,,
Essential Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Consensus,Paxos,Java and Python,Java 5 and Python 2.7,1/17/2013,1091,783,"Essential Paxos provides basic implementations of the Paxos algorithm. The distinguishing characteristic of this implementation is that this library is independent of application domains and networking infrastructures. Whereas most Paxos implementations are deeply and inextricably embedded within application-specific logic, this implementation focuses on encapsulating the Paxos algorithm within opaque and easily re-usable classes.",durable.py : Correct implementations of the Paxos algorithm require saving Acceptor state to persistent media prior to sending Promise and Accepted messages over the network. This module implements a very simple mechanism for efficiently saving application state to disk.,2,,"Windows, Mac OS, Linux",This library provides an algorithmically correct Paxos implementation that may be used for educational purposes in addition to direct use in networked applications. ,,
Essential Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Python,No specific version mentioned,4/23/2012,345,~200,"The library is independent of application domains and networking infrastructures. Whereas most Paxos implementations are deeply and inextricably embedded within application-specific logic, this implementation focuses on encapsulating the Paxos algorithm within opaque and easily re-usable classes",,2,Yes,"Windows, Mac OS, Linux",,,
Essential Paxos,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus,Paxos,Python,,8/9/2012,3064,2048,"Essential Paxos provides basic implementations of the Paxos algorithm. The
distinguishing characteristic of this implementation, as compared to other
freely available and open-source implementations, is that this library is
independent of application domains and networking infrastructures. Whereas most Paxos implementations are deeply and inextricably embedded within
application-specific logic, this implementation focuses on encapsulating the
Paxos algorithm within opaque and easily re-usable classes.
This library provides an algorithmically correct Paxos implementation that may
be used for educational purposes in addition to direct use in networked
applications. This implementation is specifically designed to facilitate
understanding of both the essential Paxos algorithm as well as the practical
considerations that must be taken into account for real-world use.","Production ready: yes
Stable: yes
Intended audience: Developers
Use: Practical/Educational",v2.0,,"Windows, Mac OS, Linux",,,
Raft Implementation,https://github.com/flowerhack/raft/tree/master/raft,Julia Hansbrough,julia@flowerhack.com,http://www.flowerhack.com,Distributed Consensus,Paxos,Python,2.7,3/20/2014,350,250,Simple and Direct implementation of the Raft in Python language. I believe the code is very close implementation of what http://raft.github.io visualisation does.,,1,Yes,"Windows, Mac OS, Linux",,,
Paxos algorithm implemented in Python,https://github.com/gdub/python-paxos,Gary Wilson Jr,gary@thegarywilson.com,http://thegarywilson.com,Distributed Consensus,Paxos,Python,,7/29/2012,1450,1100,Implementation is easy to understand.,,1,,Linux,,,
raft,https://github.com/willemt/raft,Willem Thiart,himself@willemthiart.com,https://github.com/willemt,Distributed Consensus,Raft,C,unknown ,9/25/2015,1715,1419,"C implementation of the Raft consensus protocol under BSD licensed
More about how to use it: https://github.com/willemt/raft","""raft_server_private_t me:(raft_server_private_t*)calloc(1, sizeof(raft_server_private_t))
    me->current_term = 0;
    me->voted_for = -1;
    me->timeout_elapsed = 0;
    me->request_timeout = 200;
    me->election_timeout = 1000;
    me->log = log_new();
    raft_set_state((raft_server_t*)me, RAFT_STATE_FOLLOWER);
    me->current_leader = -1;""",v0.3.0,Yes,"Windows, Mac OS, Linux","ticketd: Distributed durable unique 64bit ID server
url:   https://github.com/willemt/ticketd",,
Raft implementation of RethinkDB,https://github.com/rethinkdb/rethinkdb,RethinkDB team,N/A,rethinkdb.com,Distributed consensus,Raft,C++,C++,9/15/2015,3000,~2.5k,,,2.1.5,,"Windows, Mac OS, Linux",RethinkDB,,
Distalgo example raft original,http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/raft/orig.da,Bo Lin and Yanhong Liu,liu@cs.stonybrook.edu,http://www3.cs.stonybrook.edu/~liu/,Distributed Consensus,Raft,Dist Algo,DistAlgo-1.0.0b15,5/17/2015,235,190,"It is easier to understand than other implementations in other languages because in distalgo it is easier to implement just the algorithm, i.e follower, candidate and the leader term. 
As I have already spent some time on learning distalgo, that helped.",Active development : yes.,1,Yes,"Windows, Mac OS, Linux","Not applications, but it is used by students to understand raft implementation.",,
Raft reference implementation for Erlang,https://github.com/djui/eraft,Uwe Dauernheim,uwe@dauernheim.net,http://djui.io,distributed consensus,raft,Erlang,Erlang OTP-18.1.3,8/28/2013,604,399,Raft is the consensus algorithm implemented in LogCabin coordinator used by RAMCloud,,1,,"Windows, Mac OS, Linux",LogCablin,,
zraft_lib,https://github.com/dreyk/zraft_lib,Dreyk,gunin@satissoft.ru,,Distributed Consensus,Raft,Erlang,,10/15/2015,,,,,1,,"Windows, Linux",,,
Etcd,https://github.com/coreos/etcd,Xiang Li,xiangli.cs@gmail.com,http://xiangli.co,Distributed Consensus,Raft,Go,1.4+,7/31/2013,313465,252867,"is a distributed, consistent key-value store for shared configuration and service discovery, with a focus on being simple, secure, fast and reliable. It manages a highly available replicated log.","Active Development : Yes
Production ready : yes",2.3,Yes,"Windows, Mac OS, Linux",,,
etcd (Go Implementation of Raft),https://github.com/coreos/etcd/tree/master/raft,"Xiang Li, Yicheng Qin","xiangli.cs@gmail.com, qycqycqycqycqyc@gmail.com",http://xiangli.co,Distributed consensus,Raft,Go,Go Version 1.4,9/9/2015,322542,260236,"etcd is a distributed, consistent key-value store for shared configuration and service discovery,",,v2.2.0,,"Windows, Mac OS, Linux",Consul (https://www.consul.io/intro/index.html),,
Goraft,https://github.com/goraft/raft,"Ben Johnson, Brandon Phillips, Xiang Li","xiangli.cs@gmail.com, brandon@ifup.org, benbjohnson@yahoo.com ","https://github.com/benbjohnson, https://github.com/philips , https://github.com/xiang90 ",Distributed consensus,Raft,Go,1.5.0,5/8/2014,6565,5000,Popular Implementation of Raft in Go Lang. Interesting since Go lang is a good fit for distributed computing.,Status: Active,1,,"Windows, Mac OS, Linux",,,
raft,https://github.com/hashicorp/raft/blob/master/raft.go,HashiCorp -  Armon Dadgar ,armon.dadgar@gmail.com,https://github.com/armon,Distributed Consensus,Raft,Go,1.2+,9/7/2015,1819,1557,raft is a Go library that manages a replicated log and can be used with an FSM to manage replicated state machines. It is library for providing consensus,"""raft servers: 3 or 5""",1,Yes,"Windows, Mac OS, Linux",none,,
Raft in GO,https://godoc.org/github.com/coreos/etcd/raft,CoreOS,https://groups.google.com/forum/?hl=en#!forum/etcd-dev,https://coreos.com,Distributed Consensus,Raft,Go,1.4+,11/6/2015,11400,9559,,,v2.3.0-alpha.0,,"Mac OS, Linux",Raft in Go is used in etcd the list of projects are listed in https://github.com/coreos/etcd/blob/master/Documentation/libraries-and-tools.md,,
A Go implementation of the Raft distributed consensus protocol.,https://github.com/goraft/raft,Brandon Philips,brandon@ifup.org,https://twitter.com/brandonphilips,Distributed consensus,RAFT,Go,go 1.2,5/8/2015,6456,5190,This implementation has a mailing list for discussion about best practices and implementation of Raft. Not goraft specific but helpful if you have questions.,slides : https://speakerdeck.com/benbjohnson/raft-the-understandable-distributed-consensus-protocol,1,Yes,"Windows, Mac OS, Linux","weed file system, https://code.google.com/p/weed-fs/
A replicated SQLite database, https://github.com/otoolep/rqlite",,
libraft - Raft distributed consensus protocol in Java,https://github.com/allengeorge/libraft,Allen George,allen.george@gmail.com,"allengeorge.com, https://github.com/allengeorge",Distributed consensus,Raft,Java,6+,4/10/2014,34707,25000,Popular Raft implementation in Java,Status: Active,0.1.1,,"Windows, Mac OS, Linux",Distributed key value store - https://www.versioneye.com/Java/io.libraft:kayvee/0.1.0,,
Raft in Java,http://libraft.io,Allen George,http://www.allengeorge.com/about/,https://github.com/allengeorge,Distributed Consensus,Raft,Java,1.6+,1/25/2015,31972,27236,,,0.1.1,,"Windows, Mac OS, Linux",No known application,,
j-groups-raft,http://belaban.github.io/jgroups-raft/,Bela Ban,,,Distributed Consensus,Raft,Java,,10/6/2015,,,This implementation of Raft relies upon the JGroups Java library.,,0.2,,"Windows, Mac OS, Linux",,,
RaftKVDatabase,http://archiecobbs.github.io/jsimpledb/publish/reports/Javadoc/             index.html?org/jsimpledb/kv/raft/RaftKVDatabase.html,Archie Cobbs,,,Distributed Consensus,Raft,Java,,11/8/2015,,,The Raft implementation is just a part of the larger JSimpleDB implementation--a distributed database built in Java.,,1.3.3,,"Windows, Mac OS, Linux",,,
"POSIX Shell Script, LiteRaft",https://github.com/inokappa/lite-raft,Luigi Tarenga,luigi.tarenga.gmail.com,https://code.google.com/u/115487500275013469834/,Distributed Consensus,Raft,POSIX Shell Script,Bash,9/12/2015,1110,815,"It is completely written in bash and it is quite well written as far as code quality and structure is concerned.
Things like cluster_nodes, election_timeout parameters can be configured in a config file, can start the raft process on each node as a daemon which keeps running, has command line arguments to start/stop them as well.
It is little bit harder to understand because need to understand bash but this implementation is quite close to a real world distributed system and hence I could relate to it.",,1,Yes,"Mac OS, Linux, HP-UX",Failover cluster manager,,
Simple Raft,https://github.com/streed/simpleRaft,Sean Reed,,,Distributed Consensus,Raft,Python,Python-2.6,5/1/2015,435,396,,This is the simplest implementation of Raft consensus algorithm in Python. It is well documented. Code is written in Python. It is easy to install and run. It is also well-tested for correctness and code for testing is also available.,2,,"Windows, Mac OS, Linux",,,
Distributed consensus - Raft,https://github.com/inokappa/lite-raft,Luigi tarenga,luigi.tarenga@gmail.com,https://github.com/inokappa,Distributed Consensus,Raft,Shell,,9/12/2014,1102,871,"This implementation supports 
1. Leader Election 
2. Log Replication
3. Membership Changes(Reconfiguration)
4. Log Compaction",,1,,"Linux, Unix",No Documented uses of the implementation,,
Raft specification,https://github.com/ongardie/dissertation,Diego Ongaro,ongardie at gmail dot com,https://ongardie.net/diego/,Distributed consensus,Raft,TLA+,,12/2/2014,485,400,,,1,,"Windows, Mac OS, Linux",,,
LogCabin,https://github.com/logcabin/logcabin,Diego Ongaro,ongardie@gmail.com,https://ongardie.net/diego/,Distributed Consensus,Raft,C++,g++ 4.4,1/2/2012,47648,31082,"LogCabin is a distributed system that provides a small amount of highly replicated, consistent storage. It is a reliable place for other distributed systems to store their core metadata and is helpful in solving cluster management issues. LogCabin uses the Raft consensus algorithm internally and is actually the very first implementation of Raft.","1. Active Development: Yes
2. Documented: Well Documented
3. First Implementation of Raft: Yes
4. Change in Debug log verbosity at runtime for a single server: yes (without shutting the server down)
5. Controls Server Snapshot behavior",1.1,,Linux,,,
LogCabin (Raft implementation in C++),https://github.com/logcabin/logcabin,Diego Ongaro and Ali Mashtizadeh,ongardie@gmail.com; ali@vmware.com,https://ongardie.net/diego; http://people.csail.mit.edu/alim/index.html,Distributed Consensus,Raft,C++,g++ (v4.4),4/29/2015,,,"LogCabin is a distributed storage system built on Raft that provides a small amount of highly replicated, consistent storage. It is released under ISC license.","1. Leader Election + Log Replication : yes
2. Membership Changes : yes
3. Log Compaction : yes",1.1.0,,Linux,Other distributed systems to store their core metadata and is helpful in solving cluster management issues.,,
Rethink DB Raft Implementation,https://github.com/rethinkdb/rethinkdb/tree/next/src/clustering/generic,SRH,sam@subtercosm.org,https://github.com/srh,Distributed Consensus,Raft,C++,,10/7/2015,2500,2300,,,2.1.5,Yes,"Windows, Mac OS, Linux",Rethink DB,,
libraft,https://github.com/allengeorge/libraft,allen george,http://www.allengeorge.com,http://www.allengeorge.com,Distributed Consensus,Raft,Java,7,1/25/2014,9760,8690,"good features like minElectionTimeout, additionalElectionTimeoutRange, rpcTimeout, heartbeatInterval and minReconnectInterval",,0.1.1,Yes,"Windows, Mac OS, Linux",libraft-samples/kayvee(Key-value store),,
Hashicorp/raft,https://github.com/hashicorp/raft,Hashicorp,,https://www.hashicorp.com,Distributed Consensus,Raft,Go,1.2,1/1/2013,8400,6100,"Of all the 3 implementations I posted, this is my least favourite but it is still better documented and has the 3 minimum features of ( leader election + log replication, membership changes, log compaction that I look for in a raft algorithm). Also, most raft implementations listed in the raft website are applications of raft for specific purposes. Most such raft implementations have little or no documentaion for the raft algorithm. Also, they may miss 1 or 2 features if their application does not require it. This implementation by Hashcorp has a dedicated implementation for raft with good documentation and APIs. Developer support seems to be minimal with the last commit made almost a month ago and the last build failing but I believe that can be fixed. ","pros : good documentation, reputed organization, lot of developers, has all features expected from a Raft algorithm
cons : recent development has been minimal, does not seem to be used anywhere. 
Leader Election + log replication : yes
Membership Changes : yes	
Log Compaction : yes",0.0.0.0,,"Mac OS, Linux","Nothing yet, from what I can see.",,
etcd/raft,https://github.com/coreos/etcd/tree/master/raft,"Blake Mizerany, Xiang Li and Yicheng Qin (coreOs)",,https://github.com/coreos,Distributed Consensus,Raft Protocol ,Go,,11/6/2015,11400,8900,"Unlike the previous implementation of Copycat, raft is just a part of the etcd implementation. It is rated very highly and has been through multiple stable releases over the past two years. The etcd key-value has a good documentation where as the raft implementation documentation is not that well documented. It seems to be the problem with many of these implementations that use raft as a sub module for replicated database applications. One good source of documentation for raft is the doc.go file and design.md file in raft folder in the github repo. The API and their function for multi-cluster setup has been developed properly and has been tested but I am still not perfectly happy with the implementation of the raft protocol in terms of its understandablility.","pros : active and tested project that has gone through several releases. The raft implementation though simple seems to be robust, has a good key -value store built on top of it.
cons : no good documentation for raft, might need source code sifting to properly understand it.
Leader Election + log replication : yes
Membership Changes : yes	
Log Compaction : yes",2.3.0 Alpha.0,Yes,Linux,etcd - is their replicated key-value for service discovery and shared config which uses this underlying raft implementation.,,
"DistAlgo example Raft, vrPaxos, laPaxos",http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/laPaxos/; http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/vrPaxos/; http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/raft/, Bo Lin and Yanhong Liu,liu@cs.stonybrook.edu,https://www.google.com/url?q=http://www.cs.stonybrook.edu/~liu&sa=D&usg=AFQjCNE_8xc-j_7XZ-tPCc_cHAyAoqGqEw,Distributed Consensus,"Raft, Lamport's Paxos, VanReese's Paxos",DistAlgo,DistAlgo-1.0.0b14,2/26/2015,LaPaxos: 90; VRPaxos: 209; Raft: 235,LaPaxos: ~60; VRPaxos: ~155; Raft: 196,Implementation is simple to comprehend,"""Active development: yes""",1,Yes,"Windows, Mac OS, Linux",None,,
"cocagne Paxos(essential,functional and practical)",https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed consensus,Simple Paxos,Java,Java 7.0,1/1/2013,366,340,There are 3-4 versions/features on top of the basic Paxos implementation which include simple heartbeating mechanism to detect leadership failure and initiate recovery(functional Paxos implementation),,2,Yes,"Windows, Mac OS, Linux",,,
Simple Raft,https://github.com/streed/simpleRaft,Sean Reed,Not provided,https://github.com/streed,Distributed Consensus,Simple Raft,Python,"Python 2.6, 2.7, 3.2",5/22/2015,519,360,"It is written in Python and since I understand Python it was decently straightforward.
It has unit test cases which makes it easier to understand the code flow.
The code is nicely modularized, like each of the leader, candidates and the followers have separate files and their functionality is written in functions with names which are familiar with anyone comfortable with raft algorithm. E.g follower has only one method specifying what it does on receiving append_entries request, same goes for other types of processes as well.",Active development : yes.,1,Yes,"Windows, Mac OS, Linux",Not aware of.,,
JZab- ZooKeeper Atomic Broadcast (Zab) in Java.,https://github.com/zk1931/jzab,Yisheng Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed Consensus,Zab,Java,JDK - 1.7,11/18/2014,1600,1000,"High throughput,fuzzy snapshot, dynamic reconfiguration, secure config",,0.3.0,Yes,"Windows, Mac OS, Linux","""zabkv"" -  key value store, "" PulseFS"" - replicated filestore for distributed coordination""",,
,https://zookeeper.apache.org/,,dev@zookeeper.apache.org,,Distributed Consensus,ZAB,Java,1.7,8/31/2015,10000,10000,Extensive documentation,,3.5.1,,"Windows, Mac OS, Linux",Cassandra,,
Jzab,http://zk1931.github.io/jzab/0.4.0-SNAPSHOT/,Yisheng Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed Consensus,Zab protocol,Java,JDK 1.7,6/4/2014,13946,8644,"Its features include high throughput, fuzzy snapshot (minimizes service interruption while taking snapshots), dynamic reconfiguration, minimum runtime dependencies and secure communication",,1,,"Windows, Mac OS, Linux","zabkv, pulsed",,
ZooKeeper Atomic Broadcast,https://github.com/zk1931/jzab/,Yisheng Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed consensus,Zab: High-performance broadcast for primary-backup systems,Java,JDK 1.7,6/4/2015,17871,11000,"High throughput - benchmarked > 20k writes/sec on commodity hardware.
Fuzzy snapshot - minimizes service interruption while taking snapshots.
Dynamic reconfiguration - add/remove servers without restarting the cluster.
Minimum runtime dependencies - netty, protobuf, slf4j.
Secure communication - using ssl.",,1,Yes,"Windows, Mac OS, Linux","A simple reference server, https://github.com/zk1931/zabkv
An HTTP-based replicated filestore for distributed coordination, https://github.com/zk1931/pulsefs",,
JZab,https://github.com/zk1931/jzab/, Eason Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed Consensus,Zookeeper Atomic Broadcast,Java,JDK-1.7,6/4/2014,13946,8644,"1. High throughput
2. Fuzzy snapshot - minimizes service interruption while taking snapshots.
3. Dynamic reconfiguration - add/remove servers without restarting the cluster.
4. Minimum runtime dependencies - netty, protobuf, slf4j.
5. Secure communication - using ssl.

Since, ZooKeeper's Zab implementation is rather entangled with ZooKeeper code base. Jzab is an independent implementation of Zab protocol to facilitate other users who want to build applications on top of it.",,1,,"Windows, Mac OS, Linux","zabkv - A simple reference server.
pulsed - An HTTP-based replicated filestore for distributed coordination.",,
ZooKeeper Atomic Broadcast in Java(jZab),https://github.com/zk1931/jzab/,Yisheng Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed Consensus,ZooKeeper Atomic Broadcast,Java,jdk 1.7,11/7/2014,9540,8992,"Very Well documented, good features like High throughput , Fuzzy snapshot , Dynamic reconfiguration, Minimum runtime dependencies and Secure communication",,,Yes,"Windows, Mac OS, Linux",pulsed (An HTTP-based replicated filestore for distributed coordination),,
jzab - Distributed Consensus,http://zk1931.github.io/jzab/master/,Yisheng Liao,eason.liao@nyu.edu,https://keybase.io/yisheng,Distributed Consensus,Zookeeper Atomic Broadcast(ZAB),Java,"JDK-7, protobuf-compiler, ant, maven-2, netty, slf4j",6/4/2015,9017,5299,"The implementation claims a very high throughput of more than 20k requests/sec.
It also has features like Dynamic Reconfiguration and fast and low overhead snapshots.",,1,Yes,"Windows, Mac OS, Linux",PulseFS - A distributed HTTP-based replicated filestore,,
 etcd,https://github.com/coreos/etcd,Xiang Li,xiangli.cs@gmail.com,http://xiangli.co,Distributed Consensus ,Distributed concensus(RAFT),Go,1.4,10/18/2015,313479,252874,"Simple: user facing API (HTTP+JSON)
Secure: optional SSL client cert authentication
Fast: benchmarked 1000s of writes/s per instance
Reliable: properly distributed using Raft
Leader Election + Log Replication
Membership Changes
Log Compaction
Lisenced under Apache2.0",,V 2.2.1,,"Windows, Mac OS, Linux, DOCKER,AppC","etcd is a distributed, consistent key-value store for shared configuration and service discovery.it manages a highly-available replicated log and can be simply started as a simple command line client.",,
Plain Paxos by Tom Cocagne,https://github.com/cocagne/paxos,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Distributed Consensus ,Paxos,"Python, Java",Python 2.7 and Java 1.7,1/16/2013,3598,3526,None,None,1,,"Windows, Mac OS, Linux",None,,
GO example for Raft ,https://github.com/hashicorp/raft/blob/master/raft.go,OpenSource Project(main contributor Armon Dadgar),armon.dadgar@gmail.com,https://github.com/hashicorp/raft/graphs/contributors,Distributed Consensus ,Raft,GO,GO1.2+,,,,,,v1.0,,"Windows, Mac OS, Linux",Consul 'a tool which provides services discovery and key value store as main features'.,,
Python implementation of Multi-Paxos,https://github.com/denizalti/paxosmmc,denizalti,denizalti( can be contacted via github link posted above).,https://github.com/denizalti/paxosmmc,Distributed consensus  with replication.,Multi-Paxos,Python,latest,1/1/2014,6000,5500,https://github.com/denizalti/paxosmmc,,1,Yes,Linux,Lot of distributed storage applications.,,
Python-composable-Paxos,https://github.com/cocagne/python-composable-paxos,Tom Cocagne,tom.cocagne@gmail.com,,Distributed Consensus Problem,Paxos,Python,Python 3.x,4/4/2015,632,598,The advantage to this minimalist approach over more full-featured solutions is flexibility. These classes have no external dependencies and they make no assumptions about the application's operational environment or message handling semantics. All they do is correctly implement the core algorithm in a neat little black box that can be used as a foundational building block for distributed applications.,,1,Yes,"Windows, Mac OS, Linux",,,
GO implementation of Raft,https://github.com/coreos/etcd/blob/master/raft/node.go,"Opensource community,mainly , Xiang Li and Yicheng Qin","xiangli.cs@gmail.com,qycqycqycqycqyc@gmail.com(all contributors https://github.com/coreos/etcd/graphs/contributors)",https://github.com/coreos/etcd/graphs/contributors,Distributed Consensus with Replication,RAFT algorithm,GO,GO1.5,10/15/2015,,,,,v2.2.1,,"Windows, Mac OS, Linux","Many opensource software's mainly in the container\cluster space use this as distributed key/value store like kubernetes(http://kubernetes.io/),Deis(http://deis.io/)",,
Raft implementation in Go.,https://github.com/coreos/etcd,Xiang Li and Et. al,https://github.com/coreos/etcd : Developers can be contacted via github.,https://github.com/coreos/etcd,Distributed Consensus.,Raft.,GO.,latest.,10/10/2014,2500,2000,This is part of COREOS,,2,Yes,Linux,Etcd of coreOS.,,
Java implementation of Chord,http://sourceforge.net/projects/open-chord/,Sven Kaffille and Karsten Loesing,,http://sourceforge.net/u/skaffille/profile/ http://sourceforge.net/u/kloesing/profile/,Distributed Hash,Chord,Java,1.5,4/23/2013,,,,,1.0.5,,"Windows, Mac OS, Linux",,,
Python Chord Implementation,https://github.com/gaston770/python-chord,Gaston Ingaramo,gaston770@gmail.com,https://github.com/gaston770,Distributed Hash,Chord,Python,Python 2.7 ,3/3/2014,,,Good Documentation,,1,,"Windows, Mac OS, Linux",,,
C++ Distributed Hash Chord by MIT,https://github.com/sit/dht/wiki,Emil Sit,chord-dev@pdos.lcs.mit.edu,http://www.emilsit.net/blog/,Distributed Hash ,Chord | Dhash,C++,C99,4/1/2008,,,,,1,,Linux,,,
Kademlia distributed hash table,https://github.com/jech/dht,Juliusz Chroboczek,jch@pps.jussieu.fr,,distributed hash table, Kademlia distributed hash table,C,,5/19/2009,2846,2534,,,dht-0.24,,"Mac OS, Linux",,,
Voldemort,http://www.project-voldemort.com/voldemort/,Alex Feinberg,alex@strlen.net,http://afeinberg.github.io/,Distributed Hash Table,Amazon Dynamo,Java,7,5/31/2009,8553400,8101452,,,,,"Windows, Mac OS, Linux","big, distributed, persistent, fault-tolerant hash table.",,
dht,https://github.com/sit/dht,Emil Sit,sit@emilsit.net,http://www.emilsit.net/blog/,Distributed Hash Table,Chord,C,,4/4/2008,,,,,1,,Linux,cooperative file system,,
C++ example CHORD,https://github.com/sit/dht/tree/master/chord,"Emil Sit,Ion Stoica","istoica@cs.berkeley.edu,",http://www.cs.berkeley.edu/~istoica/,Distributed Hash Table,CHORD,C++,C++11,4/4/2008,,,,,V1,,"Windows, Mac OS, Linux",,,
experimental implementation of chord lookup service,https://github.com/sit/dht,Emil Sit,chord-dev@pdos.lcs.mit.edu,http://www.emilsit.net,distributed hash table,Chord,C++,C++98,4/4/2008,28760,23540,It was an experimental implementation of chord lookup service and the cooperative file system(CFS) ,,1,,"Mac OS, Linux",,,
MIT Chord/DHash,https://github.com/sit/dht/wiki,Emil Sit,sit@emilsit.net,http://www.emilsit.net/,distributed hash table,Chord,C++,,4/8/2008,3086,2500,"""implements the API defined in chord.h to maintain routing tables, add/remove nodes from the network, route simple queries. libchord also provides a node-to-node RPC service based on SFS asynchronous RPC. DHash depends on chord and builds a replicated block store on the basic Chord primitive""",,1,,"Windows, Mac OS, Linux",cooperative file system (CFS),,
Chord Distributed hash table,https://github.com/saketkunwar/erl_dht,saket kunwar,saketkunwar2005@gmail.com,,Distributed hash table,Chord,Erlang,,12/7/2009,3423,2472,,,1,,"Windows, Mac OS, Linux",,,
Go-Chord,https://github.com/armon/go-chord,Armon Dadgar,armon.dadgar@gmail.com,https://github.com/armon,Distributed Hash Table,Chord,GoLang,4.9.1,7/13/2013,2917,2900,,,None,,"Windows, Mac OS, Linux",,,
Open Chord,http://open-chord.sourceforge.net/,Distributed and Mobile Systems Group of Bamberg University, open-chord-users@lists.sourceforge.net,https://www.uni-bamberg.de/en/pi/bereich/research/software_projects/openchord/,Distributed Hash Table,Chord,Java,Java 1.7,4/23/2013,19875,9245,,,1.0.5,,"Windows, Mac OS, Linux",None,,
JChord,https://code.google.com/p/joonion-jchord/,Joonion Bae,joonion@gmail.com,https://code.google.com/p/joonion-jchord/,Distributed Hash Table,Chord,Java,1.7,11/5/2008,560,422,None,None,0.1,,"Windows, Mac OS, Linux",None,,
JChord,https://code.google.com/p/joonion-jchord/,Joonion Bae,joonion@gmail.com,,Distributed Hash Table,Chord,Java,7,7/29/2013,500,450,Test utilities can be used as driver functions,"""Test with various parameters: Yes""",1,,"Windows, Mac OS, Linux",None,,
OpenChord,http://open-chord.sourceforge.net/,Karsten Loesing & Sven Kaffille,http://sourceforge.net/u/kloesing/wiki/Home/; http://sourceforge.net/u/skaffille/profile/,http://sourceforge.net/u/kloesing/wiki/Home/; http://sourceforge.net/u/skaffille/profile/,Distributed Hash Table,Chord,Java,5,11/4/2008,2500,1800,"***TAKEN FROM PROJECT HOMEPAGE***    
Store any serializable Java object within distributed hash table (dht).
    Provides possibility to create own key implementations used with dht by implementing an interface of OpenChord API.
    Facilitates configurable replication of entries in dht.
    Currently provides two (proprietary) protocols for communication between chord nodes:
        Local method calls: This protocol can be used to create a dht within one Java Virtual Machine for testing and visualization purposes. A command line interface is provided to set up such a chord overlay network.
        Java Sockets: This protocol creates a dht distributed over different nodes (JVMs). For testing purposes Chord nodes using this protocol can also be created with a command line interface.
        Custom Protocols: Custom protocols can be provided by other developers, which in the current state of the implementation unfortunately requires a recompilation of Open Chord.","""Documentation: Very Good""",1,Yes,"Windows, Mac OS, Linux",None,,
Chord in Java,http://sourceforge.net/projects/open-chord/files/Open%20Chord%201.0/1.0.5/,Karsten Loesing and  Sven Kaffille,-,https://www.uni-bamberg.de/?id=5372,Distributed Hash Table,Chord,Java,1.5+,11/4/2008,19878,9244,"-Store any serializable Java object within distributed hash table (dht).
-Provides possibility to create own key implementations used with dht by implementing an interface of OpenChord API.
-Facilitates configurable replication of entries in dht.",,1.0.5,,"Windows, Mac OS, Linux",No known application,,
Chord in Java,https://github.com/tomp2p/TomP2P,TomP2P,tom-at-tomp2p.net,http://tomp2p.net,Distributed Hash Table,Chord,Java,1.6+,5/27/2015,13433,10114,Java6 DHT implementation with non-blocking IO using Netty.,,tomp2p-parent-5.0-Beta8,,"Windows, Mac OS, Linux","This implementation is used in TomP2P, a P2P library which provides a decentralized key-value infrastructure for distributed applications.",,
CiteSeerX,https://pdos.csail.mit.edu/papers/?search=key:%22overcite:nsdi06%22#overcite:nsdi06,SeerLabs,,http://citeseerx.ist.psu.edu/index,Distributed Hash Table,Chord,"Java , Python",7,7/11/2013,10871512,"Java :3111832 , Python : 466809",,,,,"Mac OS, Linux",scalable and load-balanced storage and query processing with automatic data management,,
Donut,http://alevy.github.io/donut/,"Amit Levy, Jeff Prouty, Rylan Hawkins",,,Distributed Hash Table,chord,"Java, Ruby",,1/1/2009,4000,2665,"This is a academic project in University of Washington in the year 2009. It is minimal interface that follows the basics of the Chord specified in the paper. It has no testing data and is not really resistent to failures or delayed messages. Basically, stale reads and delayed reads leave the system in an inconsistent state and that means that an important feature of distributed hash table is not being met. So, adding concensus on top of this implementation of chord can be a useful project idea but more understanding of the implementation adn correctness is needed before anything can be said with certainty. Note : Byzantine failures are not handled .","Fault Tolerant : no
Complete Implementation : no
Active Development - no
Academic Project : yes",0.0.0,,"Mac OS, Linux",,,
Chord: Distributed Hash Table,https://github.com/optimizely/chord,Brian Ollenberger,,,distributed hash table,chord,JavaScript,JavaScript 1.8,8/7/2013,368,245,Chord is a self-organizing distributed hash table. This is an implementation of the Chord in Node.js. It provides the ability to construct a Chord cluster and to route application layer messages to a process responsible for a range of keys.,supports virtual nodes and uses UDP as its out-of-process transport layer,0.1.2,,"Windows, Mac OS, Linux",corporate file system,,
Python-Chord,https://github.com/gaston770/python-chord,Gaston Ingaramo,gaston770@gmail.com,NA,Distributed Hash Table,Chord,Python,2.7,3/3/2014,1800,1500,Edit settings.py for various mode of execution,"""Tweakable interfaces: Yes""",1,,"Windows, Mac OS, Linux",None,,
DHT-Demo,https://github.com/Elderry/dht-demo,Ruiyang Li,elderry@outlook.com,https://cn.linkedin.com/in/elderry,Distributed Hash Table,Chord,Python,2.7,7/16/2015,1011,903,"Nicknames of the nodes to be unique, the initial node must be run with name localhost. Depends on the twisted asynchronous network api for the n/w iops.",,1,,Linux,,,
DHT-Demo,https://github.com/Elderry/dht-demo,Ruiyang Li,elderry@outlook.com,https://cn.linkedin.com/in/elde,Distributed Hash Table,Chord,Python,2.7,7/16/2015,1099,980,"Nicknames of the nodes to be unique, the initial node must be run with name localhost. Depends on the twisted asynchronous network api for the n/w iops.",,1.0.0,,Linux,,,
Chord Implementation in Ruby,https://github.com/wyhaines/Chord,https://github.com/wyhaines,wyhaines@gmail.com,,Distributed Hash Table,Chord,Ruby,Ruby 2.2.3,10/7/2015,1440,1085,This is the implementation of Chord paper with some modifications. It is well documented and easy to understand. It is easy to install and use.,,v1.0,,"Windows, Mac OS, Linux",,,
Distributed hash table using a chord,https://github.com/chuckha/dht,Chuck Ha,ha.chuck@gmail.com,https://github.com/chuckha,Distributed Hash Table,Chord ,Go,,11/1/2013,872,,,,,,,,,
Chord distributed hash table for Node.js,https://github.com/optimizely/chord,Optimizely,,,Distributed Hash Table,Chord ,JavaScript,,8/7/2013,678,,,,,,"Windows, Mac OS, Linux",A lot of node.js applications,,
Zero-hop distributed hashtable,https://github.com/mierl/ZHT,Illinois Institute of Technology,,http://datasys.cs.iit.edu/projects/ZHT/,Distributed hash table,Chord,"C, C++","Google protocol buffers c binding, VERSION 0.15 or later, Google protocol buffers C++ binding, VERSION 2.4.1",12/23/2013,23521,14502,"ZHT has several important features making it a better candidate than other distributed hash tables and key-value stores, such as being light-weight, dynamically allowing nodes join and leave, fault tolerant through replication and by handling failures gracefully and efficiently propagating events throughout the system, a customizable consistent hashing function, supporting persistence for better recoverability in case of faults, scalable, and supporting unconventional operations such as append (providing lock-free concurrent key/value modifications) in addition to insert/lookup/remove.","Features: Event-driven model, epoll, TCP, UDP, Threads
Scalability: Up to 32768 instances on BlueGene/P
Throughput: 18M ops/sec (tested on BlueGene/P with 32768 cores)",1,Yes,Linux,,,
MIT Chord/DHash Server,https://github.com/sit/dht,MIT Project,chord@pdos.lcs.mit.edu,https://github.com/sit/dht/wiki,Distributed Hash Table,Chord,C++,,11/7/2001,38896,32223,"1. maintain routing tables
2. add/remove nodes from the network
3. route simple queries
4. libchord also provides a node-to-node RPC service based on SFS asynchronous RPC.
5. DHash depends on chord and builds a replicated block store on the basic Chord primitive.",Experimental: yes,1,,"Mac OS, Linux, BSD, Solaris","""Filestore"" is a basic Chord application that can store and retrieve files from a Chord ring. It demonstrates how to use DHash to store blocks, and how to write programs with libasync. The source code for filestore can be found in the Chord source code in sfsnet/devel/filestore.C",,
Open Chord,http://sourceforge.net/projects/open-chord/,Mobile Systems Group of Bamberg University,,http://open-chord.sourceforge.net/,Distributed Hash Table,Chord,Java,Java 5,11/4/2008,19878,9244,Open Chord is an open source implementation of the Chord distributed hash table,"Requirements : Java 2 Standard Edition 5.0, log4j, Apache ant ",1,,"Windows, Mac OS, Linux",,,
Distributed-Hash-Table,https://github.com/HarshHarwani/Distributed-Hash-Table,Harsh Rajesh Harwani,harwaniharsh@gmail.com ,http://www.acsu.buffalo.edu/~hharwani/,Distributed Hash Table,Chord,Java,,7/1/2015,,,,,1,,"Windows, Mac OS, Linux",,,
Distributed Hash Table implementation according to the Chord,https://github.com/zstring/Distributed-Hash-Table,Himanshu Sharma,jai.himanshu001@gmail.com,,Distributed Hash Table,Chord,Java,1.7jdk,4/9/2015,5414,5100,"Straight forward and easy to understand. Also supports insert and query opearations along with all DHT functionalities
Three Main Functionalities are implemented
1) ID space partitioning/re­partitioning,
2) Ring­based routing, and 
3) Node joins",,,,Linux,,,
Riak,http://docs.basho.com/riak/latest/,Aerospike,,,Distributed Hash Table,Distributed Key-Value Data Store,Erlang,,8/17/2009,127255,47633,,,2.1.0,,"Windows, Mac OS, Linux",Distributed Hash Table,,
Dynamo in Java,https://github.com/itsnayeem/Dynamo,Shah,-,https://github.com/itsnayeem,Distributed Hash Table,Dynamo,Java,1.6+,1/3/2012,1230,1013,This is a partial implementation of Amazon's Dynamo which supports Distributed Hash Table(DHT),,1,,"Windows, Mac OS, Linux",No know application,,
Apache Cassandra,http://cassandra.apache.org/,Apache Fondation, user-subscribe@cassandra.apache.org,http://cassandra.apache.org/,Distributed Hash Table,Dynamo,Java,,10/8/2008,23149077,13228044,,,2.2.3,,"Windows, Mac OS, Linux",,,
FreePastry,http://www.freepastry.org,cs.rice.edu,freepastry@cs.rice.edu,http://www.freepastry.org,Distributed Hash Table,FreePastry DHT,Java,JDK-5,3/13/2009,174959,82371,The library implements Pastry variant of DHT protocols and is huge and very popular among pastry implementations. Not very secure as there is no support for malicious nodes.,,2.1,Yes,"Windows, Mac OS, Linux","SCRIBE, PAST, SQUIRREL etc.",,
Java Distributed Hash Table,http://dks.sics.se/jdht/,KTH/Royal Institute of Technology,dks@sics.se,http://www.kth.se/en,Distributed Hash Table,JDHT is a simple Java based Distributed Hash Table (DHT) which implements Java.util.Map. ,Java,Java 7,,,,"DHTs are very scalable distributed data structured originated from research on peer-to-peer (P2P) computing. 
Written in Java and it implements the Java.util.Map class.
It is a Java Collections/Map compatible DHT.",Active development : Yes.,1,Yes,Linux,,,
Python implementation of Kademila ,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com,http://findingscience.com,Distributed Hash Table,Kademila,Python ,Python 2.7,7/27/2015,2409,1557,Kademlia is a distributed hash table for decentralized peer-to-peer computer networks designed by Petar Maymounkov and David Mazières in 2002. It specifies the structure of the network and the exchange of information through node lookups.,Base paper : https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf,0.5,Yes,"Windows, Mac OS, Linux","Kad Network, Overnet network, BitTorrent, Osiris sps, Retroshare,Gnutella DHT",,
maidsafe-dht,https://code.google.com/p/maidsafe-dht/,Fraser Hutchison ,fraser.hutchison@gmail.com,,Distributed hash table,Kademlia,C++,11,2/20/2014,10872,6536,"A Kademlia-like Distributed Hash Table (DHT) with NAT Traversal that utilises Kademlia-like routing tables for scalability with D1HT speed. 
Features:
- Support for Store and Delete operations
- Complete network reconfiguration in a time period from 20ms to 5 seconds    maximum (as compared with 60 minutes for existing DHT's)
- Node Identification guaranteed via PKI provided by MaidSafe-Passport (no Spartacus attacks)
- Inbuilt machinery for rank system (remove misbehaving nodes)
- Asymmetric encryption provided node identification to prevent Sybil attacks
- Encrypted end to end communications
- Encrypted per hop communications (at RUDP level using different keys)
2^512 bit address space
- Opportunistic caching (i.e. resistant to any denial of service attack)
- Recursive algorithm, enabling simpler traversal of NAT routers
- Send/Ack system to ensure message is checked as forwarded at any node (with zero speed impact on sending)
- RUDP integration to provide resistance to 'man in the middle' attacks",Production ready: yes,1,,"Windows, Mac OS, Linux",,,
C++ example of Kademlia,https://github.com/miguelfreitas/twister-core/tree/master/libtorrent/src/kademlia,Open source project:https://github.com/miguelfreitas/twister-core/graphs/contributors,Open source project:https://github.com/miguelfreitas/twister-core/graphs/contributors,https://github.com/miguelfreitas/twister-core/graphs/contributors,Distributed Hash Table,Kademlia,C++,compiler version(GCC 4.3.3),10/18/2015,,,,,V0.9.31,,"Windows, Mac OS, Linux",twister a peer-to-peer microblogging software uses this implementation for the distribution of the posts.,,
DistAlgo Distributed Hash Table,https://github.com/nitin-aggarwal/Kademlia,Nitin Aggarwal,nitin3588.aggarwal@gmail.com,,Distributed hash table,Kademlia,DistAlgo,,5/20/2012,1260,671,,,1,,"Windows, Mac OS, Linux",eMule,,
Kademlia DHT Implementation,https://github.com/nictuku/dht,Yves Junqueira,yves.junqueira@gmail.com,https://plus.google.com/+YvesJunqueira/posts,Distributed Hash Table,Kademlia,Go,Go-1.1,9/15/2015,3236,1980,"It is implemented in Go language. It is well documented and tested for correctness. It's typically used by a torrent client such as Taipei-Torrent, but it could also be used by a standalone DHT routers, or for other more creative purposes.",,v1.0,,"Windows, Mac OS, Linux",Taipei Torrent,,
Kademlia,https://code.google.com/p/openkad/,Gilga,Gilga1983@gmail.com,,Distributed Hash table,Kademlia,Java,1.6,3/3/2012,1000,1000,,,1,,"Windows, Mac OS, Linux",,,
kadOh,https://github.com/jinroh/kadoh/tree/master/lib/dht ( DHT link) https://github.com/jinroh/kadoh ( project link),Pierre Guilleminot,,https://github.com/jinroh (has another implementation for Bittorrent),Distributed Hash Table,Kademlia,JavaScript,,2/28/2012,35000,23000,This is my favourite implementation of the Kademlia protocol after the bittorrent applications use of it ( which I didnt find) but this offers a more general implementation where anyone can use to build their mobile applications. It answers the question of starting a peer to peer on a mobile device. They have very well explained documentation and interactive website that explains each of their design decisions. Their code can be better documented and their DHT implementation especially can be better explained. Kademlia has a lot of similarities to Chord interms of its lookup for closer nodes more than further away. 	 is a very nice article on the difference between Chord and Kademlias especially in their difference in routing tables. Joining and leaving is easier in Kademlia than in CHord.,"Fault Tolerant : yes
Complete Implementation : almost
Active Development - yes
Academic Project : no",0.1,Yes,"Linux, Web Based",Distributed Web application framework,,
Kademlia,https://github.com/bmuller/kademlia,Brian muller,,http://findingscience.com,Distributed Hash Table,Kademlia,Python,,6/27/2015,1557,900,"This is a reasonable implementation of the kademlia algotithm for DHS. It still seems to have active development. It has a clean website but has limited API support for any applications we want to build on top of it. But it is easy to run and the code is easy to understand, so additional improvements can be made. Still this is a toy project that can be modified for real world applications but it is not really been built as such and future modifications would be needed but this is still a good implementation of a famous algorithm. Used in protocols like Bittorrent but is vulnerable to Sybil Attack.","Fault Tolerant : mostly ( property of algorithm, meant for faulty networks )
Complete Implementation : yes
Active Development - yes
Academic Project : maybe",0.0.0,,Linux,,,
Kademlia/Mainline DHT node in Go.,https://github.com/nictuku/dht,Yves Junqueira,yves.junqueira@gmail.com,https://plus.google.com/+YvesJunqueira/,Distributed Hash Table,Kademlia,Go,1.1,1/1/2012,3086,2900,,,,Yes,"Windows, Mac OS, Linux",https://github.com/jackpal/Taipei-Torrent,,
Kademlia/Mainline DHT node in Go,https://github.com/nictuku/dht,Yves Junqueira,yves.junqueira@gmail.com,,distributed hash table,Kademlia for DHT. Uses a novel XOR based technique for  node lookups.,Go,Go-1.1,10/5/2015,3086,2000,Uses a novel XOR based metric topology which is used for node lookup queries,,1,Yes,"Windows, Mac OS, Linux",Used in BitTorrent protocol for trackerless torrents,,
BitTorren DH Library,https://github.com/jech/dht,Juliusz Chroboczek,jch@pps.jussieu.fr,http://www.pps.univ-paris-diderot.fr/~jch/software/,DIstributed Hash Table,"Kademlia, Mainline variant",C,,8/18/2015,3000,2700,,,0.24,,Linux,BitTorrent Node,,
Kademlia/Mainline DHT node in Go,https://github.com/nictuku/dht,Yves Junqueira,yves.junqueira@gmail.com,http://google.com/+YvesJunqueira,Distributed Hash Table,"Kademlia, Mainline variant",Go,,9/5/2015,,,,,1,,Linux,BitTorrent node,,
kademlia,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com ,http://findingscience.com/,Distributed Hash Table,Kademlia,Python,2.7.2,10/14/2015,,,,,1,,Linux,,,
Distributed Hash Tables,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com,http://findingscience.com,Distributed hash table,Kamdelia,Pyhton,2.7,10/16/2015,984,814,Depends on twisted framework for asynchronous iops,,1,Yes,Linux,,,
Distributed Hash Tables,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com,http://findingscience.com,Distributed hash table,Kamdelia,Python,2.7,10/16/2015,984,814," Asynchronous Python implementation of the Kademlia distributed hash table. It uses Twisted to provide asynchronous communication. The nodes communicate using RPC over UDP to communiate, meaning that it is capable of working behind a NAT.",,1.0.0,,Linux,,,
Python-p2p-koorde,https://github.com/pedrotgn/python-p2p/tree/master/koorde ,Pedrotgn,,https://github.com/pedrotgn,Distributed Hash Table,Koorde,Python,2.7,3/12/2011,3580,1560,"This is Python implementation of the Koorde (DHT) algorithm which is a Distributed hash table (DHT) system based on the Chord DHT and the De Bruijn graph (De Bruijn sequence). Inheriting the simplicity of Chord, Koorde meets O(log n) hops per node (where n is the number of nodes in the DHT), and O(log n/ log log n) hops per lookup request with O(log n) neighbors per node.",Koorde Algorithm: https://en.wikipedia.org/wiki/Koorde,1,,"Windows, Mac OS, Linux",,,
Light DHT in Python,https://github.com/drxzcl/lightdht,Not provided.,drxzclx@gmail.com,https://github.com/drxzcl,Distributed Hash Table,LightDHT,Python,Python 3,11/14/2013,926,771,"A lightweight Python implementation of Bittorrent distributed hashtable.
Written in Python completely and is nicely modularised.",Active development : yes.,1,Yes,"Windows, Mac OS, Linux",Bittorrent mainline DHT for use in research applications,,
Pastry implementation in oversim,https://github.com/reines/oversim,Jamie Furnaghan,jamie@jamierf.co.uk,,Distributed hash table,Pastry,C++,,1/20/2014,6000,4000,,,1,,"Windows, Mac OS, Linux",,,
FreePastry,http://www.freepastry.org/FreePastry/,"Rice University, Houston, USA.",freepastry@cs.rice.edu,http://www.freepastry.org/,Distributed Hash Table,Pastry,Java,Java 5,9/13/2002,174959,82371,"1. FreePastry is an open-source implementation of Pastry intended for deployment in the Internet.
2. The initial release of FreePastry is intended primarily as a tool that allows interested parties to evaluate Pastry, to perform further research and development in P2P substrates, and as a platform for the development of applications.","Documentation: yes
Tutorial: yes",2.1,,"Windows, Mac OS, Linux","1. SCRIBE - group communication/event notification.
2. PAST - archival storage.
3. SQUIRREL - co-operative web caching.
4. SplitStream - high-bandwidth content distribution.
5. POST - co-operative messaging.
6. Scrivener - fair sharing of resources.",,
Pastry,http://www.freepastry.org/,,freepastry@cs.rice.edu,http://www.freepastry.org/,distributed hash table,Pastry,Java,Java - 5,3/19/2015,5000,2300,"Pastry provides efficient request routing, deterministic object location, and load balancing in an application-independent manner. Furthermore, Pastry provides mechanisms that support and facilitate application-specific object replication, caching, and fault recovery.",,2.1,Yes,"Windows, Mac OS, Linux",""" SCRIBE - group communication/event notification.

PAST - archival storage.

SQUIRREL- co-operative web caching

SplitStream-high-bandwidth content distribution

POST-co-operative messaging""",,
A pure Go implementation of the Pastry Distributed Hash Table,https://github.com/secondbit/wendy,paddy foran,paddy+github@paddy.io,http://paddy.io,Distributed Hash Table,Pastry,Go,1.0.3,1/1/2012,4901,4700,It is re-named as wendy.,,,Yes,"Mac OS, Linux",,,
Java implementation of Pastry,http://www.freepastry.org/FreePastry/#21,"Peter Druschel, Andreas Haeberlen, Jeff Hoye, Sitaram Iyer, Alan Mislove, Animesh Nandi, Ansley Post, Atul Singh (MPI-SWS and Rice University). Miguel Castro, Manuel Costa, Anne-Marie Kermarrec, Antony Rowstron (Microsoft Research, Cambridge, UK). Sitaram Iyer, Dan Wallach(Rice University). Y. Charlie Hu (Purdue University). Mike Jones, Marvin Theimer, Alex Wolman (Microsoft Research, Redmond, USA). Ratul Mahajan (University of Washington).",freepastry@cs.rice.edu,http://www.freepastry.org/,Distributed Hash Table,Pastry,Java,Java 5,3/13/2009,175036,82382,"Pastry is a generic, scalable and efficient substrate for peer-to-peer applications. Pastry nodes form a decentralized, self-organizing and fault-tolerant overlay network within the Internet. Pastry provides efficient request routing, deterministic object location, and load balancing in an application-independent manner. Furthermore, Pastry provides mechanisms that support and facilitate application-specific object replication, caching, and fault recovery.",original paper : http://www.freepastry.org/PAST/pastry.pdf,2.1,Yes,"Windows, Mac OS, Linux",http://www.freepastry.org/Scrivener/default.htm,,
Pastry Distributed Hash Table,https://github.com/secondbit/wendy,Paddy,paddy+github@paddy.io,http://paddy.io,Distributed Hash Table,Pastry,Go,Go 1.1,5/16/2013,4901,2200 approx,1. It uses nothing outside of the Go standard library.,,1,Yes,"Mac OS, Linux","PAST : A distributed file system layered on top of Pastry
SCRIBE : A decentralized publish/subscribe system that uses Pastry for its underlying route management and host lookup.",,
FreePastry,"http://www.freepastry.org/, http://www.freepastry.org/FreePastry/ ","Rice University, Houston, USA.     Max Plank Institute for Software Systems, Saarbrücken, Germany",,,Distributed hash table,Pastry,Java,5,3/13/2009,9877,7859,FreePastry is a popular implementation of the Pastry which is an overlay and routing network for the implementation of a distributed hash table (DHT) similar to Chord.,Pastry : https://en.wikipedia.org/wiki/Pastry_(DHT),2.1,,"Windows, Mac OS, Linux",,,
Chimera,http://current.cs.ucsb.edu/projects/chimera/,"Krishna Puttaswamy, Gayatri Swamynathan, Matthew Allen and Prof. Ben Zhao",ravenben@cs.ucsb.edu (one of the developers),http://current.cs.ucsb.edu/,Distributed Hash Table,Tapestry,C,,10/17/2005,5286,3918,"1. Chimera is a light-weight C implementation of a ""next-generation"" structured overlay that provides similar functionality as prefix-routing protocols.
2. provides efficient detection of node and network failures, and reroutes messages around them to maintain connectivity and throughput.","Development: Active
Documentation: yes
Use: Academic/Practical",1.2,,"Windows, Linux","Chimera is currently being used in industry labs, as part of research done by the U.S. Department of Defense, and by startup companies.",,
DHT implementation in Erlang,https://github.com/jlouis/dht,Jesper Louis Andersen,jesper.louis.andersen@gmail.com,http://jlouisramblings.blogspot.com/,Distributed Hash Table,,Erlang,Erlang 18+,10/20/2015,,,This implementation was taken from a larger etorren application and then extensively modified to enable automated verification via model checking.,,1,,"Windows, Linux",etorrent,,
Chimera,http://current.cs.ucsb.edu/projects/chimera/,"Krishna Puttaswamy, Gayatri Swamynathan, Matthew Allen, Prof. Ben Zhao",,http://www.cs.ucsb.edu/~ravenben/ http://www.cs.ucsb.edu/~msa http://www.cs.ucsb.edu/~gayatri http://www.cs.ucsb.edu/~krishnap,Distributed Hash Table (DHT),Tapestry,C,GCC(any),8/1/2013,10000,8745,"Chimera is an implementation of Tapestry which is a peer-to-peer overlay network which provides a distributed hash table, routing, and multicasting infrastructure for distributed applications.",,1.2,,"Windows, Mac OS, Linux",,,
kademlia - Python Distributed Hash Table,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com,http://findingscience.com/about.html,Distributed hash table algorithm,Kademlia,Python,Python-2.7,6/27/2015,1153,723,"Kademlia is a UDP-based peer-to-peer communications protocol, a variation on the DHT (distributed hash table). It is distinguished by its use of XOR as a metric.",Node communication : RPC over UDP (https://github.com/bmuller/rpcudp),0.5,,"Windows, Mac OS, Linux","1. Kad Network
2. BitTorrent : Uses Kademlia DHT algorithm for trackerless torrents.
3. Retroshare
4. eMule and eDonkey : file sharing applications",,
Java example for distributed hash table,https://github.com/rahul-derashri/Simple-DHT/tree/master/SimpleDht,Rahul Derashri,rahul.derashri@gmail.com,https://github.com/rahul-derashri,Distributed hash table based on chord,Chord,Java,1.8,9/20/2015,3474,2850,,,1,,"Windows, Mac OS, Linux",Used in author's own Android application,,
TomP2P : A Java P2P-based high performance key-value pair storage library,https://github.com/tomp2p/TomP2P,Thomas Bocek,Not provided.,http://tomp2p.net,Distributed Hash Table.,Distributed Key-Value Data Store,Java,Java 7,10/22/2015,50000,40000,"P2P library and a distributed hash table (DHT) implementation.
Written completely in Java, little bit hard to understand because they is quite a bit of code in here, read only a few parts of it.",,1,Yes,"Windows, Mac OS, Linux",For any decentralized key-value infrastructure for distributed applications.,,
MIT Chord/DHash - DHT,https://github.com/sit/dht,https://github.com/sit,sit@emilsit.net,https://github.com/sit,Distributed Hash Tables,Chord,C++,C++ 2003,4/4/2008,7967,6199,"The chord implementation is subproject of the main project that implements chord lookup service and cooperative file system from MIT.

Apart from DHT implementation, it also provides  node-to-node RPC service based on SFS asynchronous RPC. Within chord implementation, it has implemented extensible API for maintaining routing tables and node joins/removal, which can be integrated easily.",,1,Yes,Linux,cooperative file system,,
go-Chord,https://github.com/armon/go-chord,Armon Dadgar,armon.dadgar@gmail.com,,Distributed Hash Tables,Chord,Go,,11/23/2013,2540,2410,very well documented.,,1,Yes,"Windows, Linux",,,
go-Chord,https://github.com/armon/go-chord,Armon Dadgar,armon.dadgar@gmail.com,,Distributed Hash Tables,Chord,Go,,11/23/2013,2549,2410,Well Documented,,1.0.0,,"Windows, Linux",,,
C Implementation Distributed Hash Tables,https://github.com/sit/dht/tree/master/chord,Emil Sit,,https://github.com/sit,Distributed Hash Tables,Chord,C++,11,9/5/2007,6000,4000,experimental implementation of the Chord lookup service and the cooperative file system. MIT implementation and active development with developer list,,1.0+,,"Windows, Mac OS, Linux",,,
NodeJS chord implementation,https://github.com/optimizely/chord/blob/master/chord.js,Brian Ollenberger,,https://github.com/optimizely,Distributed Hash Tables,Chord,Node.js,4..2.2,8/7/2013,350,240, Implement successor lists for increased fault tolerance. very well documented and tested.,,1,,"Windows, Mac OS, Linux",,,
Distributed Hash Table implementation according to the Chord,https://github.com/zstring/Distributed-Hash-Table,Himanshu Sharma,jai.himanshu001@gmail.com,https://www.linkedin.com/in/hssharma,Distributed hash tables,Chord,Java,JDK 1.7,4/9/2015,5414,3000,,,1,Yes,"Windows, Mac OS, Linux",,,
Python Chord example,https://github.com/gaston770/python-chord/blob/master/chord.py,Gaston Ingaramo,gaston770@gmail.com,,Distributed Hash Tables,Chord,Python,2.7,3/3/2014,150,120,"The chord implementation is simple and direct implementation for lookup, notify and stabilize. ",,1,,"Windows, Mac OS, Linux",,,
Java implementation of Distributed Hash Table.,https://github.com/alevy/donut,Amit Levy,https://github.com/alevy/donut,http://www.amitlevy.com,Distributed Hash tables,Donut- chord varient.,Java,Latest,2/1/2009,6000,5500,,,1,Yes,Linux,,,
kai,http://kai.wiki.sourceforge.net/,Takeru Inoue,,https://sites.google.com/site/takeruinoue/,Distributed Hash Tables,Dynamo,Erlang,R15B,7/19/2009,2858,2208,More info implementation highlights in Readme,,1,Yes,"Windows, Mac OS, Linux",Amazon like dynamo for ecommerce applications,,
TomP2P,https://github.com/tomp2p/TomP2P,Thomas Bocek, tom@tomp2p.net,http://tomp2p.net. https://github.com/tbocek,Distributed Hash Tables,Dynamo,Java,Java6,10/22/2015,727,648,"Direct and indirect replication.
Mesh-based distributed tracker.
Data protection based on signatures.
XOR-based iterative routing similar to Kademlia.
Standard and extended and customizable DHT operations supported
Selective get() using min-max or Bloom filters
Network operations support the listenable future objects concept.",,V 5.0 (Beta8),,"Windows, Mac OS, Linux","Time-Shared Storage,  Large-Scale Combinatorial Search.",,
Riak,: https://github.com/basho/riak,Jared Morrow and Andy Gross,"https://twitter.com/_jared , andy@andygross.org","https://github.com/jaredmorrow ,http://github.com/argv0",Distributed Hash Tables,Dynamo,Erlang,Patched version of Erlang (available in Riak site),8/4/2015,349,255,"High Availability, Scalability, fault Tolerance,Operational Simplicity,Masterless,
Intelligent Replication,Consistent Hashing,Automatically Re-Distributes Data When Capacity is Added",,V 2.1.0,,"Windows, Mac OS, Linux, various flavours of Linux (Ubuntu, Debian, Redhat,suse, Solaris etc.), Mac Fedora, Smart OS.","Storing big data, searching on big data, building distributed applications without shared state.",,
DHT,,Juliusz Chroboczek,jch@pps.jussieu.fr,https://github.com/jech,Distributed Hash Tables,Kademlia,C,1998,5/18/2015,3538,2877,"The library is used by almost all the major bit-torrent applications. The library works well even in NAT(network address translation) based environments. In these environments, typically, the node will have local ip address and the application, when accessing internet will pass through another gateway like node and only this NAT node address will be visible to other nodes outside NAT. So this library even handles that case as well, where there are multiple nodes behind NAT, and they might appear to be from same source to nodes outside NAT.",,0.24,Yes,"Windows, Mac OS, Linux","All Bit Torrent apps like Transmission,  Shareaza, Hekate, Azureus, Bitflu etc.",,
Kademlia/Mainline DHT,https://github.com/nictuku/dht,Yves Junqueira,yves.junqueira@gmail.com,https://plus.google.com/+YvesJunqueira/posts,Distributed hash tables,Kademlia,Go,G0 1.1,9/5/2015,3086,1800,The DHT performs well and supports the most important features despite its simple API.,"Documentation : https://godoc.org/github.com/nictuku/dht
A simple Example : https://github.com/nictuku/dht/blob/master/examples/find_infohash_and_wait/main.go",1,Yes,"Windows, Mac OS, Linux","Another Bit torrent like client (Taipei Torrent), https://github.com/jackpal/Taipei-Torrent",,
Kademlia,https://github.com/jech,Juliusz Chroboczek,jch@pps.univ-paris-diderot.fr,"https://github.com/jech,  http://www.pps.univ-paris-diderot",Distributed Hash Tables,Kademlia,C,,8/18/2015,3057,2680,"Nothing works well across NATs, but Kademlia is somewhat less impacted than
many other protocol",,,,"Windows, Mac OS, Linux", BitTorrent network,,
Chimera (as implementation of Tapestry),http://current.cs.ucsb.edu/projects/chimera/index.html,"Ben Zhao, Krishna Puttaswamy",ravenben@cs.ucsb.edu,http://www.cs.ucsb.edu/~ravenben/; https://sites.google.com/site/krishnapnputtaswamy/home,Distributed Hash Tables,Tapestry,C,C99,2/16/2006,6031,4856," Chimera is a light-weight C implementation of a ""next-generation"" structured overlay that provides similar functionality as prefix-routing protocols Tapestry and Pastry. It provides efficient detection of node and network failures, and reroutes messages around them to maintain connectivity and throughput.",,1.2,,"Windows, Linux","OceanStore - Distributed storage utility on PlanetLab
Bayeux - Self-organizing multicasting application
Spamwatch - Decentralized spam filter
(*Note :- Information taken from wiki page :https://en.wikipedia.org/wiki/Tapestry_(DHT))",,
Varient of Kademilia -DHT,https://github.com/jech/dht,Juliusz Chroboczek,https://github.com/jech/dht,http://www.pps.univ-paris-diderot.fr/~jch/software/,Distributed Hash tables.,Kademelia,C,C89,1/1/2010,10000,10000,,,1,Yes,Linux,,,
Chord Distributed Hash Table,https://github.com/optimizely/chord,Brian Ollenberger,,,Distributed HashTable,Chord,Node.js,Node.js >= 0.10.x,8/7/2013,378,308,It is well documented and well tested. Testing code is also available. It provides the ability to construct a Chord cluster and to route application layer messages to a process responsible for a range of keys. It supports virtual nodes and uses UDP as its out-of-process transport layer.,,v0.1.2,,"Windows, Mac OS, Linux",,,
Entangled,http://sourceforge.net/projects/entangled/,Francois Aucamp,faucamp@csir.co.za,,Distributed hast table,Kademlia,Python,,1/31/2008,3060,1408,"Entangled is a distributed hash table (DHT) based on Kademlia, as well as a peer-to-peer tuple space implementation. This can be used as a base for creating peer-to-peer (P2P) network applications that require synchronization and event handling (such as distributed resource provisioning systems) as well as applications that do not (such as file sharing applications).

Entangled extends basic Kademlia by adding a ""DELETE"" RPC, allowing (key, value) pairs to be deleted from the DHT. It also adds some useful higher-level features onto the base DHT:
- Keyword-aware operations: allows keyword-based operations (publish, search, remove)
- Distributed Tuple Space: a fully distributed, peer-to-peer tuple space implementation",,0.1,,"Windows, Mac OS, Linux",,,
FreePastry,http://www.freepastry.org,"Peter Druschel, Miguel Castro, Y. Charlie Hu","druschel@mpi-sws.org, mcastro@microsoft.com, ychu@purdue.edu",http://www.mpi-sws.org/~druschel/;http://research.microsoft.com/en-us/um/people/mcastro/; https://engineering.purdue.edu/~ychu/,Distributed Hast Table,Pastry,Java,Java-5,3/13/2009,,,"FreePastry is an open-source implementation of Pastry intended for deployment in the Internet. The initial release of FreePastry is intended primarily as a tool that allows interested parties to evaluate Pastry, to perform further research and development in P2P substrates, and as a platform for the development of applications.","These are the attributes and capabilities provided :-
1. Mapping application objects to Pastry nodes.
2. Load balancing.
3. Object caching.
4. Efficient, scalable information dissemination",2.1,,"Windows, Mac OS, Linux","1. SCRIBE : is a generic, scalable and efficient group communication and event notification system which is built on top of Pastry.
2. PAST is a large-scale, peer-to-peer archival storage utility that provides scalability, availability, security and cooperative resource sharing.
3. SplitStream is a high-bandwidth content streaming/distribution system that is built upon Pastry. 
4. SQUIRREL is a fully decentralized, peer-to-peer cooperative web cache, based on the idea of enabling web browsers on desktop machines to share their local caches.",,
C++ Raft ,http://www.rethinkdb.com/,Multiple contributors,NA,NA,Distributed high availability database,Raft,C++,,,,,,,2.1,,"Mac OS, Linux",RethinkDB,,
 Distributed consensus - RAFT,https://github.com/coreos/etcd,Xiang Li,xiangli.cs@gmail.com,http://xiangli.co,Distributed Key Value Store,RAFT,Go,,12/4/2013,1681038,1642905,,,,,"Windows, Mac OS, Linux",CoreOS,,
Distributed Hash table ,http://roma-kvs.org/,Multiple contributors,,,Distributed key value stores,DHT,Ruby,,,,,,,1.2.0,,"Mac OS, Linux",ROMA,,
DistAlgo example lamutex original,https://sourceforge.net/p/distalgo/git/ci/master/tree/examples/lamutex/orig.da,Bo Lin and Yanhong Liu,liu@cs.stonybrook.edu,http://www.cs.stonybrook.edu/~liu,Distributed mutual exclusion,Lamport,DistAlgo,DistAlgo-1.0.9b14,2/26/2015,63,38,,,1,Yes,"Windows, Mac OS, Linux",,,
C implementation of Needham-shrodner,https://github.com/abender/needham-schroeder,Andreas Bender,https://github.com/abender/needham-schroeder,https://github.com/abender/needham-schroeder,Distributed Security protocol.,Needham-Schroeder,C,1,1/1/2010,10000,1000,,,1,,Linux,,,
Log Cabin,https://github.com/logcabin/logcabin,Diego Ongaro,ongardie@gmail.com,https://ongardie.net/,distributed systems to store their core metadata for consistent storage,Raft,"C++, Python",Python 2.7,6/25/2012,1628071,1490797,,,,,"Mac OS, Linux",hierarchical key-value stor,,
BitTorrent,https://github.com/bmuller/kademlia,Brian Muller,bamuller@gmail.com,http://findingscience.com,Distrubuted Hash Table,Kademelia,Python,,1/2/2014,1048,609,,,1,,"Windows, Mac OS, Linux",,,
Chord,https://github.com/stathisq/Chord,Stathis Maroulis,stathisq@gmail.com,https://github.com/stathisq,File sharing application,DHT,Java,Java 1.7,6/27/2014,2558,2273,,,1,,"Windows, Mac OS, Linux",File sharing,,
Graphical Visualization of RAFT,https://github.com/ongardie/raftscope,Diego Ongaro,ongardie@gmail.com,https://ongardie.net/,Graphical Visualization - Better explanation of algorithm,Raft,JavaScript,,5/21/2014,48824,40560,,,,,"Windows, Mac OS, Linux",Embedded into https://raft.github.io/,,
webrtc-chord,https://github.com/tsujio/webrtc-chord/blob/master/src/Chord.js,Naoki Tsujio,ntsujio@gmail.com,https://github.com/tsujio,https://github.com/tsujio,decentralizing distributed system and providing lookup service,JavaScript,PeerJS>=0.3.9,7/5/2014,185,155,"Webrtc-chord depends on: Lo-Dash sha256.js of crypto-js libraries and PeerJS
Requirements:  WebRTC,PeerJS library, PeerServer.
License:The MIT License (MIT)",""" debug: false""
""numberOfEntriesInSuccessorList: 3""
"" connectionPoolSize: 10""
""connectionOpenTimeout: 30000""
""requestTimeout: 180000""
""stabilizeTaskInterval: 30000""
"" fixFingerTaskInterval: 30000""
""checkPredecessorTaskInterval: 30000""",v1.0.0,,"Windows, Mac OS, Linux",none,,
Xerox PARC Dragon,http://www.disi.unige.it/person/DelzannoG/CacheProtocol/dragon.hy,Giorgio Delzanno,,http://www.disi.unige.it/person/DelzannoG/protocol.html,"In order to identify which transitions must be made, the protocol detects sharing using a special bus line named Shared.",This protocol uses a write-back policy.,HyTech,1.04,5/16/2000,140,132,,,1,,Linux,"The Dragon cache coherence protocol is the schema used in the Xerox Dragon multiprocessor workstation, developed by Xerox PARC",,
Java example for needham_schroeder protocol,https://github.com/telnicky/expanded_needham_schroeder,Travis Elnicky,,https://github.com/telnicky,"It aims to establish a session key between two parties on a network, typically to protect further communication.",symmetric encryption algorithm,Java,1.7,11/8/2013,1404,1071,,,1,,"Windows, Mac OS, Linux",,,
seNS - a simple extended Needham-Schroeder C-library,https://github.com/abender/needham-schroeder,Andreas Bender,bender86@arcor.de,http://www-ucc.ch.cam.ac.uk/members/ab454,key authentication,Needham-Schroeder,C,C99,5/18/2014,,,"seNS is a small and simple C-library to perform an extended (symmetric) Needham-Schroeder(NS)-protocol. Extended means, that the basic NS-Protocol has been extended to make use of timestamps, which are used to solve several vulnerabilities by the original protocol. ",Use of Timestamps : To solve vulnerabilities of the original protocol.,1,,"Mac OS, Linux",Used in insecure network as key transport protocols.,,
Python Implementation of Diffie-Hellman key exchange ,https://pypi.python.org/pypi/pytickets/0.9.2.1,Krister Hedfors,,http://tripleaes.com/cgi-sys/suspendedpage.cgi,Key Exchange,Diffie-Hellman,Python,Python 2.7,1/17/2012,2922,2426,Python library implements Diffie-Hellman key exchange ,,0.9,Yes,"Windows, Mac OS, Linux",,,
Diffie-Hellman Key Exchange Protocol in Python,http://sublimerobots.com/2015/01/simple-diffie-hellman-example-python/,Noah Dietrich,,,Key Exchange ,Diffie-Hellman,Python,3,1/3/2015,33,21,,,1,Yes,"Windows, Mac OS, Linux",Academic Purpose - This is taught as the first key exchange protocols in security courses.,,
Implementaion of Needham-Schroeder Symmetric Key Protocol,http://cryptyc.cs.depaul.edu/ns.html,Andrew D. Gordon,adgXmicrosoft.com where X=@ ,https://onedrive.live.com/view.aspx/adg?cid=c6149b019d236bf5,Key Exchange (Security Protocol),Needham-Schroeder,Java,Java 5,9/13/2004,,164," This is a variant of the Needham-Schroeder Symmetric Key Protocol,using message tags rather than nonce arithmetic.  The protocol allows
 the server S to generate a session key Kab for use by A and B.",,1.1,,"Windows, Mac OS, Linux",92,,
msl/DiffieHellmanExchange,https://github.com/Netflix/msl/blob/master/core/src/main/java/com/netflix/msl/keyx/DiffieHellmanExchange.Java,Ntflix OSS,,https://github.com/Netflix ,Key Exchange Protocol,Diffie Hellman ,"Java, JavScript",,10/5/2015,600,450,"There are lot of security protocols implemented in this MSL library, best collection available online in 1 place but I was interested in Diffie-hellman simply because it is one of my favourite crypto algorithms, mainly because it is quick and provides perfect forward secrecy. Even though both RSA and DH depend on hard problems of Prime Factorization and discrete Log, the elegance of DH is why I have chosen DH as one of the implementations I have put up over other key exchange protocols.",,v1.1198,Yes,Web API and support for most browsers.,"This diffie-hellman implementation is part of a bigger library of security protocols developed by Netflix Open Source Security. This layer is called MSL (Message Security Layer). This is a very well developed interface that allows user to choose any protocols and algorithms for various tasks like key exchange. Also, different interfaces can have different protocols. Java is used on the server side for the server side of the crypto protocols. JavaScript is used as the web Crypto API language which supports most browsers. ",,
CSRP,https://github.com/cocagne/csrp,Tom Cocagne,tom.cocagne@gmail.com,https://github.com/cocagne,Mutual Authentication,Secure Remote Password protocol (version 6a),C,C99,3/14/2013,1099,780,"SRP is a cryptographically strong authentication protocol for password-based, mutual authentication over an insecure network connection.",,1,,"Windows, Mac OS, Linux","Unlike other common challenge-response autentication protocols, such as Kereros and SSL, SRP does not rely on an external infrastructure of trusted key servers or certificate management. Instead, SRP server applications use verification keys derived from each user's password to determine the authenticity of a network connection.",,
MMATRIXSSL- OPEN SOURCE EMBEDDED SSL,http://www.matrixssl.org/,PeerSec Networks is,contact@peersec.com,,Open source SSL Implementation,OPEN SOURCE EMBEDDED SSL,C,,7/15/2015,65181,63000,"MatrixSSL is the only open-source SSL implementation designed specifically for use in embedded environments. There are existing open-source SSL implementations available and there are existing embedded SSL implementations, but there was a notable absence of packages that offer both.",,3.7.2B,Yes,"Windows, Mac OS, Linux, FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX, BREW","SSL in embedded environments, MBedThis AppWeb.",,
Berkeley RISC,http://www.disi.unige.it/person/DelzannoG/CacheProtocol/berkeley.hy,Giorgio Delzanno,,http://www.disi.unige.it/person/DelzannoG/protocol.html,Overcame the fact that vast majority of programs did not use the vast majority of a processor's instructions,Berkeley Reduced Instruction Set Computation,HyTech,1.04,5/16/2000,88,75,"Techniques developed for and alongside the idea of the reduced instruction set have also been adopted in successively more powerful implementations and extensions of the traditional ""complex"" x86 architecture.",,1,,Linux,"It is largely used on the chip design and implementation like the Motorola 88000, Fairchild Clipper, AMD 29000 and the PowerPC and so on.",,
node-srp  (Secure Remote Protocol),https://github.com/mozilla/node-srp,mozilla,,,Password verification,SRP Authentication and Key Exchange System ,JavaScript,,9/11/2013,1200,850,"SRP is one of my favorite security protocols. It uses a modification of the Diffie-Hellman protocol for the task of password verification without actually send the password over the network. Since it is developed in JavaScript, it is suitable to be deployed over the web. This implementation is currently mostly beign used by Mozzila Browsers for their authentication purposes. Since any SRP has two phases, the account creation phase where the client sends its identifier, password and salt and constructs a verifier and sends it to the server. As you can see that the password is never sent. The second phase or the login phase where the client uses the password and the server uses the verifier to confirm the clients identity. the API for both these phases have been clearly detailed in the documentation and that is all that is needed for the success of this algorithm.",,0.2.0,Yes,"Windows, Mac OS, Linux","used by OpenSSL among others. but this specific implementation is used by Mozzilas various applications like browser Login, etc.",,
Simple Paxos,https://github.com/xiang90/paxos,Xiang Li,xiangli.cs@gmail.com,http://xiangli.co,Paxos Implementation,Paxos,Go,1.4,12/29/2014,350,300,Not well commented code but simple and direct implementation of Paxos in GO,,1,,Linux,,,
needham-schroeder needham,https://github.com/abender/needham-schroeder/blob/master/needham.c,Andreas Bender,bender86@arcor.de,https://github.com/abender,providing a security protocol to support  secure comunication betwwen two endpoints,Needham-Schroeder,C,unknown,5/18/2014,1320,1027,"It extended the basic NS-Protocol to make use of timestamps, which are used to solve several vulnerabilities by the original protocol.","""NS_BLOCKSIZE :16 "" 
""NS_KEY_LEN: 16    "" 
""NS_RIN_KEY_LEN :16""
""NS_IDENTITY_LEN :16""
""NS_NONCE_LEN :16 ""   
""NS_CCM_L: 2""        
 ""NS_CCM_N: (15 - NS_CCM_L) "" 
""NS_CCM_M: 8 ""
""NS_TIMESTAMP_LEN: 8""",1,,"Mac OS, Linux",seNS-a simple extended Needham-Schroeder C-library,,
Needham–Schroeder,https://github.com/abender/needham-schroeder, Andreas Bender,bender86@arcor.de,bender86@arcor.de,Public key/Private key cryptography,Needham-Schroeder,C,,5/18/2015,3256,3015,"this implementation is the extended version of that the basic NS-Protocol. It uses timestamps, which are used to solve several vulnerabilities by the original protocol.",,1,,Linux,Kerberos Protocol,,
grempe/secretsharing,https://github.com/grempe/secretsharing,Glenn Rempe,,https://www.rempe.us,Secret Sharing,Shamir Secret Sharing,Ruby,,1/13/2015,1400,1080,"This is a very good implementation of the Shamirs secret Sharing algorithm. I chose this algorithm simply because I felt it is one of the few Security protocols that actually have a distributed Flavor. It answers a classic problem of a distributed authentication server where compromise of 1 server does not reveal the key or bring down the service. It is not used a lot in practical application mostly due to its high maintenance when hashing and storing passwords is a much simpler mechanism. This implementation has most of the primitives needed : Encode that takes a secret, asks for the number of shares and generation of these shares. Decode - given the correct number of shares, it decodes the secret. it is based on the idea that k points are requires to solve a k+1 degree polynomial. ",,1.0.0.0,Yes,"Windows, Mac OS, Linux",,,
RSA,https://gist.github.com/avalonalex/2122098,Yuhan Hao,yuhanhao@gmail.com,https://github.com/avalonalex,Secure data transmission,,Python,2.7.*,3/19/2012,302,193,"This implementation is for educational purpose, and is not intended for real world use.",,1,,"Windows, Mac OS, Linux",None,,
Diffie-Hellman key exchange in OpenSSl,https://www.openssl.org/docs/manmaster/crypto/dh.html,OpenSSL Software Foundation,,https://www.openssl.org/,"Secure exchange of an shared, symmetric encryption key.",Diffie-Hellman,"C, C++",,11/8/2015,,,,,1.1.0,,"Windows, Mac OS, Linux",,,
Diffie-Hellman key exchange in Crypto++,https://cryptopp.com/wiki/Diffie-Hellman,"Wei Dei, Open Source, Public Domain",,http://www.weidai.com/,"Secure exchange of shared, symmetric key for secure communication.",Diffie-Hellman,C++,,8/31/2015,,,,,5.6.2,,"Windows, Mac OS, Linux",,,
Diffie-Hellman key exchange in Bouncy Castle,http://www.bouncycastle.org/java.html,The Legion of the Bouncy Castle,feedback-crypto@bouncycastle.org,http://www.bouncycastle.org/java.html,"Secure exchange of shared, symmetric key for secure communication.",Diffie-Hellman,Java,JDK1.1+,11/6/2015,,,,,1.53,,"Windows, Mac OS, Linux",,,
OpenSSH,http://www.openssh.com/,"OpenBSD team (Main Contributors :  Björn Grönvall, Theo de Raadt, Niels Provos)",bg@sics.se,http://dblp.uni-trier.de/pers/hd/g/Gr=ouml=nvall:Bj=ouml=rn,Secure Network Communication,OpenSSH,C,C11,8/21/2015,,,"OpenSSH, also known as OpenBSD Secure Shell, is a suite of security-related network-level utilities based on the SSH protocol, which help to secure network communications via the encryption of network traffic over multiple authentication methods and by providing secure tunneling capabilities.",,7.1,,"Mac OS, Linux",Most of the network communication applications use this (88% market share),,
Needham-Schroeder protocol in C,https://github.com/abender/needham-schroeder,Andre Bender,,https://github.com/abender,Secure Protocols,Needham-Schroeder,C,C,5/18/2014,6704,5468,"Didn't have time to read the code, cannot write information here.",No active development,1,Yes,"Mac OS, Linux",,,
Needham-Schroeder protocol in Java,https://github.com/abender/needham-schroeder,Travis Elnicky,Not Provided.,https://github.com/telnicky,Secure Protocols,Needham-Schroeder,Java,Java 7,11/8/2014,1505,1203,Written in Java and has parts well separated.,Active Dev : No.,1,Yes,"Windows, Mac OS, Linux",For research and for students.,,
Needham-Schroeder-Lowe in Python,https://github.com/teddziuba/pqauth,Ted Dziuba,ted@teddziuba.com,https://github.com/teddziuba,Secure Protocols,Needham-Schroeder,Python,Python 3,4/3/2013,605,432,Written in Python and is well documented.,Used in industry. No active development presently.,1,Yes,"Mac OS, Linux",Used in industry.,,
Secure Remote Password protocol,http://srp.stanford.edu/,Stanford University,tjw@cs.Stanford.EDU,http://srp.stanford.edu/,secure remote authentication,,"C, Bourne Shell",,,142208,102050,"Performs secure remote authentication of short human-memorizable passwords and resists both passive and active network attacks. Because SRP offers this unique combination of password security, user convenience, and freedom from restrictive licenses, it is the most widely standardized protocol of its type.",,2.1.2,Yes,"Windows, Mac OS, Linux","JBoss , GoToMeeting , Clipperz password manager , The WorldForge Project , SFS , Samhain ",,
Secure Remote Password Protocol,https://github.com/mozilla/node-srp,Jed Parsons,https://github.com/mozilla/node-srp,http://jedparsons.com/,Secure Remote password authentication.,Secure Remote Password Protocol.,C,c89,1/10/2008,2.5K,2.2K,,,1,,Linux,All web browsers.,,
Cryptlib,https://www.cs.auckland.ac.nz/~pgut001/cryptlib/,Peter Gutmann,pgut001@cs.auckland.ac.nz,https://www.cs.auckland.ac.nz/~pgut001/,Secure transmission over a network,SSL/TLS,C,GCC(any),12/17/2012,~15231,~11300,Cryptlib is an opensource security protocols toolkit library which includes a robust implementation for SSL/TLS. Active since 1995.,"Status : Beta
Current Beta: 3.4.3",3.4.2,,"Windows, Mac OS, Linux",,,
GNUTLS,"https://gitlab.com/gnutls/gnutls.git, http://gnutls.org/","GNUTLS Project, Free software foundation",,http://www.fsf.org/,Secure transmission over network,SSL/TLS,C,GCC(Any),9/1/2015,~10500,~8550,,Status: Active,3.4.5,,"Windows, Mac OS, Linux",,,
OpenSSL,https://openssl.org  https://github.com/openssl/openssl ,"Eric Young, Tim Hudson, Sun, OpenSSL project",,,Secure transmission over network,SSL/TLS,"C, Assembly",GCC(any),7/9/2015,~15255,~11211,One of the most popular opensource implementations of SSL/TLS.,Status: Active,1.02d,,"Windows, Mac OS, Linux",,,
Java Needham-Schroeder ,https://code.google.com/p/pki-java/source/browse/trunk/pki-java/src/CryptoAPI/NeedhamSchroeder.java?r=53,Robin David,mail.robin.david@gmail.com,,Security ,Needham-Schroeder,Java,,1/1/2012,,,,,,,"Windows, Mac OS, Linux",,,
Kerberos Implementation,https://github.com/mkomitee/wsgi-kerberos,Michael Komitee,mkomitee@gmail.com,http://thoughts.cc/,Security Problems,Kerberos,Python,2.7.6,6/29/2015,480,370,,,1.1.1,,"Windows, Mac OS, Linux",,,
PqAuthentication,https://github.com/teddziuba/pqauth,Ted Dziuba,ted@teddziuba.com,https://plus.google.com/110996344704875278918/posts,Security Procols ,NS,Python,2.7,5/3/2013,~800,~650,Requirements: Django,"""Developer Claim: 'Web APIs and their clients can authenticate eachother using SSH keys, and agree on a *session key*, a temporary authentication token that the client sends along with API requests' """,1,,"Windows, Mac OS, Linux",None,,
Expanded Needham Schroeder ,https://github.com/telnicky/expanded_needham_schroeder ,Travis Elnicky,https://github.com/telnicky,Not Available,Security Protocol,Needham-Schroeder,Java,7,11/8/2013,~1500,~1400,Has attack simulation which facilitates in the better understanding of the protocol. ,"""Helps in understanding the protocol better: Yes"" , ""Extends protocol learned in class: yes""",1,,"Windows, Mac OS, Linux",None,,
C example Kerberos,https://github.com/krb5/krb5,Open source implemnetation:https://github.com/krb5/krb5/graphs/contributors,Open source implemnetation:https://github.com/krb5/krb5/graphs/contributors,https://github.com/krb5/krb5/graphs/contributors,Security Protocol,Kerberos,C,any version,10/9/2015,,,,,V5,,"Windows, Mac OS, Linux","Apple Macintosh, Windows and Unix operating systems",,
Kerberos: The Network Authentication Protocol,http://web.mit.edu/kerberos/,Kerberos Team,,http://web.mit.edu/kerberos/,Security Protocol,Kerberos,C,,10/9/2015,~555k,~391k,,,1.14,,"Windows, Mac OS, Linux","NFS, Samba, etc.",,
C implementation of Kerberos,https://github.com/krb5/krb5,https://github.com/krb5/krb5 :MIT,https://github.com/krb5/krb5,https://github.com/krb5/krb5,Security Protocol,Kerberos,C,C89,1/1/1985,20K,20K,,,gets constant update.,Yes,Linux,Windows and Linux OS.,,
Implementation of Kerberos security protocol in Python,https://github.com/nloyolag/kerberos-protocol,Noé Loyola,,https://www.linkedin.com/in/nloyola,Security Protocol,Kerberos,Python,2.6,10/26/2015,361,352,,,,,"Windows, Mac OS, Linux",,,
Implementation of Kerberos security protocol in Python,https://github.com/nloyolag/kerberos-protocol,isalmeron,,,Security Protocol,Kerberos,Python,Python 2 and above,10/30/2015,361,280 approx,,,1,Yes,"Windows, Mac OS, Linux",,,
Lowe's fixed version of Needham-Schroder Public Key,http://www.lsv.ens-cachan.fr/Software/spore/nspkLowe.html,Gavin Lowe,,,Security Protocol,Needham-Schroeder,Common Syntax,,11/12/1995,,,,,1,,Linux,,,
Lowe's modified version of Yahalom,http://www.lsv.ens-cachan.fr/Software/spore/yahalomLowe.html,Paulson,,,Security Protocol,Lowe's modified version of Yahalom,Common Syntax,,1/1/2001,,,,,1,,Linux,,,
Cache Coherence,http://web.mit.edu/kerberos/,Tom Yu,,http://web.mit.edu/tlyu/,Security Protocol,Needham-Schroeder,Java,1.7,10/9/2015,">10,000",">10,000",,,1.14,,"Windows, Mac OS, Linux",Single sign on,,
Implementation of an expanded Needham-Schroeder protocol in Java,https://github.com/telnicky/expanded_needham_schroeder,Travis Elnicky,,https://github.com/telnicky,Security Protocol,Needham-Schroeder,Java,,11/1/2013,,,,,,,"Windows, Mac OS, Linux",,,
Java Needham-Schroeder ,https://github.com/telnicky/expanded_needham_schroeder,Travis Elnicky,,https://github.com/telnicky,Security Protocol,Needham-schroeder,Java,,11/8/2013,,,,,1,,"Windows, Mac OS, Linux",,,
Proverif Needham–Schroeder protocol,http://prosecco.gforge.inria.fr/personal/bblanche/proverif/,Bruno Blanchet,Bruno.Blanchet@trap-inria.fr,http://prosecco.gforge.inria.fr/personal/bblanche/,Security Protocol,Needham-Schroeder,Caml,4.02.3(Not sure),9/13/2015,219,141,None,None,1.91,,Linux,None,,
Needham–Schroeder Implementation,https://github.com/naveends/ExtendedNeedhamSchroederAuthentication,Naveen,naveen.cse.csg@gmail.com,,Security Protocol,Needham-Schroeder,Java,Java 6,12/10/2015,1046,600,,,v1.0,,"Windows, Mac OS, Linux",,,
Implementation of an expanded needham-schroeder protocol in Java,https://github.com/telnicky/expanded_needham_schroeder,Travis Elnicky,,,Security Protocol,Needham-Schroeder,Java,,,,,,,1,,Linux,,,
Needham-Schroeder Public Key,http://www.lsv.ens-cachan.fr/Software/spore/nspk.html,Roger Needham and Michael Schroeder,,,Security Protocol,Needham-Schroeder,Common Syntax,,12/12/2015,,,,,1,,Linux,,,
A simple C-library to perform an extended variant of the Needham-Schroeder-protocol.,https://github.com/abender/needham-schroeder,Andreas Bender,,,Security Protocol,Needham-Schroeder,C,,,,,,,1,,Linux,,,
A simple C-library to perform an extended variant of the Needham-Schroeder-protocol,https://github.com/abender/needham-schroeder,Andreas Bender,bender86@arcor.de,https://github.com/abender,Security Protocol,Needham-Schroeder,C,,11/1/2013,6713,,,,,,"Windows, Mac OS, Linux",,,
Needham-Schroeder protocol,https://github.com/abender/needham-schroeder,Andreas Bender,Not available,Not available,Security Protocol,NS,C,C 11,5/18/2014,~1500,~1300,It implements the extended version of the NS protocol,"""Code Understanding: Tough""",1,,"Windows, Mac OS, Linux",None,,
OpenSSL Implementation,https://github.com/openssl/openssl,Stephen Henson,,,Security Protocol,OpenSSL,C,,7/9/2015,400k,300k,It is official repository. It is well documented and well tested. It is easy to install and use. It is implemented in C and Perl.,,OpenSSL 1.1.0-dev,,Linux,"SSH, HTTPS",,
Proverif OtwayRees protocol,http://prosecco.gforge.inria.fr/personal/bblanche/proverif/,Bruno Blanchet,Bruno.Blanchet@trap-inria.fr,http://prosecco.gforge.inria.fr/personal/bblanche/,Security Protocol,OtwayRees protocol,Caml,4.02.3(Not sure),9/13/2015,203,130,None,None,1.91,,Linux,None,,
RSA Implementation,https://github.com/bendiken/rsa,Arto Bendiken,arto@bendiken.net,https://github.com/bendiken,Security Protocol,RSA,Ruby,1.9.1+,10/17/2010,788,297,,,0.1.4,,"Windows, Mac OS, Linux",RSA is used in applications where public key cryptography is supported,,
ssh2,https://github.com/mscdex/ssh2,Brian White,,,security protocol,SSH,JavaScript,JavaScript 1.8,11/11/2012,4194,3503,SSH2 client and server modules written in pure JavaScript for node.js,,ssh2-0.4.12,,"Windows, Mac OS, Linux",,,
Web API Authentication with SSH Public Keys,https://github.com/teddziuba/pqauth,Ted Dziuba,ted@teddziuba.com,https://plus.google.com/110996344704875278918/posts,Security Protocol,SSH,Python,,,,,,,1,,Linux,,,
Java example SSL,http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/04e4c3ec6516/src/share/classes/sun/security/ssl,OpenSource-sun systems,OpenSource-sun systems,,Security Protocol,SSL,Java,Java6,,,,This is the official library of SSL implementation for Java.,,V1,,"Windows, Mac OS, Linux",Many enterprise software developed using Java use this implementations.,,
C example SSL/TLS,https://github.com/openssl/openssl,open source implementaion: https://github.com/openssl/openssl/graphs/contributors,open source implementaion: https://github.com/openssl/openssl/graphs/contributors,https://github.com/openssl/openssl/graphs/contributors,Security Protocol,SSL/TLS,C,any version,7/9/2015,,,,,V1,,"Windows, Mac OS, Linux","Most linux distributions(RedHat,CentOS..etc) provide it.",,
GnuTLS,http://www.gnutls.org/,GnuTLS team,nmav@gnutls.org,http://www.gnutls.org/contrib.html,Security protocol,SSL/TLS,C,,10/20/2015,~253k,~187k,,,3.4.6,,"Windows, Mac OS, Linux","HTTPS, SSH",,
OpenSSL,https://www.openssl.org/,OpenSSL team,,https://www.openssl.org/community/team.html,Security Protocol,SSL/TLS,C,,7/9/2015,646k,437k,,,1.0.2d,,"Windows, Mac OS, Linux","HTTPS, SSH, etc.",,
gnutls,http://www.gnutls.org/,Nikos Mavrogiannopoulos, nmav@gnutls.org,http://nmav.gnutls.org/,Security Protocol,TLS,C,,8/9/2010,6046325,5844975,,,,,"Mac OS, Linux","secure communications library implementing the SSL, TLS and DTLS protocols ",,
Forge- A native implementation of TLS,https://github.com/digitalbazaar/forge,"Digital Bazaar, Inc.", support@digitalbazaar.com,http://digitalbazaar.com,security protocol,TLS,JavaScript,JavaScript 1.8,9/15/2013,29838,15340,The Forge software is a fully native implementation of the TLS protocol in JavaScript as well as a set of tools for developing Web Apps that utilize many network resources.,, forge-0.6.16,,"Windows, Mac OS, Linux",,,
Proverif Yahalom protocol,http://prosecco.gforge.inria.fr/personal/bblanche/proverif/,Bruno Blanchet,Bruno.Blanchet@trap-inria.fr,http://prosecco.gforge.inria.fr/personal/bblanche/,Security Protocol,Yahalom,Caml,4.02.3(Not sure),9/13/2015,166,111,None,None,1.91,,Linux,None,,
Web API Authentication with SSH Public Keys,https://github.com/teddziuba/pqauth,Ted Dziuba,ted@teddziuba.com,,Security Protocol ,Needham-Schroeder,Python,3,1/11/2013,872,,,,,,"Windows, Mac OS, Linux",,,
AES,https://www.openssl.org/,opensslfoundation,info@opensslfoundation.org,opensslfoundation.org,Security Protocol - Data Encryption,Advanced Encryption Standard,C,98,1/1/2002,44432,37090,,,1,Yes,"Windows, Mac OS, Linux",Data Encryption is used for transmitting data over networks securely. Several cryptographic protocols are proposed and used. AES is one of the widely used protocol used by all browsers to every other device that transmits data over internet securely.,,
RSA.py,https://gist.github.com/avalonalex/2122098,Yuhan Hao,Yuhan Hao,https://github.com/avalonalex?tab=repositories,Security Protocol - Secure Data Transmission using Assymmetric Key(public key - private key) Protocol,RSA,Python,2,6/3/2015,302,193,,,1,,"Windows, Mac OS, Linux",It is for educational protocols. But the main rsa algorithm is used everywhere for secure data transmission and is one of the first Public Key Cryptographic protocol implemented and used for practical purposes.,,
 Shamir's threshold secret sharing scheme,https://github.com/amper5and/secrets.js,Alexander Stetsyuk,alex@passguardian.com,,Security Protocols,Shamir,JavaScript,,1/1/2012,795,740,"This can be used to split any ""secret"" (i.e. a password, text file, Bitcoin private key, anything) into n number of ""shares"" (each the same size in bits as the original secret), requiring that exactly any number t (""threshold"") of them be present to reconstruct the original secret.",,,Yes,"Windows, Mac OS, Linux",,,
Kerberos Implementation,http://web.mit.edu/kerberos/dist/index.html,MIT,http://web.mit.edu/kerberos/dist/index.html#about,http://web.mit.edu/ist/help/index.html,Security Protocols,Kerberos,C,c98,5/8/2015,374785,266216,,,1.13.2,,"Windows, Mac OS, Linux",Kerberos is some times used in applications using Single Sign On,,
Kerberos Implementation,https://github.com/krb5/krb5,Greg Hudson,,http://web.mit.edu/kerberos/,Security Protocols,Kerberos,C,,11/1/2015,380000,250000,It is official repository from MIT. It is well documented and well tested. It is implemented in C. It is easy to install and use. It is also easy to understand using well written documentation.,,v1.15,Yes,"Windows, Mac OS, Linux",Single Sign-On,,
kerberos,https://github.com/krb5/krb5,Theodore Ts'o,tytso@mit.edu,,security protocols,Kerberos,C,,10/9/2015,454K,400K,,,1.14-beta1,Yes,"Windows, Mac OS, Linux","Secure Remote Password Protocol(SRP), Single Sign-on",,
needham-schroeder,https://github.com/abender/needham-schroeder,Andreas Bender,bender86@arcor.de,https://github.com/abender,Security Protocols,Needham-Schroeder,unknown,,5/18/2014,6595,4525,NS-client implementation can perform retransmissions to deal with lossy networks,,1,Yes,"Windows, Mac OS, Linux","Needham-Schroder protocols can be used for mutual authentication, symmetric key exchange using PKI infrastructure.",,
Extended Needham Schroeder Implementation,https://github.com/naveends/ExtendedNeedhamSchroederAuthentication/tree/master/NeedhamSchroeder/src ,Naveen,naveen.cse.csg@gmail.com,,Security Protocols,Needham-Schroeder,Java,6,12/10/2012,1000,880,,,1,,"Windows, Mac OS, Linux",,,
Openssl,https://www.openssl.org/,opensslfoundation,info@opensslfoundation.org,opensslfoundation.org,Security Protocols,Needham-Schroeder,"C, Assembly",c 98,7/9/2015,608646,443363,,,1,,"Windows, Mac OS, Linux","The security of the internet is based on openssl library. All the protocols used by every web server, browser clients are implemented and provided in this library. Every cryptographic standard is implemented as part of this library. Its the defacto library for security.",,
seNS - a simple extended Needham-Schroeder C-library,https://github.com/abender/needham-schroeder,Andreas Bender, bender86@arcor.de,https://github.com/abender,Security protocols,Needham-Schroeder,C,C11,5/18/2014,1319,1143,,,1,,"Windows, Mac OS, Linux",,,
expanded_needham_schroeder,https://github.com/telnicky/expanded_needham_schroeder,Travis Elnicky,TravisElnicky@gmail.com,https://github.com/telnicky,Security protocols,Needham-Schroeder,Java,Java 1.7,11/8/2013,723,605,,,1,,"Windows, Mac OS, Linux",,,
authentication_ttp,https://github.com/walerian777/authentication_ttp,Walerian,walerian.sobczak@gmail.com,https://github.com/walerian777,Security protocols,Needham-Schroeder,Python,Python3.5.0,3/26/2015,219,187,,,1,,"Windows, Mac OS, Linux",,,
openssl,https://github.com/openssl/openssl,Tim Hudson ,tjh@cryptsoft.com,,security protocols,Needham-Schroeder,C,,7/9/2015,404K,360K,,,1.0.1p,Yes,Linux,"SSL/TLS, SSH",,
Kerberos - MIT Project Athena,http://web.mit.edu/kerberos/,Steve Miller and Clifford Neuman,krbdev@mit.edu and bcn@isi.edu,http://clifford.neuman.name/,Security Protocols,Needham-Schroeder,C,,6/20/1985,446312,312482,"1. Provides mutual authentication—both the user and the server verify each other's identity.
2. Kerberos protocol messages are protected against eavesdropping and replay attacks.
3. Kerberos uses UDP port 88 by default","Active Development: yes
Documentation: Well documented
Widely Used: yes
Open-source: yes
Use in Production: yes",Kerberos 4,,"Windows, Mac OS, Linux, Solaris, BSD",Windows 2000 and later uses Kerberos as its default authentication method. ,,
Secure Remote Password Protocol,https://github.com/akonring/srp,Anders Konring Olesen,anders@akonring.com,http://akonring.com,Security Protocols,Secure Remote Password Protocol,Python,2.6,7/11/2015,279,264,This is a POC implementation,,,,"Windows, Mac OS, Linux",,,
A Python poc implementation of the SRP protocol,https://github.com/akonring/srp,Anders Konring Olesen,anders@akonring.com,http://akonring.com,Security Protocols,Secure Remote Password Protocol,Python,Python 2 and above,8/11/2015,279,220 approx,,,1,Yes,"Windows, Mac OS, Linux",,,
Stanford JavaScript Crypto Library,https://github.com/bitwiseshiftleft/sjcl/tree/version-0.8,"Emily Stark, Mike Hamburg and Dan Boneh","estark@google.com, mike@shiftleft.org and dabo@cs.stanford.edu ","https://www.emilymstark.com/, http://shiftleft.org/ and http://crypto.stanford.edu/~dabo/ ",Security Protocols,Secure Remote Password Protocol,JavaScript,,5/26/2010,37264,27514,"1. secure
2. powerful
3. fast
4. small
5. easy-to-use
6. cross-browser 

It uses:
- the industry-standard AES algorithm at 128, 192 or 256 bits.
- SHA256 hash function
- HMAC authentication code
- PBKDF2 password strengthener
- and the CCM and OCB authenticated-encryption modes. ","Open: Yes
Demo: yes",0.8,,"Windows, Mac OS, Linux",,,
Open SSL,https://github.com/openssl/openssl,OpenSSL,info@opensslfoundation.org,https://www.openssl.org/,Security Protocols,Secure Socket Layer,C,,1/15/2013,19786314,14168808,,,,,"Windows, Mac OS, Linux",used by HTTPS,,
samir’s secret sharing,http://freecode.com/projects/ssss/,B. Poettering,ssss@point-at-infinity.org,http://point-at-infinity.org/,security protocols,Shamir,C,,1/15/2006,,,,,0.5,,Linux,secure communication- SSL/TLS,,
Secret Sharing,https://github.com/Archistar/archistar-smc/tree/master/src/main/java/at/archistar/crypto/secretsharing,Andreas Happe,andreashappe@snikt.net,http://snikt.net,Security Protocols,Shamir,Java,,11/6/2013,1130,613,"1. Secure
2. Minimal
3. Extensible
4. Dynamic
5. Flexible","OpenSource: yes
Active Development: yes
Demo: yes",1,,"Windows, Mac OS, Linux",Archistar,,
SSL implementation,https://github.com/openssl/openssl/tree/master/ssl ,Open SSL Org.,openssl-commits@openssl.org, https://www.openssl.org,SEcurity Protocols,SSL,C,,10/10/2015,10000+,10000+,,,1.1.0,,"Mac OS, Linux",,,
TLS/SSL implementation in C,https://github.com/awslabs/s2n,Amazon Web Services Labs,https://aws.amazon.com/contact-us/?nc2=h_l1,https://github.com/awslabs,Security Protocols,"TLS, SSL",C,99,9/9/2015,14978,9842,,,1,,"Windows, Mac OS, Linux",https protocols use TSL/SSL implementations,,
SSL Implementation,http://www.openssl.org/,openssl is open source,info@opensslfoundation.org,http://www.openssl.org/,"Security protocols (symmetric/asymetric key cryptography, Digests(hashing), Ciphers)",MD5/SHA/RSA/DSA/Diffie-Hellman etc.,C,,9/28/2015,485897,484902,"a complete suite of crypto protocols including crytopgraphic hashing, symmetric/assymetric key encryption, certificate generation etc. Very well documented and extendible.",,2.0.1,Yes,Linux,"openssl uses openssh implementations to implement ssh, scp, rsync, sftp",,
Secret sharing for JavaScript,https://github.com/amper5and/secrets.js,Alexander Stetsyuk,alex@passguardian.com,,Security protocols.,Shamir,JavaScript,,9/23/2013,795,550 approx,"Some of the useful properties of Shamir's \left(k,n\right)\,\! threshold scheme are:

Secure: Information theoretic security.
Minimal: The size of each piece does not exceed the size of the original data.
Extensible:  pieces can be dynamically added or deleted without affecting the other pieces.
Dynamic: Security can be easily enhanced without changing the secret, but by changing the polynomial occasionally (keeping the same free term) and constructing new shares to the participants.
Flexible: In organizations where hierarchy is important, we can supply each participant different number of pieces according to their importance inside the organization. For instance, the president can unlock the safe alone, whereas 3 secretaries are required together to unlock it.",,0.1.8,Yes,"Windows, Mac OS, Linux",,,
Snooping based coherence protocol,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,https://github.com/blucia0a,Snooping based Cache Coherence,MSI,C++,3,9/24/2013,300,130,,,1,,Linux,NA,,
Implementation for MESI,http://www.disi.unige.it/person/DelzannoG/CacheProtocol/mesi.hy,Giorgio Delzanno,,http://www.disi.unige.it/person/DelzannoG/protocol.html,Solved communication problems between multiprocessors based on bus,Snooping,HyTech,1.04,5/16/2000,98,89,The snooping cache protocol does not work if there is no bus. Large-scale shared memory multiprocessors may connect processors with memories through switches.,,1,,Linux,Widely used in bus-based multiprocessors,,
Spoofing Based Cache Coherence Protocol,https://github.com/blucia0a/MultiCacheSim,Brandon Lucia,blucia@gmail.com,https://github.com/blucia0a,Spoofing based cache coherence,MESI,C++,3,9/24/2013,203,117,,,1,,Linux,NA,,
Open source SSL Implementation,https://tls.mbed.org/,ARM mbed,,https://tls.mbed.org/,SSL implementation.,"RSA, Diffie hellman, DSA, MD5, SHA5, SSL/TLS ",C,,10/12/2014,98108,97105,,,2.1.2,Yes,"Windows, Linux","used in progrms like SSH, Rsync, SFTP",,
Open source SSL Implementation,https://tls.mbed.org/,ARM limited,,https://tls.mbed.org/,SSL implementation.,"RSA, Diffie hellman, DSA, MD5, SHA5, SSL/TLS ",C,,10/12/2015,98100,97089,"mbed TLS offers an SSL library with an intuitive API and readable source code, mbed TLS is available as open source under the Apache 2.0 license, the GPL 2.0 license or under an mbed partnership.",,2.1.2,Yes,"Windows, Mac OS, Linux","SSH, Rsync, SFTP",,
Matrix SSL,http://www.matrixssl.org/,embedthis,dev@embedthis.com,https://embedthis.com/,SSL with lower footprint,SSL,C,,,1961583,1925686,,,,,"Windows, Mac OS, Linux, FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX",Embedded SSL (compact with very few lines of code),,
seNS,https://github.com/abender/needham-schroeder,Andreas Bender,bender86@arcor.de,https://github.com/abender,symmetric encryption algorithm,Needham-Schroeder,C,,5/18/2014,3256,3015,"This implementation is the extended version of that the basic NS-Protocol. It uses timestamps, which are used to solve several vulnerabilities by the original protocol.",,1.0.0,Yes,Linux,Kerberos Protocol,,
paramiko,https://github.com/paramiko/paramiko/blob/master/paramiko/transport.py,Robey Pointer,robeypointer@gmail.com,https://github.com/robey,to prodide a secure channel over an unsecured network,Secure Shell Protocol,Python,unknown,1/1/2003,2478,2212,paramiko:Python SSH module,"""socket:sock""
""default_window_size:2097152""
""""efault_max_packet_size:32768""
""gss_kex=False""
""gss_deleg_creds:True""",1,,"Mac OS, Linux",,,
TLS,https://github.com/digitalbazaar/forge/blob/master/js/tls.js,Dave Longley,dlongley@digitalbazaar.com,https://github.com/dlongley,to provide communications security over a computer network,TLS Protocol,JavaScript,unknown,6/7/2014,4317,3986,Forge: a fully native implementation of the TLS protocol in JavaScript as well as a set of tools for developing Web Apps that utilize many network resources,none,1,,"Mac OS, Linux",,,
C-library for the Needham-Schroeder-protocol,https://github.com/abender/needham-schroeder,Andreas Bender,bender86@arcor.de,https://github.com/abender,Two key transport protocols intended for use over an insecure network,symmetric encryption algorithm,C,,5/18/2015,6679,4575,"It is a small and simple C-library to perform an extended (symmetric) Needham-Schroeder(NS)-protocol. Extended means, that the basic NS-Protocol has been extended to make use of timestamps, which are used to solve several vulnerabilities by the original protocol.",,1,,"Mac OS, Linux",Public libarary,,
Python Paxos Implementation(four varieties),https://github.com/cocagne/paxos/tree/master/paxos,Tom Cocagne,tom.cocagne@gmail.com,,,Paxos,Python,2.7,8/30/2013,700,300,"This project has five versions -- essential.py, practical.py, functional.py, external.py and durable.py.",,2,,"Windows, Mac OS, Linux",,,
Matrxi SSL,http://www.matrixssl.org/,,,,,,C,,3/21/2014,1961583,1925686,,,,,"Windows, Mac OS, Linux,  FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX, BREW",Embedded SSL (compact with very few lines of code),,
"An implementation of Chord, a protocol of Distributed Hash Table",https://github.com/tsujio/webrtc-chord,Naoki Tsujio,ntsujio@gmail.com,http://tsujio.org,,,JavaScript,,,5000,3500,,,,,Linux,,,
Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model ,http://www.facom.ufu.br/~claudio/Cursos/OC2-old/docs/CacheCoherenceProtocols.pdf,James Archibald and Jean-Loup Baer,,,,,,,9/1/1986,,,,,,,,,,