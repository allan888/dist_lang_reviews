# ************************************************************
# Sequel Pro SQL dump
# Version 4541
#
# http://www.sequelpro.com/
# https://github.com/sequelpro/sequelpro
#
# Host: s2.zhujieao.com (MySQL 5.5.47-0ubuntu0.14.04.1)
# Database: dist
# Generation Time: 2016-10-03 21:09:55 +0000
# ************************************************************


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;


# Dump of table comments
# ------------------------------------------------------------

DROP TABLE IF EXISTS `comments`;

CREATE TABLE `comments` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pid` int(11) NOT NULL,
  `email` varchar(200) NOT NULL,
  `name` varchar(200) DEFAULT NULL,
  `date` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `point` float(4,2) DEFAULT NULL,
  `content` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;

INSERT INTO `comments` (`id`, `pid`, `email`, `name`, `date`, `point`, `content`)
VALUES
	(19,1077,'test@tet.com','test@tet.com','2016-04-25 12:55:14',3.00,'test'),
	(20,1077,'test@tet.com','test','2016-04-25 13:06:23',0.00,'One of the most popular opensource implementations of SSL/TLS.One of the most popular opensource implementations of SSL/TLS.One of the most popular opensource implementations of SSL/TLS.One of the most popular opensource implementations of SSL/TLS.One of the most popular opensource implementations of SSL/TLS.One of the most popular opensource implementations of SSL/TLS.'),
	(21,832,'allan321@qq.com','TestName','2016-09-19 21:28:33',0.00,'test'),
	(22,832,'allan321@qq.com','TestName','2016-09-19 21:28:51',0.00,'test');

/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;


# Dump of table projects
# ------------------------------------------------------------

DROP TABLE IF EXISTS `projects`;

CREATE TABLE `projects` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) NOT NULL DEFAULT '',
  `home_page` varchar(500) DEFAULT NULL,
  `developer` varchar(500) DEFAULT NULL,
  `developer_email` varchar(500) DEFAULT NULL,
  `developer_home_page` varchar(500) DEFAULT NULL,
  `problem` varchar(500) DEFAULT NULL,
  `algorithm` varchar(500) DEFAULT NULL,
  `language` varchar(500) DEFAULT NULL,
  `language_version` varchar(500) DEFAULT NULL,
  `release_date` varchar(100) DEFAULT NULL,
  `release_version` varchar(500) DEFAULT NULL,
  `platforms` varchar(500) DEFAULT NULL,
  `lines_total` varchar(200) DEFAULT NULL,
  `lines_pure` varchar(200) DEFAULT NULL,
  `applications` varchar(500) DEFAULT NULL,
  `additional_information` varchar(1000) DEFAULT NULL,
  `additional_attributes` varchar(1000) DEFAULT NULL,
  `list_on_dist_algo_web_site` tinyint(1) DEFAULT '1',
  `submitter` varchar(500) DEFAULT NULL,
  `submitter_email` varchar(500) DEFAULT NULL,
  `score` float(4,2) NOT NULL DEFAULT '0.00',
  PRIMARY KEY (`id`),
  KEY `id` (`id`),
  KEY `home_page` (`home_page`(255)),
  KEY `developer` (`developer`(255)),
  KEY `developer_home_page` (`developer_home_page`(255)),
  KEY `problem` (`problem`(255)),
  KEY `algorithm` (`algorithm`(255)),
  KEY `language` (`language`(255)),
  KEY `language_version` (`language_version`(255)),
  KEY `release_date` (`release_date`),
  KEY `release_version` (`release_version`(255)),
  KEY `platforms` (`platforms`(255)),
  KEY `applications` (`applications`(255)),
  KEY `additional_information` (`additional_information`(255)),
  KEY `additional_attributes` (`additional_attributes`(255)),
  KEY `list_on_dist_algo_web_site` (`list_on_dist_algo_web_site`),
  KEY `score` (`score`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

LOCK TABLES `projects` WRITE;
/*!40000 ALTER TABLE `projects` DISABLE KEYS */;

INSERT INTO `projects` (`id`, `title`, `home_page`, `developer`, `developer_email`, `developer_home_page`, `problem`, `algorithm`, `language`, `language_version`, `release_date`, `release_version`, `platforms`, `lines_total`, `lines_pure`, `applications`, `additional_information`, `additional_attributes`, `list_on_dist_algo_web_site`, `submitter`, `submitter_email`, `score`)
VALUES
	(768,'MESI cache coherence protocol verification','http://www.disi.unige.it/person/DelzannoG/CacheProtocol/mesi.hy','Giorgio Delzanno','giorgio.delzanno@unige.it','http://www.disi.unige.it/person/DelzannoG/','Cache Coherence','MOESI','HyTech,','HyTech-1.04f','7/15/2000','1',NULL,'98','81','Mac OS, Linux','Reference paper: \r\n     Automatic Verification of Parameterized Cache Coherence Protocols.\nVerification Language:\nHyTech is an automatic tool for the analysis of embedded systems. HyTech computes the condition under which a linear hybrid system satisfies a temporal requirement. Hybrid systems are specified as collections of automata with discrete and continuous components, and temporal requirements are verified by symbolic model checking.','',0,NULL,NULL,0.00),
	(769,'MI_protocol','https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp','Jingyi Zhang','unknown','https://github.com/ivycheung1208','Cache Coherence','MI protocol','Cpp,','unknown','12/3/2014','1',NULL,'192','178','Windows, Mac OS, Linux','Implementation of MI protocol for a bus-bases broadcast system','\"MI_CACHE_I : 1\"\n\"block_states[4]:{\"X\",\"I\",\"IM\",\"M\"}\"',0,NULL,NULL,0.00),
	(770,'banking-paxos','https://github.com/goyalankit/banking-paxos','Ankit Goyal','ankitgoyal@utexas.edu','http://goyalankit.com','Distributed Consensus','Paxos','Java,','Java 1.7','11/28/2013','1',NULL,'1832','1569','Windows, Mac OS, Linux','Implementation of a replicated bank applicaiton','',0,NULL,NULL,0.00),
	(771,'Erlang example dynamo','https://github.com/basho/riak_kv/tree/develop/src','open source community: https://github.com/basho/riak_kv/graphs/contributors','open source community: https://github.com/basho/riak_kv/graphs/contributors','https://github.com/basho/riak_kv/graphs/contributors','Distributed Hash Table','Dynamo','Erlang,','V5.10.3','8/24/2015','V2.1.1',NULL,'','','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(772,'TLS implementation in haskell','https://github.com/vincenthz/hs-tls','Vincent Hanquez','tab@snarc.org','http://tab.snarc.org','Security Protocol','TLS and SSL','Haskell,','','9/10/2010','1.3.3',NULL,'7619','5302','Windows, Mac OS, Linux','This provides a high-level implementation of a sensitive security protocol, eliminating a common set of security issues through the use of the advanced type system, high level constructions and common Haskell features.','1.tiny codebase (more than 20 times smaller than OpenSSL, and 10 times smaller than gnuTLS)\n2.client certificates\n3.permissive license: BSD3\n4.supported versions: SSL3, TLS1.0, TLS1.1, TLS1.2\n5.key exchange supported: RSA, DHE-RSA, DHE-DSS\n6.bulk algorithm supported: any stream or block ciphers\n7.supported extensions: secure renegotiation, next protocol negotiation (draft 2), server name indication',0,NULL,NULL,0.00),
	(773,'Distributed Hash Table','https://pypi.python.org/pypi/gevent_dht/0.1.3','Colin Rice','','github.com/c00w/gevent_dht','Distributed Hash Table','Distributed hash table based on gevent','Python,','2.7','4/4/2012','4-Beta',NULL,'693','478','Windows, Mac OS, Linux','Keys are not guaranteed to persist forever, nodes may crash, the network\nmay eat messages etc. Additionally due to the time it takes for messages to travel the network sometimes a key will not be immediately available after user set it or when user get the result back it may not be completely current.','',0,NULL,NULL,0.00),
	(774,'Python example for paxos','https://pypi.python.org/pypi/paxos/0.1','Gary Wilson Jr. and Michael Stathopoulos','','https://github.com/gdub/python-paxos','Distributed Consensus','The proposer, acceptor, and learner roles of the Paxos algorithm are implemented in with classes that subclass from a common agent class','Python,','Python 3.2','7/28/2012','3-Alpha',NULL,'2157','1425','Windows, Mac OS, Linux','Communication between processes occurs using Queue objects, so all processes are run on the same machine','',0,NULL,NULL,0.00),
	(775,'TLA+ specification for the Raft consensus algorithm','https://github.com/ongardie/raft.tla/blob/master/raft.tla','Diego Ongaro','','https://ongardie.net','Distributed Hash Table','Raft consensus algorithm','TLA,','','1/5/2015','1',NULL,'484','363','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(776,'Distributed hash table example based on chord','https://github.com/shashankkhasare/chord_dht','Shashank S. Khasare','shashank.khasare@gmail.com','https://github.com/shashankkhasare','Distributed Hash Table','Chord','C,','','10/2/2014','1',NULL,'2182','1599','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(777,'Python example for kerberos-protocol','https://github.com/nloyolag/kerberos-protocol','No√© Loyola','','https://github.com/nloyolag','Security Protocol','Symmetric key cryptography(based on Needham-Schroeder-protocol)','Python,','2.7','10/25/2015','1',NULL,'341','196','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(778,'Python example for RAFT Consensus Algorithm','http://pypi.python.org/pypi/py-raft/0.0.1','Toby Burress','','https://github.com/kurin/py-raft','Distributed Consensus','RAFT','Python,','Python 2.7','10/5/2013','1',NULL,'1687','1072','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(779,'Application for Cache Coherence Protocol','https://github.com/jbush001/NyuziProcessor/tree/master/hardware','Jeff Bush','jeffbush001@gmail.com','https://github.com/jbush001','Cache Coherence','Used Snooping based cache coherence protocol','Verilog,','3.1a','8/17/2014','v1_uarch',NULL,'13392','9093','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(780,'Needham-Schroeder protocol','https://github.com/teddziuba/pqauth','Ted Dziuba','ted@teddziuba.com','','Security Protocol','Needham-Schroeder','Python,','','','',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(781,'pqauth','https://github.com/coreos/etcd','Ted Dziuba','ted@teddziuba.com, bender86@arcor.de','https://plus.google.com/11099634','Security Protocol','Needham-Schroeder-Lowe Public-Key Protocol','Python,','Python 2.4','5/3/2013','V1.0',NULL,'400','350','Windows, Mac OS, Linux','An implementation of the Needham-Schroeder-Lowe Public-Key Protocol over HTTP, Web APIs and their clients can authenticate each other using SSH keys, and agree on a session key, a temporary authentication token that the client sends along with API requests. pqauth employs a four way handshake protocol.Only client is implemented.','Simple: Implementation\neasy : to understand.',0,NULL,NULL,0.00),
	(782,'s2n','https://github.com/awslabs/s2n','Colm MacC√°rthaigh','colm@apache.org','https://github.com/colmmacc','Security Protocol','TLS SSLv3','C,','C99','9/9/2015','V1.0',NULL,'7000','6100','Windows, Mac OS, Linux','s2n APIs are built along the same lines of POSIX I/O and is fairly easy to understand for developers having worked with POSIX I/O.\nSmall Codebase.\nBackward compatible for various security algorithms implementations.','Simple, small, fast, and with security as a priority\nSupports blocking, non-blocking, and full-duplex I/O.\nNo Locks or Mutexes used.',0,NULL,NULL,0.00),
	(783,'GNUTLS','http://gnutls.org/download.html','Nikos Mavrogiannopoulos,Simon Josefsson','','http://nmav.gnutls.org/','Security Protocol','TLS','C,','','12/9/2015','3.4.5',NULL,'235509','159999','Windows, Mac OS, Linux','GnuTLS is a free software implementation of the TLS, SSL and DTLS protocols','',0,NULL,NULL,0.00),
	(784,'OAuth-Apis','https://github.com/OAuth-Apis/apis','Okke Harsta','oharsta@zilverline.com','https://www.zilverline.com','Authorization','OAuth 2','Java,','7','2/14/2014','V 1.3.5',NULL,'','','Windows, Mac OS, Linux','OAuth-Apis makes use of Jax-RS framework, JavaScript and CSS. Fairly easy to understand, use of Maven3 which simplifies the setup and build tasks.\nsimplifies all the communications between the client, server, and content provider. And the refresh tokens only exist to provide security when content is being accessed unencrypted.','Lisenced under APACHE 2.0',0,NULL,NULL,0.00),
	(785,'15418-Cache-Simulator','https://github.com/vrazdan/15418-Cache-Simulator','Vishnu Razdan','vishnu.razdan@gmail.com','','Cache Coherence','MSI, MESI, MOESI','Cpp,','','5/11/2015','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(786,'AMBA 4 ACE Cache Coherence Specification for SoC','http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ihi0022e/index.html  http://www.gstitt.ece.ufl.edu/courses/eel4720_5721/labs/refs/AXI4_specification.pdf','ARM Ltd.','N/A','http://www.arm.com/','Cache Coherence','ACE Protocol','Unknown,','N/A','1/1/2011','4',NULL,'N/A','N/A','ARM SoCs','Detailed protocol description description on pg. C-134 of the specification document listed in the homepage link','',0,NULL,NULL,0.00),
	(788,'An Evaluation of Directory Schemes for Cache Coherence','http://eecs.vanderbilt.edu/Courses/eece343/papers/p280-agarwal.pdf','Anant Agarwal,Richard Simoni, John Hennessy, and Mark Horowitz','','','Cache Coherence','Cache Coherence','Unknown,','','6/1/1988','V1.0',NULL,'','','','','',0,NULL,NULL,0.00),
	(789,'Directory-Based Cache Coherence Protocol for the DASH Multiprocessor','http://www.cse.wustl.edu/~roger/569M.s09/p148-lenoski.pdf','Daniel Lenoski, James Laudon, Kourosh Gharachorloo, Anoop Gupta, and John Hennessy','','http://research.microsoft.com/en-us/people/anoop/','Cache Coherence','Directory based cache coherence','Unknown,','','12/2/1990','',NULL,'','','','','',0,NULL,NULL,0.00),
	(790,'gem5','http://www.m5sim.org/','Nathan Binkert, Bradford Beckmann, Gabriel Black, Steven K. Reinhardt, Ali Saidi, Arkaprava Basu, Joel Hestness, Derek R. Hower, Tushar Krishna, Somayeh Sardashti, Rathijit Sen, Korey Sewell, Muhammad Shoaib, Nilay Vaish, Mark D. Hill, and David A. Wood','http://gem5.org','http://gem5.org','Cache Coherence','Directory Based Cache Coherence(MOESI_CMP_directory-L1cache.sm)','Ruby,Cpp,','Ruby-1.9, C++ 2003','5/5/2011','1',NULL,'1311','1144','Windows, Mac OS, Linux','gem5-stable-629fe6e6c781/src/mem/protocol/MOESI_CMP_directory-L1cache.sm is the file where the protocol is implemented for gem5 simulator.','',0,NULL,NULL,0.00),
	(791,'Cache','https://github.com/ashithav/cache','ashithav','N/A','https://github.com/ashithav','Cache Coherence','Dragon protocol','C,','N/A','2/7/2015','1',NULL,'910','737','Linux','This SMP cache simulator is based on the uni core cache class developed by Ahmad Samih & Dr.Yan Solihin. It implements three cache coherence protocols: MSI, MESI and Dragon.','n/a',0,NULL,NULL,0.00),
	(792,'Firefly - Cache Coherence Protocol','http://dl.acm.org/citation.cfm?doid=6513.6514  https://en.wikipedia.org/wiki/Firefly_(cache_coherence_protocol)','DEC Systems Research Center','N/A','http://web.archive.org/web/20051215194340/http://www.research.compaq.com/SRC/publications/src-rr.html','Cache Coherence','Firefly Protocol for Cache Coherence','Hardware,','N/A','9/1/1986','1',NULL,'N/A','N/A','DEC Firefly Workstation','Based on snooping type of cache coherence protocol.','',0,NULL,NULL,0.00),
	(793,'LimitLESS Directories: A Scalable Cache Coherence Scheme','http://groups.csail.mit.edu/cag/papers/pdf/asplos4.pdf','David Chaiken, John Kubiatowicz, and Anant Agarwal','agarwal at& edx dot& org;','http://people.csail.mit.edu/agarwal/','Cache Coherence','LmitLESS cache coherence scheme','Unknown,','','6/1/1991','',NULL,'','','','\"The LimitLESS scheme uses a combination of hardware and software techniques to realize the performance of a full-map directory with the memory\noverhead of a limited directory\"','',0,NULL,NULL,0.00),
	(794,'L2-Cache-Simulator','https://github.com/wicker/L2-Cache-Simulator','Jenner Hanni','eh.wicker@gmail.com','http://jennerhanni.net/','Cache Coherence','MESI','C,','C11','1/18/2012','1',NULL,'377','323','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(795,'C++ implemenation of MESI-cache-coherence','https://github.com/gsiddardha/MESI-cache-coherence','Siddardha Garimella','gsiddardha@gmail.com','https://github.com/gsiddardha','Cache Coherence','MESI','Cpp,','C++','8/27/2011','1',NULL,'788','573','Linux','Simulator to implement MESI cache coherence protocol\nThey have implemented MESI using C++.','Active development : no.',0,NULL,NULL,0.00),
	(796,'MESI & MOESI Protocol','https://www.escholar.manchester.ac.uk/uk-ac-man-scw:218836','Somdip Dey, Mamatha S. Nair','https://www.linkedin.com/pub/somdip-dey/2a/357/385','https://www.linkedin.com/redir/redirect?url=http%3A%2F%2Fwww%2Esomdipdey%2Ecom&urlhash=3vMU','Cache Coherence','MESI & MOESI','Java,','7','2/6/2014','1',NULL,'~1000','~800','Windows, Mac OS, Linux','Code is very well documented','\"Documentation: Very Good\", \"Ease of understanding: Easy\", \"Code Size: Huge\"',0,NULL,NULL,3.00),
	(797,'MESI protocol/ Illinois protocol','http://dl.acm.org/citation.cfm?doid=800015.808204','Mark S. Papamarcos and Janak H. Patel','','https://www.linkedin.com/pub/mark-papamarcos/0/375/1aa','Cache Coherence','MESI algorithm','Unknown,','','4/6/1984','',NULL,'','','','MESI in its naive, straightforward implementation exhibits two particular low-performance behaviours. First, when writing to an invalid cache line, there is a long delay while the line is fetched from another CPU. Second, moving cache lines to the invalid state is time-consuming.','Reference : http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.143.4198&rep=rep1&type=pdf',0,NULL,NULL,0.00),
	(798,'MESI Protocol','https://github.com/saurabharora90/MESI-Cache-Simulator','Saurabh','saurabharora90@gmail.com','Not Available','Cache Coherence','MESI Protocol','CSharp,','C#5.0','11/18/2012','1',NULL,'~700','~650','Windows, Mac OS, Linux','It is implemented by a student as a part of the assignment for Parallel Computer Architecture','None',0,NULL,NULL,0.00),
	(799,'MESI protocol','https://github.com/mihirvj/smp-cache/blob/master/mesi.cc','Amro Awad and Dr.Yan Solihin','ajawad@ncsu.edu, solihin@ece.ncsu.edu','https://sites.google.com/a/ncsu.edu/ajawad/home, http://www.ece.ncsu.edu/people/solihin','Cache Coherence','MESI protocol','Cpp,','','2/7/2009','1',NULL,'673','481','Linux','- Results included','School Project: yes',0,NULL,NULL,0.00),
	(800,'MESI Implementation','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','','','Cache Coherence','MESI protocol','Cpp,','11','12/6/2015','v1.0',NULL,'265','244','Windows, Mac OS, Linux','It implements MESI cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MSI, MOSI, MI. It is also easy to install and run.','',0,NULL,NULL,0.00),
	(801,'MESI Protocol','https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MESI_protocol.cpp','Akshay Sawant','asawant@gatech.edu','','Cache Coherence','MESI Protocol','Cpp,','14','','',NULL,'431','400','','','',0,NULL,NULL,0.00),
	(802,'MESI Coherency InterSection Controller','http://opencores.org/project,mesi_isc','Amitay, Yair','yaira@opencores.org','http://opencores.org/acc,view,yaira','Cache Coherence','MESI protocol','Verilog,','','1/2/2013','0.12',NULL,'3357','1893','Windows, Mac OS, Linux','The MESI InterSection Controller (ISC) is a coherence system controller. It supports the MESI coherence protocol for a cache data consistency. It synchronizes the memory requests of the system masters. It enables to keep the consistency of the data in the memory and in the local caches. (description taken from http://opencores.org/project,mesi_isc)','Language: Verilog\nDevelopment status: Alpha\nWishBone Compliant: No\nLicense: LGPL',0,NULL,NULL,0.00),
	(803,'Cache coherence MESI.','http://opencores.org/project,mesi_isc','Amitay, Yair','http://opencores.org/project,mesi_isc','http://opencores.org/project,mesi_isc','Cache Coherence','MESI(Modified, Exclusive, Shared and Invalid)','Verilog,','lates','1/2/2013','1',NULL,'10K','10K','Linux','','',0,NULL,NULL,0.00),
	(804,'Implementation of MESI, MOSI protocols for a bus-bases broadcast system.','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','Jingyi.Zhang@gatech.com','https://www.linkedin.com/in/jingyz','Cache Coherence','MESI, MOSI Protocol','Cpp,','C++ 11','12/6/2014','1',NULL,'618','400 approx','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(805,'Simulator to implement MESI cache coherence protocol','https://github.com/gsiddardha/MESI-cache-coherence','Siddardha Garimella','gsiddardha@gmail.com','','Cache Coherence','MESI-cache-coherence','Cpp,','','9/27/2011','1',NULL,'1755','1550','Linux','It provides different matrix multiplication implementations to test the simulator.','',0,NULL,NULL,0.00),
	(806,'Implementation of MI, MSI protocols for a bus-bases broadcast system.','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','Jingyi.Zhang@gatech.com','https://www.linkedin.com/in/jingyz','Cache Coherence','MI, MSI protocol','Cpp,','C++ 11','12/6/2014','1',NULL,'483','300 approx','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(807,'Design of a simulator implementing MOESI cache coherence protocol','https://github.com/ssc3/MOESI','Shubhojit Chattopadhyay','shubhojitchattopadhyay@gmail.com','','Cache Coherence','MOESI','Cpp,','','','1',NULL,'1450','1200','Linux','This implementation is very easy to setup and run.','',0,NULL,NULL,0.00),
	(809,'MOESI cache coherence protocol verification','http://www.disi.unige.it/person/DelzannoG/CacheProtocol/moesi.hy','Giorgio Delzanno','giorgio.delzanno at unige.it','http://www.disi.unige.it/person/DelzannoG/','Cache Coherence','MOESI','HyTech,','V1.04f','7/15/2000','1',NULL,'107','86','Mac OS, Linux','Reference paper: Automatic Verification of Parameterized Cache Coherence Protocols\n\nHyTech is an automatic tool for the analysis of embedded systems. HyTech computes the condition under which a linear hybrid system satisfies a temporal requirement. Hybrid systems are specified as collections of automata with discrete and continuous components, and temporal requirements are verified by symbolic model checking.','',0,NULL,NULL,0.00),
	(810,'MOESI implementation in C++','https://github.com/ssc3/MOESI','Shubhojit Chattopadhyay','shubhojitchattopadhyay@gmail.com','https://github.com/ssc3','Cache Coherence','MOESI','Cpp,','3','2/25/2013','1',NULL,'1204','1006','Mac OS, Linux','Design of a simulator implementing MOESI cache coherence protocol.','',0,NULL,NULL,0.00),
	(811,'MOESI','https://github.com/ssc3/MOESI','Shubhojit Chattopadhyay','shubhojitchattopadhyay@gmail.com','https://github.com/ssc3','Cache Coherence','MOESI cache coherence protocol','Cpp,','','2/25/2013','1.0.0',NULL,'1209','1009','Linux','MOESI Invalidation based Coherence Protocol for a 4-way shared memory multiprocessor.','',0,NULL,NULL,0.00),
	(813,'CacheCoherence (MOESI)','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','N/A','https://github.com/ivycheung1208','Cache Coherence','MOESI protocol','Cpp,','','12/5/2014','1',NULL,'379','343','Windows, Mac OS, Linux','MOESI is a full cache coherency protocol that encompasses all of the possible states commonly used in other protocols. In addition to the four common MESI protocol states, there is a fifth \"Owned\" state representing data that is both modified and shared. This avoids the need to write modified data back to main memory before sharing it. (https://en.wikipedia.org/wiki/MOESI_protocol)','',0,NULL,NULL,0.00),
	(814,'MOESI Protocol','https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MOESI_protocol.cpp','Akshay Sawant','asawant@gatech.edu','','Cache Coherence','MOESI Protocol','Cpp,','11','1/6/2015','1',NULL,'580','540','Linux','','',0,NULL,NULL,0.00),
	(815,'Implementation of MOESI, and MOESIF protocols for a bus-bases broadcast system.','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','Jingyi.Zhang@gatech.stonybrook.edu','https://www.linkedin.com/in/jingyz','Cache Coherence','MOESI, and MOESIF Protocol','Cpp,','C++ 11','12/6/2014','1',NULL,'801','492 approx','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(816,'MOESIF Implementation','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','','','Cache Coherence','MOESIF protocol','Cpp,','11','12/6/2015','v1.0',NULL,'368','341','Windows, Mac OS, Linux','It implements MOESIF cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MESI, MOSI, MI. It is also easy to install and run.','',0,NULL,NULL,0.00),
	(817,'MOESIF protocol','https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp','Jingyi Zhang','unknown','https://github.com/ivycheung1208','Cache Coherence','MOESIF Protocol','Cpp,','unknown','12/6/2015','1',NULL,'368','341','Windows, Mac OS, Linux','Implementation ofMOESIF protocol for a bus-bases broadcast system.','\"block_states[8] : {\"X\",\"I\",\"S\",\"M\",\"O\",\"IS\",\"IM\",\"OM\"}\"\n\"MOESI_CACHE_I :1\"',0,NULL,NULL,0.00),
	(818,'MOESISm(MOESIF) protocol','https://github.com/ashwincnaik/Cache-Coherence/blob/master/protocols/MOESIF_protocol.cpp','Ashwin Naik','ashwincnaik@gatech.edu','','Cache Coherence','MOESISm(MOESIF) protocol','Cpp,','','5/7/2015','1',NULL,'444','364','Linux','','School Project: yes',0,NULL,NULL,0.00),
	(819,'MOSI','https://github.com/samuelbritt/CS6290-prj3/blob/master/protocols/MOSI_protocol.cpp','Sam britt','','https://github.com/samuelbritt','Cache Coherence','MOSI (four states : Modified (same as Dirty), Owner (same as SharedDirty), Shared (same as Valid), and Invalid)','Cpp,','C++11','4/27/2012','1',NULL,'269','252','Mac OS, Linux','In comparison to MSI protocol,  the processor supplies the data directly to the requesting processor and transitions into the Shared-Dirty state, thereby avoiding the costly write back to memory in MOSI (also known as Berkeley protocol).','',0,NULL,NULL,0.00),
	(820,'Cache-Coherence','https://github.com/akshaycj47/Cache-Coherence','AKSHAY SUBHASH SAWANT','asawant@gatech.edu','http://www.prism.gatech.edu/~asawant7/','Cache Coherence','MSI','Cpp,','C++11','1/6/2015','1',NULL,'321','294','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(822,'MSI Implementation','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','','','Cache Coherence','MSI Algorithm (Modified-Shared-Invalid)','Cpp,','11','12/6/2014','v1.0',NULL,'200','172','Windows, Mac OS, Linux','It implements MSI (Modified-Shared-Invalid) cache coherence protocol. It is well documented and well tested. It has also comparison of performance with other cache coherence protocols like MESI and Dragon protocol. It is also easy to install and run.','',0,NULL,NULL,0.00),
	(823,'MSI in C++','https://github.com/akshaycj47/Cache-Coherence/','Akshay Sawant','asawant@gatech.edu','http://www.prism.gatech.edu/~asawant7/','Cache Coherence','MSI protocol','Cpp,','C++ 14','1/6/2015','1',NULL,'~2500','~2000','Windows, Mac OS, Linux','The package is well documented and supports validation outputs also','\"Trace of memory operation displayed : Yes\"',0,NULL,NULL,0.00),
	(824,'Cache Coherence MSI Protocol','https://github.com/akshaycj47/Cache-Coherence/blob/master/protocols/MSI_protocol.cpp','Akshay Sawant','asawant@gatech.edu','https://github.com/akshaycj47','Cache Coherence','MSI Protocol','Cpp,','11','1/5/2015','1',NULL,'322','300','Linux','','',0,NULL,NULL,0.00),
	(825,'MSI-cache coherence','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','https://github.com/blucia0a/MultiCacheSim','https://github.com/blucia0a/MultiCacheSim','Cache Coherence','MSI(Modified, Shared and Invalid).','Cpp,','latest','3/21/2010','1',NULL,'5K','5K','Linux','','',0,NULL,NULL,0.00),
	(827,'C++ implementation of cache coherence protocol simulator.','https://github.com/vrazdan/15418-Cache-Simulator','Zhaodong','','https://github.com/zhaodong2013062','Cache Coherence','MSI, MESI, and MOESI protocols','Cpp,','C++','5/11/2015','1',NULL,'>10000 lines','>10000 lines','Linux','A a cache coherence protocol simulator having MSI, MESI, and MOESI protocols. [Ref : https://github.com/vrazdan/15418-Cache-Simulator]\nImplementation is in C++.','Active development : no.',0,NULL,NULL,0.00),
	(828,'C++ implementation of MSI / MESI / MESIF protocols.','https://github.com/isaaclimdc/cachemulator','Yuyang Guo and Isaac Lim','isaaclimdc@gmail.com','https://medium.com/@isaaclim/','Cache Coherence','Performance of MSI / MESI / MESIF protocols','Cpp,','C++','5/9/2015','1',NULL,'4400','1550','Linux','A Snooping-based Coherent Parallel Cache Emulator\nThey have written C++ code to compare the performance of MSI / MESI / MESIF protocols.','',0,NULL,NULL,0.00),
	(829,'Global Arrays','http://hpc.pnl.gov/globalarrays/applications.shtml','','hpctools@googlegroups.com.','','Cache Coherence','PGAS','Unknown,','','5/1/2015','5.4b',NULL,'>10,000','>10,000','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(830,'cachemulator','http://isaaclimdc.github.io/cachemulator/','Yuyang Guo (yuyangg) and Isaac Lim (idl)','isaaclimdc@gmail.com','https://github.com/isaaclimdc','Cache Coherence','Snooping','Cpp,','C++11(Not sure)','5/8/2014','',NULL,'2842','2703','Linux','None','None',0,NULL,NULL,0.00),
	(831,'coherence_cop','https://github.com/KarimaMa/coherence_cop','KarimaMa','Couldn\'t find','https://github.com/KarimaMa','Cache Coherence','Snooping','Cpp,','C++11(Not sure)','4/13/2015','1',NULL,'2078','2054','Linux','None','None',0,NULL,NULL,0.00),
	(832,'Coherence by Brenton Yiu','https://github.com/GTPenguins214/coherence','Brenton Yiu','Could not find','https://github.com/GTPenguins214','Cache Coherence','Snooping','Cpp,','C++11(Not sure)','7/20/2014','1',NULL,'3979','3904','Linux','None','None',0,NULL,NULL,0.00),
	(833,'MSI','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','jingyi.Zhang@gatech.edu','','Cache Coherence','Snooping based','Cpp,','','12/6/2014','1',NULL,'200','182','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(834,'MESI','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','jingyi.Zhang@gatech.edu','','Cache Coherence','Snooping based','Cpp,','','12/6/2014','1',NULL,'200','182','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(835,'MESI Protocol','https://github.com/ivycheung1208/CacheCoherence','Jingyi Zhang','jingyi.Zhang@gatech.edu','','Cache Coherence','Snooping based','Cpp,','','12/6/2014','1',NULL,'200','182','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(836,'Simulating Snooping Based Cache Coherence Protocols','https://vrazdan.github.io/final.html','Vishnu Razdan vrazdan; Don Zheng zhaodonz','vishnu.razdan@gmail.com','','Cache Coherence','Snooping based Cache Coherence','Cpp,','','5/11/2015','1.0.0',NULL,'1546','1203','Linux','Implementation of MSI, MESI, and MOESI protocols. In addition, implemented the ability to include a write-back buffer as well as non-atomic bus transactions for a more realistic simulation','',0,NULL,NULL,0.00),
	(837,'Cachemulator: A Snooping-based Coherent Parallel Cache Emulator','https://github.com/isaaclimdc/cachemulator','Isaac Lim','isaaclimdc@gmail.com','http://isaacl.net','Cache Coherence','snooping-based cache coherence','Cpp,','C++11','5/9/2014','1',NULL,'2209','1634','Windows, Mac OS, Linux','Cachemulator is a coherent multi-processor cache emulator that uses a snooping-based cache coherent protocol.','',0,NULL,NULL,0.00),
	(838,'Cache emulator','http://isaaclimdc.github.io/cachemulator/','Yuyang Guo and Isaac Lim','idl@andrew.cmu.edu','isaaclim.net','Cache Coherence','Snooping-based cache coherence (MSI / MESI / MESIF)','Cpp,','','5/7/2014','1',NULL,'3400','2.5','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(839,'Automatic Verification of Cache Coherence Protocols via  Infinite-state Constraint-based Model Checking','http://www.disi.unige.it/person/DelzannoG/protocol.html','Giorgio Delzanno','giorgio.delzanno at unige.it','http://www.disi.unige.it/person/DelzannoG/','Cache Coherence','Synapse, Mesi, Moesi, Illinois, Dragon, Firefly, Berkeley','Unknown,','HyTech/DMC','5/16/2000','1',NULL,'2000','1.5k','Linux','','',0,NULL,NULL,0.00),
	(840,'Token Based Cache Coherence','http://gem5.org','Carl Beckmann','beckmann@s0-28.cs.wisc.edu','','Cache Coherence','token coherence implementation for gem5 simulator','gem5,','NA','1/19/2005','1',NULL,'2423','2064','Mac OS, Linux','The source is available as part of gem5 simulator in gem5-stable-629fe6e6c781/src/mem/protocol/MOESI_CMP_token-L1cache.sm','',0,NULL,NULL,0.00),
	(841,'Uncore Coherence Manager','https://github.com/lowRISC/uncore','lowRISC Team','info@lowrisc.org','http://www.lowrisc.org/','Cache Coherence','Various','Chisel,','','8/18/2015','1',NULL,'3400','2.9k','FPGA/Simulator','','',0,NULL,NULL,0.00),
	(842,'A CA Coherent Multiprocessor Cache Simulator','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','blucia@gmail.com','http://brandonlucia.com','Cache Coherence','unknown','Cpp,','','','1',NULL,'3000','2500','Linux','','',0,NULL,NULL,0.00),
	(843,'TARDIS:Time Traveling Coherence Algorithm for Distributed Shared Memory','http://people.csail.mit.edu/devadas/pubs/tardis.pdf','Xiangyao Yu, Srinivas Devadas','yxy@mit.edu  devadas@mit.edu','','Cache Coherence','unknown','Unknown,','','10/19/2015','V1.0',NULL,'','','','','',0,NULL,NULL,0.00),
	(844,'MESI-Cache-Simulator','https://github.com/saurabharora90/MESI-Cache-Simulator/blob/master/Simulate.cs','Saurabh','saurabharora90@gmail.com','https://github.com/saurabharora90','Cache Coherence','MESI','CSharp,','unknown','12/30/2012','1',NULL,'452','396','Windows, Mac OS, Linux','Improving the understanding of snooping cache coherence protocol-MESI.','\"PARAMS =:4\"\n\"addressLenght:32\"\n\"memoryToCache_cycles:10\"',0,NULL,NULL,0.00),
	(845,'MOESI','https://github.com/samuelbritt/CS6290-prj3/blob/master/protocols/MOESI_protocol.cpp','Sam Britt','','https://github.com/samuelbritt','Cache Coherence','MOESI (invalidation-based protocol)','Cpp,','C++11','4/27/2012','1',NULL,'342','330','Mac OS, Linux','The MOESI protocol is a five-state protocol that incorporates elements of both the MESI (Illinois) and MOSI (Berkeley-Ownership) protocols. It extends the basic MSI protocol with two new states: an Exclusive state, which is identical to the Exclusive state of the MESI protocol, and an Owner state, which is identical to the Owner state of the MOSI protocol. Including both an Exclusive and an Owner state enables the MOESI protocol to enjoy the benefits that both the MESI and MOSI protocols offer.','Additional states wrt MESI and MOSI protocols :-\nExclusive State: Yes\nOwner State : Yes',0,NULL,NULL,0.00),
	(846,'Implementation of cache-unaware, cache-aware, and cache-oblivious matrix multiplication algorithms','https://github.com/gsiddardha/MESI-cache-coherence','Pavan Kumar Sunkara, Siddardha Garimella','pavan.sss1991@gmail.com; gsiddardha@gmail.com','https://github.com/pksunkara; https://www.linkedin.com/in/gsiddardha','Cache Coherence','MESI algorithm (referring to the four states of a cache block: Modified, Exclusive, Shared and Invalid)','Cpp,','C++ 2.0','1/27/2011','1',NULL,'789','712','Mac OS, Linux','A cache simulator in which user can specify cache parameters such as cache size, associativity, block size. Using MESI protocol, design implements cache-unaware, cache-aware, and cache-oblivious matrix multiplication algorithms and reports the cache statistics using this simulator.','',0,NULL,NULL,0.00),
	(847,'Adaptive Cache Coherence Protocol Specification for Parallel Input/Output Systems','http://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1291822','Felix Garcia-Carballeira, Jesus Carretero, Alejandro Calderon, Jose M. Perez, and Jose D. Garcia','not listed','not listed','Cache Coherence','Dynamic/Adaptive Coherence Protocol','Hardware,','N/A','6/1/2004','1',NULL,'','N/A','Linux','Tries to solve the coherence problem by  using a dynamic scheme of\ncache coherence protocols where data coherence is maintained\non user-defined coherence regions for the conflictive data elements in hugely parallel I/O systems.','',0,NULL,NULL,0.00),
	(848,'MultiCacheSim','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','blucia@gmail.com','https://github.com/blucia0a','Cache Coherence','Snooping Protocol - MSI, MESI','Cpp,','2003','9/24/2013','1',NULL,'3188','1900','Linux','The project is a simulator which tests multi-processor caches and also implements snooping based MSI and MESI protocols and simulates them.','',0,NULL,NULL,0.00),
	(849,'Gem5 simulator','http://gem5.org/Main_Page','cs.wisc.edu','NA','http://gem5.org/Main_Page','Cache Coherence','Token, Directory, Snooping Cache Coherence Protocols','Cpp,Ruby,','C++03, Ruby','6/25/2015','1',NULL,'365142','214845','Windows, Mac OS, Linux','All the implementations of various cache coherence protocols are present in the src/mem/protocol directory in the simulator format. The format for specifications of the protocols is high-level language like distalgo called slicc and is similar to C++ or the code can also be implemented in ruby, which is similar to Python and easier to code.','',0,NULL,NULL,0.00),
	(850,'Multi Cache Coherence Simulator','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','blucia@gmail.com','http://brandonlucia.com/','Cache Coherence','Cache coherence','Cpp,','','9/27/2011','1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(851,'C++ example of MOESI','https://github.com/ssc3/MOESI','shubhojitchattopadhyay@gmail.com','shubhojitchattopadhyay@gmail.com','https://github.com/ssc3/MOESI','Cache Coherence','MOESI(Modified, Owned, Exclusive, Shared and Invalid).','Cpp,','latest','1/2/2013','1',NULL,'1000','1K','Linux','','',0,NULL,NULL,0.00),
	(853,'MOESI_protocol','https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESI_protocol.cpp','Jingyi Zhang','','https://www.linkedin.com/in/jingyz','Cache Coherence','MOESI protocol','Cpp,','11','12/1/2015','',NULL,'328','321','Windows','','',0,NULL,NULL,0.00),
	(854,'MOESIF_protocol','https://github.com/ivycheung1208/CacheCoherence/blob/master/MOESIF_protocol.cpp','Jingyi Zhang','','https://www.linkedin.com/in/jingyz','Cache Coherence','MOESIF_protocol','Cpp,','11','12/1/2014','',NULL,'368','361','Windows, Mac OS','','',0,NULL,NULL,0.00),
	(855,'MESI-Cache-Coherence','https://github.com/gsiddardha/MESI-cache-coherence','Siddardha Garimella','gsiddardha@gmail.com','https://github.com/gsiddardha','Cache Coherence','MESI Cache Coherence Protocol','Cpp,','','9/27/2011','1.0.0',NULL,'1302','1105','Linux','User can specify the cache parameters such as cache size, associativity, block size. The cache simulator uses the LRU replacement policy.','',0,NULL,NULL,0.00),
	(856,'Chord','http://open-chord.sourceforge.net/','MIT','MIT : http://open-chord.sourceforge.net/','http://open-chord.sourceforge.net/','Distributed Hash Table','Chord','Java,','Latest','1/1/2008','1',NULL,'10000','10K','Linux','','',0,NULL,NULL,0.00),
	(857,'Kerberos','http://web.mit.edu/kerberos/','MIT','krbdev@mit.edu.','','Authentication','secret-key cryptography','C,Cpp,','','2/13/2015','1.13.2',NULL,'5531706','379178','Windows, Mac OS, Linux','The Kerberos protocol uses strong cryptography so that a client can prove its identity to a server (and vice versa) across an insecure network connection. Kerberos protocol messages are protected against eavesdropping and replay attacks. Kerberos builds on symmetric key cryptography and requires a trusted third party, and optionally may use public-key cryptography during certain phases of authentication. It uses UDP port 88 by default.','Production Ready: Yes',0,NULL,NULL,0.00),
	(858,'Chord','https://github.com/sit/dht/blob/master/chord/chord.C','Frans Kaashoek,Frank Dabek','kaashoek@lcs.mit.edu,fdabek@lcs.mit.edu','http://www.csail.mit.edu/user/1525,http://fdabek.com','Distributed Hash Table','Chord','C,','unknown','1/1/2001','1',NULL,'587','513','Windows, Mac OS, Linux','very clean ,easy to understand','none',0,NULL,NULL,0.00),
	(859,'cluster','https://github.com/secondbit/wendy/blob/master/cluster.go','Paddy','paddy+github@paddy.io','https://github.com/paddyforan','Distributed Hash Table','Pastry Distributed Hash Table.','Go,','Go 1.0.3','5/16/2013','beta1',NULL,'1062','997','Mac OS, Linux','An open source, pure-Go implementation of the Pastry Distributed Hash Table.\nWendy was developed on OS X 10.8.1, using Go 1.0.3. It has been verified to work as expected running under Ubuntu 12.04 LTS (64-bit), using Go 1.0.3.\nLicense: Copyright (c) 2012 Second Bit LLC\nMore information: https://github.com/secondbit/wendy\nGoDoc : https://godoc.org/secondbit.org/wendy','\"id:unique string\"\n\"local_ip_address:string\"\n\"global_ip_address:string\"\n\"your_region:string\"\n\"port:int\"',0,NULL,NULL,0.00),
	(860,'Chordial','https://github.com/mattwilliamson/chordial','Matthew Williamson','matt@aimatt.com','http://aimatt.com','Distributed Hash Table','Chord','Erlang,','5.7.3','6/10/2009','1',NULL,'812','679','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(861,'Chord Distributed Hash Table','https://github.com/optimizely/chord','Brian Ollenberger','brian@ollenberger.com','https://github.com/bollenberger','Distributed Hash Table','Chord','NodeJS,','Node.js v0.10.2','8/7/2013','1',NULL,'377','332','Windows, Mac OS, Linux','','',-1,NULL,NULL,0.00),
	(863,'The Raft Consensus Algorithm','https://raft.github.io','Blake Mizerany, Xiang Li and Yicheng Qin','','https://github.com/logcabin/logcabin','Distributed Hash Table','Paxos','Cpp,','','','',NULL,'10000','7000','Linux','','',0,NULL,NULL,0.00),
	(864,'Plain Paxos Implementations in Python','https://github.com/cocagne/paxos','Tom Cocagne.','tom.cocagne@gmail.com','','Distributed Consensus','Paxos','Python,Java,','','5/19/2012','1',NULL,'2403','2010','Linux','It provides a testing library also','',0,NULL,NULL,0.00),
	(866,'Chord distributed hash table','https://github.com/optimizely/chord','Baraa Hamodi, Brian Lucas et al','','https://github.com/optimizely','Distributed Hash Table','Chord','JavaScript,','560','','1',NULL,'400','','Linux','','',0,NULL,NULL,0.00),
	(867,'Chord DHT implementation in erlang','https://github.com/mattwilliamson/chordial','Matt Williamson','matt@aimatt.com','http://aimatt.com','Distributed Hash Table','Chord DHT','Erlang,','','','1',NULL,'800','490','Linux','','',0,NULL,NULL,0.00),
	(868,'Distributed-Chat-Client-Application','https://github.com/DhruvaKumar/Distributed-Chat-Client-Application','Dhruva Kumar','dhruva.kumar08@gmail.com','https://github.com/DhruvaKumar','Security Protocol','Needham Schroeder protocol','Java,','Java 1.7','11/11/2012','1',NULL,'2289','1937','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(869,'LibPaxos3','https://bitbucket.org/sciascid/libpaxos/src/7f500c892d72b975c43082fe5aec8c856cb4a85a/paxos/?at=master','Daniele Sciascia','Daniele.Sciascia@usi.ch','http://atelier.inf.usi.ch/~sciascid/','Distributed Consensus','Lamport\'s Paxos','C,','unknown','6/18/2013','LibPaxos3',NULL,'2000','>2000','Windows, Mac OS, Linux','Libpaxos  implements the core of the Paxos consensus protocol, and is not cluttered with network specific code.\ngit clone https://bitbucket.org/sciascid/libpaxos.git','\"proposer-timeout:10\"\n\"proposer-preexec-window:1024\"\n\"lmdb-mapsize:1gb\"\n\"acceptor-trash-files:yes\"\n\"learner-catch-up:no\"\n\"tcp-nodelay:no\"',0,NULL,NULL,0.00),
	(870,'Java Paxos','https://github.com/cocagne/paxos','Tom cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Paxos','Java,','','1/31/2013','2',NULL,'','','Windows, Mac OS, Linux','Test Cases\nMIT License\nStarred on Github','',0,NULL,NULL,0.00),
	(871,'Plain Paxos Implementations in Python & Java','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','PAXOS','Python,Java,','Python 3','1/1/2013','2',NULL,'4258','','Windows, Mac OS, Linux','Implementations in both Python and Java are provided.','',0,NULL,NULL,0.00),
	(872,'Erlang Raft Implementation','https://github.com/andrewjstone/rafter','Andrew J. Stone','','https://github.com/andrewjstone','Distributed Consensus','RAFT','Erlang,','','4/12/2015','6',NULL,'','','Windows, Mac OS, Linux','Lot of documentation available in README.md\nApache 2.0 http://www.apache.org/licenses/LICENSE-2.0.html','',0,NULL,NULL,0.00),
	(873,'Distributed reliable key-value store for the most critical data of a distributed system','https://github.com/coreos/etcd','ETCD','etcd-dev','','Distributed Consensus','Raft','Go,','','9/25/2015','2.2',NULL,'347150','347150','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(874,'An akka-cluster ready implementation of the raft consesus alg','https://github.com/ktoso/akka-raft','','','','Distributed Consensus','Raft','Scala,','','11/10/2015','',NULL,'4609','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(875,'Python Paxos','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Paxos','Python,','','1/31/2013','2',NULL,'','','Windows, Mac OS, Linux','Test Cases available.\nMIT license','',0,NULL,NULL,0.00),
	(876,'Hashicorp','https://github.com/hashicorp/raft','Armon Dadgar','armon.dadgar@gmail.com','http://twitter.com/armon','Distributed Consensus','Raft Concensus','Go,','1.2','10/12/2015','V1.0',NULL,'8764','6086','Windows, Mac OS, Linux','They enable building Consistent, Partition Tolerant (CP) systems, with limited fault tolerance as well and used to manage replicated state machines.','',0,NULL,NULL,0.00),
	(877,'Atomix','https://github.com/kuujo','Jordan Halterman','jordan.halterman@gmail.com','https://github.com/kuujo','Distributed Consensus','Raft Consencus','Java,','8','10/28/2015','V 1.0 (beta 4)',NULL,'13966','6725','Windows, Mac OS, Linux','Persistent\nConsistent\n Fault-tolerant\nDatabase\nCoordinated\nNo need to worry about jars and build issues, maven largely takes care of everything.\nAdditional Attributes\nhas slight variations in implementations of asynchronous and synchronous clients/ servers/ distributed resources..','Lisenced under Apache 2.0',0,NULL,NULL,0.00),
	(878,'Python-paxos','https://github.com/gdub/python-paxos','Gary Wilson Jr.','gary@thegarywilson.com','thegarywilson.com','Distributed Consensus','Paxos','Python,','Python 3.x','6/29/2012','1',NULL,'1191','1005','Windows, Mac OS, Linux','This implementation is a generalization of standard Paxos, which is equivalent to a weighted system where processes are assigned equal weights.\nAlso, Communication between processes occurs using Queue objects, so all processes are run on the same machine, Quorum Algorithm: Weighted instead of majority of processes.','',0,NULL,NULL,0.00),
	(879,'Paxos','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Basic Paxos','Python,','2.7','8/30/2013','2',NULL,'1096','970','Linux','The library is independent of application domains and networking infrastructures','',0,NULL,NULL,0.00),
	(880,'Basic implementation of paxos','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Basic Paxos implementation','Java,Python,','Java 7.0','8/30/2013','1',NULL,'1050','619','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(881,'OpenReplica','https://github.com/denizalti/concoord','Deniz Altƒ±nb√ºken, Deniz Altinbuken','concoord@systems.cs.cornell.edu','http://www.cs.cornell.edu/people/egs/ , http://www.cs.cornell.edu/~deniz/','Distributed Consensus','ConCoord','Python,','Python 2.7','4/3/2014','1.1.0',NULL,'12650','9788','Linux','OpenReplica is the newest and easiest to use coordination service for distributed applications. OpenReplica provides availability, reliability and fault-tolerance in distributed systems.','Reference : http://openreplica.org/',0,NULL,NULL,0.00),
	(882,'Go implementation of Epaxos( a variation of multi-paxos)','https://github.com/go-distributed/epaxos','Iulian Moraru','Iulian Moraru(can be contacted via github)','https://github.com/go-distributed/epaxos','Distributed Consensus','Epaxos','Go,','latest','3/6/2013','1',NULL,'10000','19K','Linux','hhttps://github.com/go-distributed/epaxos','',0,NULL,NULL,0.00),
	(883,'Copycat','http://atomix.io/copycat/','Jordan Halterman','jordan.halterman@gmail.com','https://github.com/kuujo','Distributed Consensus','Implements the Raft Consensus protocol with clever modifications that incorporate the best features of Zookeeper and other consensus protocols and some times coming up with their own.','Java,','Java 8','10/1/2016','1.0.0Beta4',NULL,'Java - 25k Maven - 700 XML - 80 YAML 25 Bourne Shell - 60','Java 13262, Maven - 513, Bourne Shell- 45, XML -32 Yaml -15','Windows, Mac OS, Linux','Of all the raft implementations which I studied this is my favourite simply because how organized and navigatable their websites, features are. It is easy to implement and test with the help of their manual. Its a relatively new interface relased in October 2015 and it is still in the Beta dev phase. Also, the fact that it comes with a whole distributed system framework is highly useful. The atomix provides a complete distributed framework and Catalyst proides i/o and serialization framework. using all these parts, I believe a really quick and useful project can be developed in the timeframe for the final project simply because unlike most other implementations it is not built specifically for 1 purpose like a distributed DB, etc.','pros : has a active dev support, neat website, good user manual, easy installation, good supporting modules for other distributed tasks.\nCons : Relatively recent, still in the beta phase, no real application has been developed on top of it.\nLeader Election + log replication : yes\nMembership Changes : yes\nLog Compaction : yes\nActive Development : yes',0,NULL,NULL,0.00),
	(884,'Nutanix Acropolis','http://www.nutanix.com/products/acropolis/','Nutanix','partnerhelp@nutanix.com','http://www.nutanix.com/contact/','Distributed Consensus','Multi Paxos','Unknown,','Unknown','1/1/2011','NA',NULL,'','NA','Linux','More info in Readme','',0,NULL,NULL,0.00),
	(885,'Paxos','https://github.com/seancribbs/paxos','Justin Shoffstall','justin@shoffstall.net','https://github.com/jmshoffs0812','Distributed Consensus','Multi-Paxos','Erlang,','5.10.1','4/12/2013','1',NULL,'849','753','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(886,'Multi-Paxos - Distributed Consensus','https://github.com/cocagne/multi-paxos-example','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Multi-Paxos','Python,','2','4/4/2015','1',NULL,'1042','774','Windows, Mac OS, Linux','The implementation is very generic and any application that requires distributed consensus can be easily plugged into it. The code is built on top of popular twisted module in Python which is used in implementing event-driven model, which is well suited distributed applications. Also it uses Python mixins, to allow extensibility of the code, very easily, which is based on the concept derived from other functional programming languages.','',0,NULL,NULL,0.00),
	(887,'Paxos Made Moderately Complex (PaxosMMC)','https://github.com/denizalti/paxosmmc','DENƒ∞Z ALTINB√úKEN','deniz@cs.cornell.edu','http://www.cs.cornell.edu/~deniz/','Distributed Consensus','Multi-Paxos','Python,','Python-3.4','3/23/2015','1',NULL,'1657','1341','Windows, Mac OS, Linux','It is the exact implementation of Paxos Made Moderately Complex paper. Code is written in Python. It is easy to install and run.','',0,NULL,NULL,0.00),
	(888,'Multi-Paxos Example','https://github.com/cocagne/multi-paxos-example','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Multi-Paxos Algorithm','Python,','Python-2.7','4/4/2015','1',NULL,'1234','942','Windows, Mac OS, Linux','This implementation uses very simple but functional strategies for each of the implementation-defined aspects of multi-paxos. The code is written in Python using an asynchronous programming model. The Twisted framework is used to provide UDP networking, the asynchronous callback mechanism, function scheduling, and the overall reactor loop.','',0,NULL,NULL,0.00),
	(890,'LibPaxos','https://bitbucket.org/sciascid/libpaxos','Daniele Sciascia','Daniele.Sciascia@usi.ch','http://atelier.inf.usi.ch/~sciascid/','Distributed Consensus','Paxos','C,','','10/24/2015','3',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(891,'Paxos.Demo','https://github.com/ayende/Paxos.Demo','Ayende Rahien','ayende@ayende.com','http://ayende.com/Blog/','Distributed Consensus','paxos','CSharp,','5','3/8/2013','1',NULL,'981','833','Windows','','',0,NULL,NULL,0.00),
	(892,'Libpaxos ‚Äì General purpose Paxos library','http://sourceforge.net/projects/libpaxos/files/','Marco Tijuana','marco.tijuana@gmail.com','http://sourceforge.net/u/marco-tijuana/profile/','Distributed Consensus','Paxos','C,Erlang,','GCC(any), Erlang BEAM Emulator 5.6','9/1/2013','Rev. 10.4',NULL,'9800','~5400','Windows, Mac OS, Linux','Status: Beta','LibPaxos is a collection of open source implementations of the Paxos algorithm. The collection also includes implementations of RingPaxos & FastPaxos.',0,NULL,NULL,0.00),
	(893,'C++ example Multi Paxos','https://github.com/apache/mesos/tree/master/src/log','Open source project:https://github.com/apache/mesos/graphs/contributors','Open source project:https://github.com/apache/mesos/graphs/contributors','https://github.com/apache/mesos/graphs/contributors','Distributed Consensus','Paxos','Cpp,','C++ 11','10/7/2015','V0.25.0-rc3',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(894,'Distalgo vrpaxos original','https://github.com/DistAlgo/distalgo/tree/master/examples/vrpaxos/orig.da','Bo Lin and Yanhong Liu','liu@cs.stonybrook.edu','http://www.cs.stonybrook.edu/~liu','Distributed Consensus','Paxos','DistAlgo,','DistAlgo-1.0.0b5','5/7/2015','1.0.0.b15',NULL,'209','161','Windows, Linux','None','None',0,NULL,NULL,0.00),
	(895,'Java implementation of Simple Paxos','http://code.google.com/p/java-paxos/','David Federman, Shane Pope','David.Fe...@gmail.com','','Distributed Consensus','Paxos','Java,','Java 5','11/29/2011','1',NULL,'1262','1040','Windows, Mac OS, Linux','simple Paxos implementation in Java , easy to run.','',0,NULL,NULL,0.00),
	(896,'Paxos in Java','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Paxos','Java,','1.6+','1/1/2013','2',NULL,'1023','889','Windows, Mac OS, Linux','Essential Paxos provides basic implementations of the Paxos algorithm. The distinguishing characteristic of this implementation, as compared to other freely available and open-source implementations, is that this library is independent of application domains and networking infrastructures.','',0,NULL,NULL,0.00),
	(897,'Paxos Simulator','https://github.com/drewhannay/paxos','Drew Hannay','drewhannay@gmail.com','http://www.drewhannay.com/','Distributed Consensus','Paxos','Java,','Java 7','12/19/2012','1',NULL,'1548','1323','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(900,'Paxo implementation','https://github.com/gdub/python-paxos','Gary Wilson Jr. and Michael Stathopoulos','gary@thegarywilson.com','http://thegarywilson.com','Distributed Consensus','paxos','Python,','Python-3.2','7/28/2012','0.1',NULL,'2157','1425','Windows, Mac OS, Linux','A demo implementation of the Paxos consensus algorithm implemented in Python.\n\nThis was work for a class project in distributed computing to study a weighted version of the Paxos algorithm, in which a quorum is a majority of weight instead of a majority of processes. Weighted Paxos is a generalization of standard Paxos, which is equivalent to a weighted system where processes are assigned equal weights.','',0,NULL,NULL,0.00),
	(901,'essential-paxos','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Paxos','Python,','Python 3.x','1/1/2013','2.0.0',NULL,'1102','904','Windows, Mac OS, Linux','This implementation is independent of application domains and networking infrastructures. Very well documented and easy to install.','',0,NULL,NULL,0.00),
	(902,'Concoord','https://github.com/denizalti/concoord','Deniz Altinbuken and Emin Gun Sirer','deniz@systems.cs.cornell.edu, egs@systems.cs.cornell.edu','','Distributed Consensus','Paxos','Python,','2.7.2','4/3/2014','1.1.0',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(906,'Byzantine paxos algorithm','http://research.microsoft.com/en-us/um/people/lamport/tla/byzpaxos.html','Miguel Castro and Barbara Liskov','{castro,liskov}@lcs.mit.edu','http://pmg.csail.mit.edu/~castro/osdi99_html/osdi99.html','Distributed Consensus','Paxos','TLA,','','11/1/2002','1',NULL,'4800','~4k','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(907,'Essential Paxos (Simple Paxos)','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Paxos Agorithm','Java,Python,','Python-2.7','1/1/2013','2',NULL,'1096','500','Windows, Mac OS, Linux','It is one of the very few open source implementations of basic paxos that is independent of application domains and networking infrastructures. So, this can be used both for educational purposes and direct use in networked applications. It also has best documentation, it is well tested and code for testing is also available. It has code written for both Java and Python. It is also easy to install and run.','',0,NULL,NULL,0.00),
	(909,'Essential Paxos','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Paxos algorithm','Python,','No specific version mentioned','4/23/2012','2',NULL,'345','~200','Windows, Mac OS, Linux','The library is independent of application domains and networking infrastructures. Whereas most Paxos implementations are deeply and inextricably embedded within application-specific logic, this implementation focuses on encapsulating the Paxos algorithm within opaque and easily re-usable classes','',0,NULL,NULL,0.00),
	(911,'Raft Implementation','https://github.com/flowerhack/raft/tree/master/raft','Julia Hansbrough','julia@flowerhack.com','http://www.flowerhack.com','Distributed Consensus','Paxos Algorithm','Python,','2.7','3/20/2014','1',NULL,'350','250','Windows, Mac OS, Linux','Simple and Direct implementation of the Raft in Python language. I believe the code is very close implementation of what http://raft.github.io visualisation does.','',0,NULL,NULL,0.00),
	(912,'Paxos algorithm implemented in Python','https://github.com/gdub/python-paxos','Gary Wilson Jr','gary@thegarywilson.com','http://thegarywilson.com','Distributed Consensus','Paxos Consensus','Python,','','7/29/2012','1',NULL,'1450','1100','Linux','Implementation is easy to understand.','',0,NULL,NULL,0.00),
	(913,'RAFT','https://github.com/willemt/raft','Willem Thiart','himself@willemthiart.com','https://github.com/willemt','Distributed Consensus','Raft','C,','unknown','9/25/2015','v0.3.0',NULL,'1715','1419','Windows, Mac OS, Linux','C implementation of the Raft consensus protocol under BSD licensed\nMore about how to use it: https://github.com/willemt/raft','\"raft_server_private_t me:(raft_server_private_t*)calloc(1, sizeof(raft_server_private_t))\n    me->current_term = 0;\n    me->voted_for = -1;\n    me->timeout_elapsed = 0;\n    me->request_timeout = 200;\n    me->election_timeout = 1000;\n    me->log = log_new();\n    raft_set_state((raft_server_t*)me, RAFT_STATE_FOLLOWER);\n    me->current_leader = -1;\"',0,NULL,NULL,0.00),
	(914,'Raft implementation of RethinkDB','https://github.com/rethinkdb/rethinkdb','RethinkDB team','N/A','rethinkdb.com','Distributed Consensus','Raft','Cpp,','C++','9/15/2015','2.1.5',NULL,'3000','~2.5k','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(915,'Distalgo example raft original','http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/raft/orig.da','Bo Lin and Yanhong Liu','liu@cs.stonybrook.edu','http://www3.cs.stonybrook.edu/~liu/','Distributed Consensus','Raft','DistAlgo,','DistAlgo-1.0.0b15','5/17/2015','1',NULL,'235','190','Windows, Mac OS, Linux','It is easier to understand than other implementations in other languages because in distalgo it is easier to implement just the algorithm, i.e follower, candidate and the leader term.\nAs I have already spent some time on learning distalgo, that helped.','Active development : yes.',0,NULL,NULL,0.00),
	(916,'Raft reference implementation for Erlang','https://github.com/djui/eraft','Uwe Dauernheim','uwe@dauernheim.net','http://djui.io','Distributed Consensus','raft','Erlang,','Erlang OTP-18.1.3','8/28/2013','1',NULL,'604','399','Windows, Mac OS, Linux','Raft is the consensus algorithm implemented in LogCabin coordinator used by RAMCloud','',0,NULL,NULL,0.00),
	(917,'zraft_lib','https://github.com/dreyk/zraft_lib','Dreyk','gunin@satissoft.ru','','Distributed Consensus','Raft','Erlang,','','10/15/2015','1',NULL,'','','Windows, Linux','','',0,NULL,NULL,0.00),
	(919,'etcd (Go Implementation of Raft)','https://github.com/coreos/etcd/tree/master/raft','Xiang Li, Yicheng Qin','xiangli.cs@gmail.com, qycqycqycqycqyc@gmail.com','http://xiangli.co','Distributed Consensus','Raft','Go,','Go Version 1.4','9/9/2015','v2.2.0',NULL,'322542','260236','Windows, Mac OS, Linux','etcd is a distributed, consistent key-value store for shared configuration and service discovery,','',0,NULL,NULL,0.00),
	(920,'Goraft','https://github.com/goraft/raft','Ben Johnson, Brandon Phillips, Xiang Li','xiangli.cs@gmail.com, brandon@ifup.org, benbjohnson@yahoo.com','https://github.com/benbjohnson, https://github.com/philips , https://github.com/xiang90','Distributed Consensus','Raft','Go,','1.5.0','5/8/2014','1',NULL,'6565','5000','Windows, Mac OS, Linux','Popular Implementation of Raft in Go Lang. Interesting since Go lang is a good fit for distributed computing.','Status: Active',0,NULL,NULL,0.00),
	(921,'RAFT','https://github.com/hashicorp/raft/blob/master/raft.go','HashiCorp -  Armon Dadgar','armon.dadgar@gmail.com','https://github.com/armon','Distributed Consensus','Raft','Go,','1.2+','9/7/2015','1',NULL,'1819','1557','Windows, Mac OS, Linux','raft is a Go library that manages a replicated log and can be used with an FSM to manage replicated state machines. It is library for providing consensus','\"raft servers: 3 or 5\"',0,NULL,NULL,0.00),
	(922,'Raft in GO','https://godoc.org/github.com/coreos/etcd/raft','CoreOS','https://groups.google.com/forum/?hl=en#!forum/etcd-dev','https://coreos.com','Distributed Consensus','Raft','Go,','1.4+','11/6/2015','v2.3.0-alpha.0',NULL,'11400','9559','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(923,'A Go implementation of the Raft distributed consensus protocol.','https://github.com/goraft/raft','Brandon Philips','brandon@ifup.org','https://twitter.com/brandonphilips','Distributed Consensus','RAFT','Go,','go 1.2','5/8/2015','1',NULL,'6456','5190','Windows, Mac OS, Linux','This implementation has a mailing list for discussion about best practices and implementation of Raft. Not goraft specific but helpful if you have questions.','slides : https://speakerdeck.com/benbjohnson/raft-the-understandable-distributed-consensus-protocol',0,NULL,NULL,0.00),
	(924,'libraft - Raft distributed consensus protocol in Java','https://github.com/allengeorge/libraft','Allen George','allen.george@gmail.com','allengeorge.com, https://github.com/allengeorge','Distributed Consensus','Raft','Java,','6+','4/10/2014','0.1.1',NULL,'34707','25000','Windows, Mac OS, Linux','Popular Raft implementation in Java','Status: Active',0,NULL,NULL,0.00),
	(925,'Raft in Java','http://libraft.io','Allen George','http://www.allengeorge.com/about/','https://github.com/allengeorge','Distributed Consensus','Raft','Java,','1.6+','1/25/2015','0.1.1',NULL,'31972','27236','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(926,'j-groups-raft','http://belaban.github.io/jgroups-raft/','Bela Ban','','','Distributed Consensus','Raft','Java,','','10/6/2015','0.2',NULL,'','','Windows, Mac OS, Linux','This implementation of Raft relies upon the JGroups Java library.','',0,NULL,NULL,0.00),
	(927,'RaftKVDatabase','http://archiecobbs.github.io/jsimpledb/publish/reports/Javadoc/             index.html?org/jsimpledb/kv/raft/RaftKVDatabase.html','Archie Cobbs','','','Distributed Consensus','Raft','Java,','','11/8/2015','1.3.3',NULL,'','','Windows, Mac OS, Linux','The Raft implementation is just a part of the larger JSimpleDB implementation--a distributed database built in Java.','',0,NULL,NULL,0.00),
	(928,'POSIX Shell Script, LiteRaft','https://github.com/inokappa/lite-raft','Luigi Tarenga','luigi.tarenga.gmail.com','https://code.google.com/u/115487500275013469834/','Distributed Consensus','Raft','Shell,','Bash','9/12/2015','1',NULL,'1110','815','Mac OS, Linux, HP-UX','It is completely written in bash and it is quite well written as far as code quality and structure is concerned.\nThings like cluster_nodes, election_timeout parameters can be configured in a config file, can start the raft process on each node as a daemon which keeps running, has command line arguments to start/stop them as well.\nIt is little bit harder to understand because need to understand bash but this implementation is quite close to a real world distributed system and hence I could relate to it.','',0,NULL,NULL,0.00),
	(929,'Simple RAFT','https://github.com/streed/simpleRaft','Sean Reed','','','Distributed Consensus','Raft','Python,','Python-2.6','5/1/2015','2',NULL,'435','396','Windows, Mac OS, Linux','','This is the simplest implementation of Raft consensus algorithm in Python. It is well documented. Code is written in Python. It is easy to install and run. It is also well-tested for correctness and code for testing is also available.',0,NULL,NULL,0.00),
	(930,'Distributed consensus - RAFT','https://github.com/inokappa/lite-raft','Luigi tarenga','luigi.tarenga@gmail.com','https://github.com/inokappa','Distributed Consensus','RAFT','Shell,','','9/12/2014','1',NULL,'1102','871','Linux, Unix','This implementation supports\n1. Leader Election\n2. Log Replication\n3. Membership Changes(Reconfiguration)\n4. Log Compaction','',0,NULL,NULL,0.00),
	(931,'Raft specification','https://github.com/ongardie/dissertation','Diego Ongaro','ongardie at gmail dot com','https://ongardie.net/diego/','Distributed Consensus','Raft','TLA,','','12/2/2014','1',NULL,'485','400','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(932,'LogCabin','https://github.com/logcabin/logcabin','Diego Ongaro','ongardie@gmail.com','https://ongardie.net/diego/','Distributed Consensus','Raft Algorithm','Cpp,','g++ 4.4','1/2/2012','1.1',NULL,'47648','31082','Linux','LogCabin is a distributed system that provides a small amount of highly replicated, consistent storage. It is a reliable place for other distributed systems to store their core metadata and is helpful in solving cluster management issues. LogCabin uses the Raft consensus algorithm internally and is actually the very first implementation of Raft.','1. Active Development: Yes\n2. Documented: Well Documented\n3. First Implementation of Raft: Yes\n4. Change in Debug log verbosity at runtime for a single server: yes (without shutting the server down)\n5. Controls Server Snapshot behavior',0,NULL,NULL,0.00),
	(933,'LogCabin (Raft implementation in C++)','https://github.com/logcabin/logcabin','Diego Ongaro and Ali Mashtizadeh','ongardie@gmail.com; ali@vmware.com','https://ongardie.net/diego; http://people.csail.mit.edu/alim/index.html','Distributed Consensus','Raft Consensus Algorithm','Cpp,','g++ (v4.4)','4/29/2015','1.1.0',NULL,'','','Linux','LogCabin is a distributed storage system built on Raft that provides a small amount of highly replicated, consistent storage. It is released under ISC license.','1. Leader Election + Log Replication : yes\n2. Membership Changes : yes\n3. Log Compaction : yes',0,NULL,NULL,0.00),
	(934,'Rethink DB Raft Implementation','https://github.com/rethinkdb/rethinkdb/tree/next/src/clustering/generic','SRH','sam@subtercosm.org','https://github.com/srh','Distributed Consensus','Raft Consensus Algorithm','Cpp,','','10/7/2015','2.1.5',NULL,'2500','2300','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(935,'libraft','https://github.com/allengeorge/libraft','allen george','http://www.allengeorge.com','http://www.allengeorge.com','Distributed Consensus','Raft distributed consensus protocol','Java,','7','1/25/2014','0.1.1',NULL,'9760','8690','Windows, Mac OS, Linux','good features like minElectionTimeout, additionalElectionTimeoutRange, rpcTimeout, heartbeatInterval and minReconnectInterval','',0,NULL,NULL,0.00),
	(936,'Hashicorp/raft','https://github.com/hashicorp/raft','Hashicorp','','https://www.hashicorp.com','Distributed Consensus','Raft Protocol','Go,','1.2','1/1/2013','0.0.0.0',NULL,'8400','6100','Mac OS, Linux','Of all the 3 implementations I posted, this is my least favourite but it is still better documented and has the 3 minimum features of ( leader election + log replication, membership changes, log compaction that I look for in a raft algorithm). Also, most raft implementations listed in the raft website are applications of raft for specific purposes. Most such raft implementations have little or no documentaion for the raft algorithm. Also, they may miss 1 or 2 features if their application does not require it. This implementation by Hashcorp has a dedicated implementation for raft with good documentation and APIs. Developer support seems to be minimal with the last commit made almost a month ago and the last build failing but I believe that can be fixed.','pros : good documentation, reputed organization, lot of developers, has all features expected from a Raft algorithm\ncons : recent development has been minimal, does not seem to be used anywhere.\nLeader Election + log replication : yes\nMembership Changes : yes\nLog Compaction : yes',0,NULL,NULL,0.00),
	(937,'etcd/raft','https://github.com/coreos/etcd/tree/master/raft','Blake Mizerany, Xiang Li and Yicheng Qin (coreOs)','','https://github.com/coreos','Distributed Consensus','Raft Protocol','Go,','','11/6/2015','2.3.0 Alpha.0',NULL,'11400','8900','Linux','Unlike the previous implementation of Copycat, raft is just a part of the etcd implementation. It is rated very highly and has been through multiple stable releases over the past two years. The etcd key-value has a good documentation where as the raft implementation documentation is not that well documented. It seems to be the problem with many of these implementations that use raft as a sub module for replicated database applications. One good source of documentation for raft is the doc.go file and design.md file in raft folder in the github repo. The API and their function for multi-cluster setup has been developed properly and has been tested but I am still not perfectly happy with the implementation of the raft protocol in terms of its understandablility.','pros : active and tested project that has gone through several releases. The raft implementation though simple seems to be robust, has a good key -value store built on top of it.\ncons : no good documentation for raft, might need source code sifting to properly understand it.\nLeader Election + log replication : yes\nMembership Changes : yes\nLog Compaction : yes',0,NULL,NULL,0.00),
	(938,'DistAlgo example Raft, vrpaxos, lapaxos','http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/lapaxos/; http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/vrpaxos/; http://sourceforge.net/p/distalgo/git/ci/master/tree/examples/raft/','Bo Lin and Yanhong Liu','liu@cs.stonybrook.edu','https://www.google.com/url?q=http://www.cs.stonybrook.edu/~liu&sa=D&usg=AFQjCNE_8xc-j_7XZ-tPCc_cHAyAoqGqEw','Distributed Consensus','Raft, Lamport\'s paxos, VanReese\'s paxos','DistAlgo,','DistAlgo-1.0.0b14','2/26/2015','1',NULL,'Lapaxos: 90; VRPaxos: 209; Raft: 235','Lapaxos: ~60; VRPaxos: ~155; Raft: 196','Windows, Mac OS, Linux','Implementation is simple to comprehend','\"Active development: yes\"',0,NULL,NULL,0.00),
	(939,'cocagne paxos(essential,functional and practical)','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Simple Paxos','Java,','Java 7.0','1/1/2013','2',NULL,'366','340','Windows, Mac OS, Linux','There are 3-4 versions/features on top of the basic paxos implementation which include simple heartbeating mechanism to detect leadership failure and initiate recovery(functional paxos implementation)','',0,NULL,NULL,0.00),
	(941,'JZab- ZooKeeper Atomic Broadcast (Zab) in Java.','https://github.com/zk1931/jzab','Yisheng Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','Zab','Java,','JDK - 1.7','11/18/2014','0.3.0',NULL,'1600','1000','Windows, Mac OS, Linux','High throughput,fuzzy snapshot, dynamic reconfiguration, secure config','',0,NULL,NULL,0.00),
	(942,'','https://zookeeper.apache.org/','','dev@zookeeper.apache.org','','Distributed Consensus','ZAB','Java,','1.7','8/31/2015','3.5.1',NULL,'10000','10000','Windows, Mac OS, Linux','Extensive documentation','',0,NULL,NULL,0.00),
	(943,'JZab','http://zk1931.github.io/jzab/0.4.0-SNAPSHOT/','Yisheng Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','Zookeeper Atomic Broadcast','Java,','JDK 1.7','6/4/2014','1',NULL,'13946','8644','Windows, Mac OS, Linux','Its features include high throughput, fuzzy snapshot (minimizes service interruption while taking snapshots), dynamic reconfiguration, minimum runtime dependencies and secure communication','',0,NULL,NULL,0.00),
	(944,'ZooKeeper Atomic Broadcast','https://github.com/zk1931/jzab/','Yisheng Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','Zab: High-performance broadcast for primary-backup systems','Java,','JDK 1.7','6/4/2015','1',NULL,'17871','11000','Windows, Mac OS, Linux','High throughput - benchmarked > 20k writes/sec on commodity hardware.\nFuzzy snapshot - minimizes service interruption while taking snapshots.\nDynamic reconfiguration - add/remove servers without restarting the cluster.\nMinimum runtime dependencies - netty, protobuf, slf4j.\nSecure communication - using ssl.','',0,NULL,NULL,3.06),
	(945,'JZab','https://github.com/zk1931/jzab/','Eason Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','Zookeeper Atomic Broadcast','Java,','JDK-1.7','6/4/2014','1',NULL,'13946','8644','Windows, Mac OS, Linux','1. High throughput\n2. Fuzzy snapshot - minimizes service interruption while taking snapshots.\n3. Dynamic reconfiguration - add/remove servers without restarting the cluster.\n4. Minimum runtime dependencies - netty, protobuf, slf4j.\n5. Secure communication - using ssl.\n\nSince, ZooKeeper\'s Zab implementation is rather entangled with ZooKeeper code base. Jzab is an independent implementation of Zab protocol to facilitate other users who want to build applications on top of it.','',0,NULL,NULL,0.00),
	(946,'ZooKeeper Atomic Broadcast in Java(jZab)','https://github.com/zk1931/jzab/','Yisheng Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','ZooKeeper Atomic Broadcast','Java,','jdk 1.7','11/7/2014','',NULL,'9540','8992','Windows, Mac OS, Linux','Very Well documented, good features like High throughput , Fuzzy snapshot , Dynamic reconfiguration, Minimum runtime dependencies and Secure communication','',0,NULL,NULL,0.00),
	(947,'jzab - Distributed Consensus','http://zk1931.github.io/jzab/master/','Yisheng Liao','eason.liao@nyu.edu','https://keybase.io/yisheng','Distributed Consensus','Zookeeper Atomic Broadcast(ZAB)','Java,','JDK-7, protobuf-compiler, ant, maven-2, netty, slf4j','6/4/2015','1',NULL,'9017','5299','Windows, Mac OS, Linux','The implementation claims a very high throughput of more than 20k requests/sec.\nIt also has features like Dynamic Reconfiguration and fast and low overhead snapshots.','',0,NULL,NULL,0.00),
	(948,'etcd','https://github.com/coreos/etcd','Xiang Li','xiangli.cs@gmail.com','http://xiangli.co','Distributed Consensus','Distributed concensus(RAFT)','Go,','1.4','10/18/2015','V 2.2.1',NULL,'313479','252874','Windows, Mac OS, Linux, DOCKER,AppC','Simple: user facing API (HTTP+JSON)\nSecure: optional SSL client cert authentication\nFast: benchmarked 1000s of writes/s per instance\nReliable: properly distributed using Raft\nLeader Election + Log Replication\nMembership Changes\nLog Compaction\nLisenced under Apache2.0','',0,NULL,NULL,0.00),
	(949,'Plain Paxos by Tom Cocagne','https://github.com/cocagne/paxos','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Distributed Consensus','Paxos','Python,Java,','Python 2.7 and Java 1.7','1/16/2013','1',NULL,'3598','3526','Windows, Mac OS, Linux','None','None',0,NULL,NULL,0.00),
	(950,'GO example for Raft','https://github.com/hashicorp/raft/blob/master/raft.go','OpenSource Project(main contributor Armon Dadgar)','armon.dadgar@gmail.com','https://github.com/hashicorp/raft/graphs/contributors','Distributed Consensus','Raft','Go,','GO1.2+','','v1.0',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(951,'Python implementation of Multi-paxos','https://github.com/denizalti/paxosmmc','denizalti','denizalti( can be contacted via github link posted above).','https://github.com/denizalti/paxosmmc','Distributed Consensus','Multi-paxos','Python,','latest','1/1/2014','1',NULL,'6000','5500','Linux','https://github.com/denizalti/paxosmmc','',0,NULL,NULL,0.00),
	(952,'Python-composable-paxos','https://github.com/cocagne/python-composable-paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Paxos','Python,','Python 3.x','4/4/2015','1',NULL,'632','598','Windows, Mac OS, Linux','The advantage to this minimalist approach over more full-featured solutions is flexibility. These classes have no external dependencies and they make no assumptions about the application\'s operational environment or message handling semantics. All they do is correctly implement the core algorithm in a neat little black box that can be used as a foundational building block for distributed applications.','',0,NULL,NULL,0.00),
	(953,'GO implementation of Raft','https://github.com/coreos/etcd/blob/master/raft/node.go','Opensource community,mainly , Xiang Li and Yicheng Qin','xiangli.cs@gmail.com,qycqycqycqycqyc@gmail.com(all contributors https://github.com/coreos/etcd/graphs/contributors)','https://github.com/coreos/etcd/graphs/contributors','Distributed Consensus','RAFT algorithm','Go,','GO1.5','10/15/2015','v2.2.1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(954,'Raft implementation in Go.','https://github.com/coreos/etcd','Xiang Li and Et. al','https://github.com/coreos/etcd : Developers can be contacted via github.','https://github.com/coreos/etcd','Distributed Consensus','Raft','Go,','latest.','10/10/2014','2',NULL,'2500','2000','Linux','This is part of COREOS','',0,NULL,NULL,0.00),
	(955,'Java implementation of Chord','http://sourceforge.net/projects/open-chord/','Sven Kaffille and Karsten Loesing','','http://sourceforge.net/u/skaffille/profile/ http://sourceforge.net/u/kloesing/profile/','Distributed Hash Table','Chord','Java,','1.5','4/23/2013','1.0.5',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(956,'Python Chord Implementation','https://github.com/gaston770/python-chord','Gaston Ingaramo','gaston770@gmail.com','https://github.com/gaston770','Distributed Hash Table','Chord','Python,','Python 2.7','3/3/2014','1',NULL,'','','Windows, Mac OS, Linux','Good Documentation','',0,NULL,NULL,0.00),
	(957,'C++ Distributed Hash Chord by MIT','https://github.com/sit/dht/wiki','Emil Sit','chord-dev@pdos.lcs.mit.edu','http://www.emilsit.net/blog/','Distributed Hash Table','Chord | Dhash','Cpp,','C99','4/1/2008','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(958,'Kademlia distributed hash table','https://github.com/jech/dht','Juliusz Chroboczek','jch@pps.jussieu.fr','','Distributed Hash Table','Kademlia distributed hash table','C,','','5/19/2009','dht-0.24',NULL,'2846','2534','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(959,'Voldemort','http://www.project-voldemort.com/voldemort/','Alex Feinberg','alex@strlen.net','http://afeinberg.github.io/','Distributed Hash Table','Amazon Dynamo','Java,','7','5/31/2009','',NULL,'8553400','8101452','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(960,'Distributed Hash Table','https://github.com/sit/dht','Emil Sit','sit@emilsit.net','http://www.emilsit.net/blog/','Distributed Hash Table','Chord','C,','','4/4/2008','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(961,'C++ example CHORD','https://github.com/sit/dht/tree/master/chord','Emil Sit,Ion Stoica','istoica@cs.berkeley.edu,','http://www.cs.berkeley.edu/~istoica/','Distributed Hash Table','CHORD','Cpp,','C++11','4/4/2008','V1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(962,'experimental implementation of chord lookup service','https://github.com/sit/dht','Emil Sit','chord-dev@pdos.lcs.mit.edu','http://www.emilsit.net','Distributed Hash Table','Chord','Cpp,','C++98','4/4/2008','1',NULL,'28760','23540','Mac OS, Linux','It was an experimental implementation of chord lookup service and the cooperative file system(CFS)','',0,NULL,NULL,0.00),
	(963,'MIT Chord/DHash','https://github.com/sit/dht/wiki','Emil Sit','sit@emilsit.net','http://www.emilsit.net/','Distributed Hash Table','Chord','Cpp,','','4/8/2008','1',NULL,'3086','2500','Windows, Mac OS, Linux','\"implements the API defined in chord.h to maintain routing tables, add/remove nodes from the network, route simple queries. libchord also provides a node-to-node RPC service based on SFS asynchronous RPC.‚Ä®DHash depends on chord and builds a replicated block store on the basic Chord primitive\"','',0,NULL,NULL,0.00),
	(964,'Chord Distributed hash table(saket kunwar)','https://github.com/saketkunwar/erl_dht','saket kunwar','saketkunwar2005@gmail.com','','Distributed Hash Table','Chord','Erlang,','','12/7/2009','1',NULL,'3423','2472','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(966,'Open Chord','http://open-chord.sourceforge.net/','Distributed and Mobile Systems Group of Bamberg University','open-chord-users@lists.sourceforge.net','https://www.uni-bamberg.de/en/pi/bereich/research/software_projects/openchord/','Distributed Hash Table','Chord','Java,','Java 1.7','4/23/2013','1.0.5',NULL,'19875','9245','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(968,'JChord','https://code.google.com/p/joonion-jchord/','Joonion Bae','joonion@gmail.com','https://code.google.com/p/joonion-jchord/','Distributed Hash Table','Chord','Java,','7','7/29/2013','1',NULL,'500','450','Windows, Mac OS, Linux','Test utilities can be used as driver functions','\"Test with various parameters: Yes\"',0,NULL,NULL,0.00),
	(969,'OpenChord','http://open-chord.sourceforge.net/','Karsten Loesing & Sven Kaffille','http://sourceforge.net/u/kloesing/wiki/Home/; http://sourceforge.net/u/skaffille/profile/','http://sourceforge.net/u/kloesing/wiki/Home/; http://sourceforge.net/u/skaffille/profile/','Distributed Hash Table','Chord','Java,','5','11/4/2008','1',NULL,'2500','1800','Windows, Mac OS, Linux','***TAKEN FROM PROJECT HOMEPAGE***\nStore any serializable Java object within distributed hash table (dht).\n    Provides possibility to create own key implementations used with dht by implementing an interface of OpenChord API.\n    Facilitates configurable replication of entries in dht.\n    Currently provides two (proprietary) protocols for communication between chord nodes:\n        Local method calls: This protocol can be used to create a dht within one Java Virtual Machine for testing and visualization purposes. A command line interface is provided to set up such a chord overlay network.\n        Java Sockets: This protocol creates a dht distributed over different nodes (JVMs). For testing purposes Chord nodes using this protocol can also be created with a command line interface.\n        Custom Protocols: Custom protocols can be provided by other developers, which in the current state of the implementation unfortunately requires a recompilation of Open Chord.','\"Documentation: Very Good\"',0,NULL,NULL,0.00),
	(970,'Chord(Karsten Loesing)','http://sourceforge.net/projects/open-chord/files/Open%20Chord%201.0/1.0.5/','Karsten Loesing and  Sven Kaffille','-','https://www.uni-bamberg.de/?id=5372','Distributed Hash Table','Chord','Java,','1.5+','11/4/2008','1.0.5',NULL,'19878','9244','Windows, Mac OS, Linux','-Store any serializable Java object within distributed hash table (dht).\n-Provides possibility to create own key implementations used with dht by implementing an interface of OpenChord API.\n-Facilitates configurable replication of entries in dht.','',0,NULL,NULL,0.00),
	(971,'Chord in Java','https://github.com/tomp2p/TomP2P','TomP2P','tom-at-tomp2p.net','http://tomp2p.net','Distributed Hash Table','Chord','Java,','1.6+','5/27/2015','tomp2p-parent-5.0-Beta8',NULL,'13433','10114','Windows, Mac OS, Linux','Java6 DHT implementation with non-blocking IO using Netty.','',0,NULL,NULL,0.00),
	(972,'CiteSeerX','https://pdos.csail.mit.edu/papers/?search=key:%22overcite:nsdi06%22#overcite:nsdi06','SeerLabs','','http://citeseerx.ist.psu.edu/index','Distributed Hash Table','Chord','Java,Python,','7','7/11/2013','',NULL,'10871512','Java :3111832 , Python : 466809','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(973,'Donut','http://alevy.github.io/donut/','Amit Levy, Jeff Prouty, Rylan Hawkins','','','Distributed Hash Table','chord','Java,Ruby,','','1/1/2009','0.0.0',NULL,'4000','2665','Mac OS, Linux','This is a academic project in University of Washington in the year 2009. It is minimal interface that follows the basics of the chord algorithm specified in the paper. It has no testing data and is not really resistent to failures or delayed messages. Basically, stale reads and delayed reads leave the system in an inconsistent state and that means that an important feature of distributed hash table is not being met. So, adding concensus on top of this implementation of chord can be a useful project idea but more understanding of the implementation adn correctness is needed before anything can be said with certainty. Note : Byzantine failures are not handled .','Fault Tolerant : no\nComplete Implementation : no\nActive Development - no\nAcademic Project : yes',0,NULL,NULL,0.00),
	(974,'Chord: Distributed Hash Table','https://github.com/optimizely/chord','Brian Ollenberger','','','Distributed Hash Table','chord','JavaScript,','JavaScript 1.8','8/7/2013','0.1.2',NULL,'368','245','Windows, Mac OS, Linux','Chord is a self-organizing distributed hash table. This is an implementation of the Chord algorithm in Node.js. It provides the ability to construct a Chord cluster and to route application layer messages to a process responsible for a range of keys.','supports virtual nodes and uses UDP as its out-of-process transport layer',0,NULL,NULL,0.00),
	(975,'Python-Chord','https://github.com/gaston770/python-chord','Gaston Ingaramo','gaston770@gmail.com','NA','Distributed Hash Table','Chord','Python,','2.7','3/3/2014','1',NULL,'1800','1500','Windows, Mac OS, Linux','Edit settings.py for various mode of execution','\"Tweakable interfaces: Yes\"',0,NULL,NULL,0.00),
	(976,'DHT-Demo','https://github.com/Elderry/dht-demo','Ruiyang Li','elderry@outlook.com','https://cn.linkedin.com/in/elderry','Distributed Hash Table','Chord','Python,','2.7','7/16/2015','1',NULL,'1011','903','Linux','Nicknames of the nodes to be unique, the initial node must be run with name localhost. Depends on the twisted asynchronous network api for the n/w iops.','',0,NULL,NULL,0.00),
	(978,'Chord Implementation in Ruby','https://github.com/wyhaines/Chord','https://github.com/wyhaines','wyhaines@gmail.com','','Distributed Hash Table','Chord','Ruby,','Ruby 2.2.3','10/7/2015','v1.0',NULL,'1440','1085','Windows, Mac OS, Linux','This is the implementation of Chord paper with some modifications. It is well documented and easy to understand. It is easy to install and use.','',0,NULL,NULL,0.00),
	(979,'Distributed hash table using a chord','https://github.com/chuckha/dht','Chuck Ha','ha.chuck@gmail.com','https://github.com/chuckha','Distributed Hash Table','Chord','Go,','','11/1/2013','',NULL,'872','','','','',0,NULL,NULL,0.00),
	(980,'Chord distributed hash table for Node.js','https://github.com/optimizely/chord','Optimizely','','','Distributed Hash Table','Chord','JavaScript,','','8/7/2013','',NULL,'678','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(981,'Zero-hop distributed hashtable','https://github.com/mierl/ZHT','Illinois Institute of Technology','','http://datasys.cs.iit.edu/projects/ZHT/','Distributed Hash Table','Chord algorithm','C,Cpp,','Google protocol buffers c binding, VERSION 0.15 or later, Google protocol buffers C++ binding, VERSION 2.4.1','12/23/2013','1',NULL,'23521','14502','Linux','ZHT has several important features making it a better candidate than other distributed hash tables and key-value stores, such as being light-weight, dynamically allowing nodes join and leave, fault tolerant through replication and by handling failures gracefully and efficiently propagating events throughout the system, a customizable consistent hashing function, supporting persistence for better recoverability in case of faults, scalable, and supporting unconventional operations such as append (providing lock-free concurrent key/value modifications) in addition to insert/lookup/remove.','Features: Event-driven model, epoll, TCP, UDP, Threads\nScalability: Up to 32768 instances on BlueGene/P\nThroughput: 18M ops/sec (tested on BlueGene/P with 32768 cores)',0,NULL,NULL,0.00),
	(982,'MIT Chord/DHash Server','https://github.com/sit/dht','MIT Project','chord@pdos.lcs.mit.edu','https://github.com/sit/dht/wiki','Distributed Hash Table','Chord Algorithm','Cpp,','','11/7/2001','1',NULL,'38896','32223','Mac OS, Linux, BSD, Solaris','1. maintain routing tables\n2. add/remove nodes from the network\n3. route simple queries\n4. libchord also provides a node-to-node RPC service based on SFS asynchronous RPC.\n5. DHash depends on chord and builds a replicated block store on the basic Chord primitive.','Experimental: yes',0,NULL,NULL,0.00),
	(984,'Distributed-Hash-Table','https://github.com/HarshHarwani/Distributed-Hash-Table','Harsh Rajesh Harwani','harwaniharsh@gmail.com','http://www.acsu.buffalo.edu/~hharwani/','Distributed Hash Table','Chord Protocol','Java,','','7/1/2015','1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(985,'Distributed Hash Table implementation according to the Chord Ring Protocol','https://github.com/zstring/Distributed-Hash-Table','Himanshu Sharma','jai.himanshu001@gmail.com','https://www.linkedin.com/in/hssharma','Distributed Hash Table','Chord Ring Protocol','Java,','1.7jdk','4/9/2015','',NULL,'5414','5100','Linux','Straight forward and easy to understand. Also supports insert and query opearations along with all DHT functionalities\nThree Main Functionalities are implemented\n1) ID space partitioning/re¬≠partitioning,\n2) Ring¬≠based routing, and\n3) Node joins','',0,NULL,NULL,0.00),
	(986,'Riak','http://docs.basho.com/riak/latest/','Aerospike','','','Distributed Hash Table','Distributed No Sql Key Value data store','Erlang,','','8/17/2009','2.1.0',NULL,'127255','47633','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(987,'Dynamo in Java','https://github.com/itsnayeem/Dynamo','Shah','-','https://github.com/itsnayeem','Distributed Hash Table','Dynamo','Java,','1.6+','1/3/2012','1',NULL,'1230','1013','Windows, Mac OS, Linux','This is a partial implementation of Amazon\'s Dynamo which supports Distributed Hash Table(DHT)','',0,NULL,NULL,0.00),
	(988,'Apache Cassandra','http://cassandra.apache.org/','Apache Fondation','user-subscribe@cassandra.apache.org','http://cassandra.apache.org/','Distributed Hash Table','Dynamo','Java,','','10/8/2008','2.2.3',NULL,'23149077','13228044','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(989,'FreePastry','http://www.freepastry.org','cs.rice.edu','freepastry@cs.rice.edu','http://www.freepastry.org','Distributed Hash Table','FreePastry DHT','Java,','JDK-5','3/13/2009','2.1',NULL,'174959','82371','Windows, Mac OS, Linux','The library implements Pastry variant of DHT protocols and is huge and very popular among pastry implementations. Not very secure as there is no support for malicious nodes.','',0,NULL,NULL,0.00),
	(990,'Java Distributed Hash Table','http://dks.sics.se/jdht/','KTH/Royal Institute of Technology','dks@sics.se','http://www.kth.se/en','Distributed Hash Table','JDHT is a simple Java based Distributed Hash Table (DHT) which implements Java.util.Map.','Java,','Java 7','','1',NULL,'','','Linux','DHTs are very scalable distributed data structured originated from research on peer-to-peer (P2P) computing.\nWritten in Java and it implements the Java.util.Map class.\nIt is a Java Collections/Map compatible DHT.','Active development : Yes.',0,NULL,NULL,0.00),
	(991,'Python implementation of Kademila','https://github.com/bmuller/kademlia','Brian Muller','bamuller@gmail.com','http://findingscience.com','Distributed Hash Table','Kademila','Python,','Python 2.7','7/27/2015','0.5',NULL,'2409','1557','Windows, Mac OS, Linux','Kademlia is a distributed hash table for decentralized peer-to-peer computer networks designed by Petar Maymounkov and David Mazi√®res in 2002. It specifies the structure of the network and the exchange of information through node lookups.','Base paper : https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf',0,NULL,NULL,0.00),
	(992,'maidsafe-dht','https://code.google.com/p/maidsafe-dht/','Fraser Hutchison','fraser.hutchison@gmail.com','','Distributed Hash Table','Kademlia','Cpp,','11','2/20/2014','1',NULL,'10872','6536','Windows, Mac OS, Linux','A Kademlia-like Distributed Hash Table (DHT) with NAT Traversal that utilises Kademlia-like routing tables for scalability with D1HT speed.\nFeatures:\n- Support for Store and Delete operations\n- Complete network reconfiguration in a time period from 20ms to 5 seconds    maximum (as compared with 60 minutes for existing DHT\'s)\n- Node Identification guaranteed via PKI provided by MaidSafe-Passport (no Spartacus attacks)\n- Inbuilt machinery for rank system (remove misbehaving nodes)\n- Asymmetric encryption provided node identification to prevent Sybil attacks\n- Encrypted end to end communications\n- Encrypted per hop communications (at RUDP level using different keys)\n2^512 bit address space\n- Opportunistic caching (i.e. resistant to any denial of service attack)\n- Recursive algorithm, enabling simpler traversal of NAT routers\n- Send/Ack system to ensure message is checked as forwarded at any node (with zero speed impact on sending)\n- RUDP integration to provide resistance to \'man in the mi','Production ready: yes',0,NULL,NULL,0.00),
	(993,'C++ example of Kademlia','https://github.com/miguelfreitas/twister-core/tree/master/libtorrent/src/kademlia','Open source project:https://github.com/miguelfreitas/twister-core/graphs/contributors','Open source project:https://github.com/miguelfreitas/twister-core/graphs/contributors','https://github.com/miguelfreitas/twister-core/graphs/contributors','Distributed Hash Table','Kademlia','Cpp,','compiler version(GCC 4.3.3)','10/18/2015','V0.9.31',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(994,'DistAlgo Distributed Hash Table','https://github.com/nitin-aggarwal/Kademlia','Nitin Aggarwal','nitin3588.aggarwal@gmail.com','','Distributed Hash Table','Kademlia','DistAlgo,','','5/20/2012','1',NULL,'1260','671','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(995,'Kademlia DHT Implementation','https://github.com/nictuku/dht','Yves Junqueira','yves.junqueira@gmail.com','https://plus.google.com/+YvesJunqueira/posts','Distributed Hash Table','Kademlia','Go,','Go-1.1','9/15/2015','v1.0',NULL,'3236','1980','Windows, Mac OS, Linux','It is implemented in Go language. It is well documented and tested for correctness. It\'s typically used by a torrent client such as Taipei-Torrent, but it could also be used by a standalone DHT routers, or for other more creative purposes.','',0,NULL,NULL,0.00),
	(996,'Kademlia','https://code.google.com/p/openkad/','Gilga','Gilga1983@gmail.com','','Distributed Hash Table','Kademlia','Java,','1.6','3/3/2012','1',NULL,'1000','1000','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(997,'kadOh','https://github.com/jinroh/kadoh/tree/master/lib/dht ( DHT link) https://github.com/jinroh/kadoh ( project link)','Pierre Guilleminot','','https://github.com/jinroh (has another implementation for Bittorrent)','Distributed Hash Table','Kademlia (https://pdos.csail.mit.edu/~petar/papers/maymounkov-kademlia-lncs.pdf)','JavaScript,','','2/28/2012','0.1',NULL,'35000','23000','Linux, Web Based','This is my favourite implementation of the Kademlia protocol after the bittorrent applications use of it ( which I didnt find) but this offers a more general implementation where anyone can use to build their mobile applications. It answers the question of starting a peer to peer on a mobile device. They have very well explained documentation and interactive website that explains each of their design decisions. Their code can be better documented and their DHT implementation especially can be better explained. Kademlia has a lot of similarities to Chord interms of its lookup for closer nodes more than further away. 	 is a very nice article on the difference between Chord and Kademlia algorithms especially in their difference in routing tables. Joining and leaving is easier in Kademlia than in CHord.','Fault Tolerant : yes\nComplete Implementation : almost\nActive Development - yes\nAcademic Project : no',0,NULL,NULL,0.00),
	(998,'Kademlia','https://github.com/bmuller/kademlia','Brian muller','','http://findingscience.com','Distributed Hash Table','Kademlia','Python,','','6/27/2015','0.0.0',NULL,'1557','900','Linux','This is a reasonable implementation of the kademlia algotithm for DHS. It still seems to have active development. It has a clean website but has limited API support for any applications we want to build on top of it. But it is easy to run and the code is easy to understand, so additional improvements can be made. Still this is a toy project that can be modified for real world applications but it is not really been built as such and future modifications would be needed but this is still a good implementation of a famous algorithm. Used in protocols like Bittorrent but is vulnerable to Sybil Attack.','Fault Tolerant : mostly ( property of algorithm, meant for faulty networks )\nComplete Implementation : yes\nActive Development - yes\nAcademic Project : maybe',0,NULL,NULL,0.00),
	(999,'Kademlia/Mainline DHT node in Go.','https://github.com/nictuku/dht','Yves Junqueira','yves.junqueira@gmail.com','https://plus.google.com/+YvesJunqueira/','Distributed Hash Table','Kademlia algorithm','Go,','1.1','1/1/2012','',NULL,'3086','2900','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1001,'BitTorren DH Library','https://github.com/jech/dht','Juliusz Chroboczek','jch@pps.jussieu.fr','http://www.pps.univ-paris-diderot.fr/~jch/software/','Distributed Hash Table','Kademlia, Mainline variant','C,','','8/18/2015','0.24',NULL,'3000','2700','Linux','','',0,NULL,NULL,0.00),
	(1002,'Kademlia/Mainline DHT node in Go','https://github.com/nictuku/dht','Yves Junqueira','yves.junqueira@gmail.com','http://google.com/+YvesJunqueira','Distributed Hash Table','Kademlia','Go,','','9/5/2015','1',NULL,'','','Linux','Uses a novel XOR based metric topology which is used for node lookup queries','',0,NULL,NULL,0.00),
	(1003,'Kademlia','https://github.com/bmuller/kademlia','Brian Muller','bamuller@gmail.com','http://findingscience.com/','Distributed Hash Table','Kademlia\'s algorithm','Python,','2.7.2','10/14/2015','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1005,'Distributed Hash Tables','https://github.com/bmuller/kademlia','Brian Muller','bamuller@gmail.com','http://findingscience.com','Distributed Hash Table','Kamdelia','Python,','2.7','10/16/2015','1.0.0',NULL,'984','814','Linux','Asynchronous Python implementation of the Kademlia distributed hash table. It uses Twisted to provide asynchronous communication. The nodes communicate using RPC over UDP to communiate, meaning that it is capable of working behind a NAT.','',0,NULL,NULL,0.00),
	(1006,'Python-p2p-koorde','https://github.com/pedrotgn/python-p2p/tree/master/koorde','Pedrotgn','','https://github.com/pedrotgn','Distributed Hash Table','Koorde','Python,','2.7','3/12/2011','1',NULL,'3580','1560','Windows, Mac OS, Linux','This is Python implementation of the Koorde (DHT) algorithm which is a Distributed hash table (DHT) system based on the Chord DHT and the De Bruijn graph (De Bruijn sequence). Inheriting the simplicity of Chord, Koorde meets O(log n) hops per node (where n is the number of nodes in the DHT), and O(log n/ log log n) hops per lookup request with O(log n) neighbors per node.','Koorde Algorithm: https://en.wikipedia.org/wiki/Koorde',0,NULL,NULL,0.00),
	(1007,'Light DHT in Python','https://github.com/drxzcl/lightdht','Not provided.','drxzclx@gmail.com','https://github.com/drxzcl','Distributed Hash Table','LightDHT : A lightweight Python implementation of the bittorrent DHT','Python,','Python 3','11/14/2013','1',NULL,'926','771','Windows, Mac OS, Linux','A lightweight Python implementation of Bittorrent distributed hashtable.\nWritten in Python completely and is nicely modularised.','Active development : yes.',0,NULL,NULL,0.00),
	(1008,'Pastry implementation in oversim','https://github.com/reines/oversim','Jamie Furnaghan','jamie@jamierf.co.uk','','Distributed Hash Table','Pastry','Cpp,','','1/20/2014','1',NULL,'6000','4000','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1010,'Pastry','http://www.freepastry.org/','','freepastry@cs.rice.edu','http://www.freepastry.org/','Distributed Hash Table','Pastry','Java,','Java - 5','3/19/2015','2.1',NULL,'5000','2300','Windows, Mac OS, Linux','Pastry provides efficient request routing, deterministic object location, and load balancing in an application-independent manner. Furthermore, Pastry provides mechanisms that support and facilitate application-specific object replication, caching, and fault recovery.','',0,NULL,NULL,0.00),
	(1011,'A pure Go implementation of the Pastry Distributed Hash Table','https://github.com/secondbit/wendy','paddy foran','paddy+github@paddy.io','http://paddy.io','Distributed Hash Table','Pastry Algorithm','Go,','1.0.3','1/1/2012','',NULL,'4901','4700','Mac OS, Linux','It is re-named as wendy.','',0,NULL,NULL,0.00),
	(1012,'Java implementation of Pastry','http://www.freepastry.org/FreePastry/#21','Peter Druschel, Andreas Haeberlen, Jeff Hoye, Sitaram Iyer, Alan Mislove, Animesh Nandi, Ansley Post, Atul Singh (MPI-SWS and Rice University). Miguel Castro, Manuel Costa, Anne-Marie Kermarrec, Antony Rowstron (Microsoft Research, Cambridge, UK). Sitaram Iyer, Dan Wallach(Rice University). Y. Charlie Hu (Purdue University). Mike Jones, Marvin Theimer, Alex Wolman (Microsoft Research, Redmond, USA). Ratul Mahajan (University of Washington).','freepastry@cs.rice.edu','http://www.freepastry.org/','Distributed Hash Table','Pastry Algorithm','Java,','Java 5','3/13/2009','2.1',NULL,'175036','82382','Windows, Mac OS, Linux','Pastry is a generic, scalable and efficient substrate for peer-to-peer applications. Pastry nodes form a decentralized, self-organizing and fault-tolerant overlay network within the Internet. Pastry provides efficient request routing, deterministic object location, and load balancing in an application-independent manner. Furthermore, Pastry provides mechanisms that support and facilitate application-specific object replication, caching, and fault recovery.','original paper : http://www.freepastry.org/PAST/pastry.pdf',0,NULL,NULL,0.00),
	(1013,'Pastry Distributed Hash Table','https://github.com/secondbit/wendy','Paddy','paddy+github@paddy.io','http://paddy.io','Distributed Hash Table','Pastry Distributed Hash Table','Go,','Go 1.1','5/16/2013','1',NULL,'4901','2200 approx','Mac OS, Linux','1. It uses nothing outside of the Go standard library.','',0,NULL,NULL,0.00),
	(1015,'Chimera','http://current.cs.ucsb.edu/projects/chimera/','Krishna Puttaswamy, Gayatri Swamynathan, Matthew Allen and Prof. Ben Zhao','ravenben@cs.ucsb.edu (one of the developers)','http://current.cs.ucsb.edu/','Distributed Hash Table','Tapestry','C,','','10/17/2005','1.2',NULL,'5286','3918','Windows, Linux','1. Chimera is a light-weight C implementation of a \"next-generation\" structured overlay that provides similar functionality as prefix-routing protocols.\n2. provides efficient detection of node and network failures, and reroutes messages around them to maintain connectivity and throughput.','Development: Active\nDocumentation: yes\nUse: Academic/Practical',0,NULL,NULL,0.00),
	(1016,'DHT implementation in Erlang','https://github.com/jlouis/dht','Jesper Louis Andersen','jesper.louis.andersen@gmail.com','http://jlouisramblings.blogspot.com/','Distributed Hash Table','unknown','Erlang,','Erlang 18+','10/20/2015','1',NULL,'','','Windows, Linux','This implementation was taken from a larger etorren application and then extensively modified to enable automated verification via model checking.','',0,NULL,NULL,0.00),
	(1017,'Chimera','http://current.cs.ucsb.edu/projects/chimera/','Krishna Puttaswamy, Gayatri Swamynathan, Matthew Allen, Prof. Ben Zhao','','http://www.cs.ucsb.edu/~ravenben/ http://www.cs.ucsb.edu/~msa http://www.cs.ucsb.edu/~gayatri http://www.cs.ucsb.edu/~krishnap','Distributed Hash Table','Tapestry(DHT)','C,','GCC(any)','8/1/2013','1.2',NULL,'10000','8745','Windows, Mac OS, Linux','Chimera is an implementation of Tapestry which is a peer-to-peer overlay network which provides a distributed hash table, routing, and multicasting infrastructure for distributed applications.','',-1,NULL,NULL,0.00),
	(1018,'kademlia - Python Distributed Hash Table','https://github.com/bmuller/kademlia','Brian Muller','bamuller@gmail.com','http://findingscience.com/about.html','Distributed Hash Table','Kademlia distributed hash table algorithm','Python,','Python-2.7','6/27/2015','0.5',NULL,'1153','723','Windows, Mac OS, Linux','Kademlia is a UDP-based peer-to-peer communications protocol, a variation on the DHT (distributed hash table). It is distinguished by its use of XOR as a metric.','Node communication : RPC over UDP (https://github.com/bmuller/rpcudp)',0,NULL,NULL,0.00),
	(1019,'Java example for distributed hash table','https://github.com/rahul-derashri/Simple-DHT/tree/master/SimpleDht','Rahul Derashri','rahul.derashri@gmail.com','https://github.com/rahul-derashri','Distributed Hash Table','The chord algorithm','Java,','1.8','9/20/2015','1',NULL,'3474','2850','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1020,'TomP2P : A Java P2P-based high performance key-value pair storage library','https://github.com/tomp2p/TomP2P','Thomas Bocek','Not provided.','http://tomp2p.net','Distributed Hash Table','Decentralized key-value infrastructure for distributed applications','Java,','Java 7','10/22/2015','1',NULL,'50000','40000','Windows, Mac OS, Linux','P2P library and a distributed hash table (DHT) implementation.\nWritten completely in Java, little bit hard to understand because they is quite a bit of code in here, read only a few parts of it.','',0,NULL,NULL,5.00),
	(1021,'MIT Chord/DHash - DHT','https://github.com/sit/dht','https://github.com/sit','sit@emilsit.net','https://github.com/sit','Distributed Hash Table','Chord','Cpp,','C++ 2003','4/4/2008','1',NULL,'7967','6199','Linux','The chord implementation is subproject of the main project that implements chord lookup service and cooperative file system from MIT.\n\nApart from DHT implementation, it also provides  node-to-node RPC service based on SFS asynchronous RPC. Within chord implementation, it has implemented extensible API for maintaining routing tables and node joins/removal, which can be integrated easily.','',0,NULL,NULL,0.00),
	(1022,'Go-Chord','https://github.com/armon/go-chord','Armon Dadgar','armon.dadgar@gmail.com','','Distributed Hash Table','Chord','Go,','','11/23/2013','1',NULL,'2540','2410','Windows, Linux','very well documented.','',0,NULL,NULL,0.00),
	(1024,'C Implementation Distributed Hash Tables','https://github.com/sit/dht/tree/master/chord','Emil Sit','','https://github.com/sit','Distributed Hash Table','chord algorithm','Cpp,','11','9/5/2007','1.0+',NULL,'6000','4000','Windows, Mac OS, Linux','experimental implementation of the Chord lookup service and the cooperative file system. MIT implementation and active development with developer list','',0,NULL,NULL,0.00),
	(1025,'NodeJS chord implementation','https://github.com/optimizely/chord/blob/master/chord.js','Brian Ollenberger','','https://github.com/optimizely','Distributed Hash Table','Chord algorithm','NodeJS,','4..2.2','8/7/2013','1',NULL,'350','240','Windows, Mac OS, Linux','Implement successor lists for increased fault tolerance. very well documented and tested.','',0,NULL,NULL,0.00),
	(1027,'Python Chord example','https://github.com/gaston770/python-chord/blob/master/chord.py','Gaston Ingaramo','gaston770@gmail.com','','Distributed Hash Table','Chords algorithm','Python,','2.7','3/3/2014','1',NULL,'150','120','Windows, Mac OS, Linux','The chord implementation is simple and direct implementation for lookup, notify and stabilize.','',0,NULL,NULL,0.00),
	(1028,'Java implementation of Distributed Hash Table.','https://github.com/alevy/donut','Amit Levy','https://github.com/alevy/donut','http://www.amitlevy.com','Distributed Hash Table','Donut- chord varient.','Java,','Latest','2/1/2009','1',NULL,'6000','5500','Linux','','',0,NULL,NULL,0.00),
	(1029,'kai','http://kai.wiki.sourceforge.net/','Takeru Inoue','','https://sites.google.com/site/takeruinoue/','Distributed Hash Table','Dynamo','Erlang,','R15B','7/19/2009','1',NULL,'2858','2208','Windows, Mac OS, Linux','More info implementation highlights in Readme','',0,NULL,NULL,0.00),
	(1030,'TomP2P','https://github.com/tomp2p/TomP2P','Thomas Bocek','tom@tomp2p.net','http://tomp2p.net. https://github.com/tbocek','Distributed Hash Table','Dynamo','Java,','Java6','10/22/2015','V 5.0 (Beta8)',NULL,'727','648','Windows, Mac OS, Linux','Direct and indirect replication.\nMesh-based distributed tracker.\nData protection based on signatures.\nXOR-based iterative routing similar to Kademlia.\nStandard and extended and customizable DHT operations supported\nSelective get() using min-max or Bloom filters\nNetwork operations support the listenable future objects concept.','',0,NULL,NULL,0.00),
	(1031,'Riak','https://github.com/basho/riak','Jared Morrow and Andy Gross','https://twitter.com/_jared , andy@andygross.org','https://github.com/jaredmorrow ,http://github.com/argv0','Distributed Hash Table','Dynamo','Erlang,','Patched version of Erlang (available in Riak site)','8/4/2015','V 2.1.0',NULL,'349','255','Windows, Mac OS, Linux, various flavours of Linux (Ubuntu, Debian, Redhat,suse, Solaris etc.), Mac Fedora, Smart OS.','High Availability, Scalability, fault Tolerance,Operational Simplicity,Masterless,\nIntelligent Replication,Consistent Hashing,Automatically Re-Distributes Data When Capacity is Added','',0,NULL,NULL,0.00),
	(1032,'Distributed Hash Table','','Juliusz Chroboczek','jch@pps.jussieu.fr','https://github.com/jech','Distributed Hash Table','Kademlia','C,','1998','5/18/2015','0.24',NULL,'3538','2877','Windows, Mac OS, Linux','The library is used by almost all the major bit-torrent applications. The library works well even in NAT(network address translation) based environments. In these environments, typically, the node will have local ip address and the application, when accessing internet will pass through another gateway like node and only this NAT node address will be visible to other nodes outside NAT. So this library even handles that case as well, where there are multiple nodes behind NAT, and they might appear to be from same source to nodes outside NAT.','',0,NULL,NULL,0.00),
	(1033,'Kademlia/Mainline DHT','https://github.com/nictuku/dht','Yves Junqueira','yves.junqueira@gmail.com','https://plus.google.com/+YvesJunqueira/posts','Distributed Hash Table','Kademlia DHT','Go,','G0 1.1','9/5/2015','1',NULL,'3086','1800','Windows, Mac OS, Linux','The DHT performs well and supports the most important features despite its simple API.','Documentation : https://godoc.org/github.com/nictuku/dht\nA simple Example : https://github.com/nictuku/dht/blob/master/examples/find_infohash_and_wait/main.go',0,NULL,NULL,0.00),
	(1034,'Kademlia','https://github.com/jech','Juliusz Chroboczek','jch@pps.univ-paris-diderot.fr','https://github.com/jech,  http://www.pps.univ-paris-diderot','Distributed Hash Table','Kademlia','C,','','8/18/2015','',NULL,'3057','2680','Windows, Mac OS, Linux','Nothing works well across NATs, but Kademlia is somewhat less impacted than\nmany other protocol','',0,NULL,NULL,0.00),
	(1035,'Chimera (as implementation of Tapestry)','http://current.cs.ucsb.edu/projects/chimera/index.html','Ben Zhao, Krishna Puttaswamy','ravenben@cs.ucsb.edu','http://www.cs.ucsb.edu/~ravenben/; https://sites.google.com/site/krishnapnputtaswamy/home','Distributed Hash Table','Tapestry DHT algorithm','C,','C99','2/16/2006','1.2',NULL,'6031','4856','Windows, Linux','Chimera is a light-weight C implementation of a \"next-generation\" structured overlay that provides similar functionality as prefix-routing protocols Tapestry and Pastry. It provides efficient detection of node and network failures, and reroutes messages around them to maintain connectivity and throughput.','',0,NULL,NULL,0.00),
	(1036,'Varient of Kademilia -DHT','https://github.com/jech/dht','Juliusz Chroboczek','https://github.com/jech/dht','http://www.pps.univ-paris-diderot.fr/~jch/software/','Distributed Hash Table','Kademelia variant,','C,','C89','1/1/2010','1',NULL,'10000','10000','Linux','','',0,NULL,NULL,0.00),
	(1037,'Chord Distributed Hash Table(Brian Ollenberger)','https://github.com/optimizely/chord','Brian Ollenberger','','','Distributed Hash Table','Chord','NodeJS,','Node.js >= 0.10.x','8/7/2013','v0.1.2',NULL,'378','308','Windows, Mac OS, Linux','It is well documented and well tested. Testing code is also available. It provides the ability to construct a Chord cluster and to route application layer messages to a process responsible for a range of keys. It supports virtual nodes and uses UDP as its out-of-process transport layer.','',0,NULL,NULL,0.00),
	(1038,'Entangled','http://sourceforge.net/projects/entangled/','Francois Aucamp','faucamp@csir.co.za','','Distributed Hash Table','Kademlia','Python,','','1/31/2008','0.1',NULL,'3060','1408','Windows, Mac OS, Linux','Entangled is a distributed hash table (DHT) based on Kademlia, as well as a peer-to-peer tuple space implementation. This can be used as a base for creating peer-to-peer (P2P) network applications that require synchronization and event handling (such as distributed resource provisioning systems) as well as applications that do not (such as file sharing applications).\n\nEntangled extends basic Kademlia by adding a \"DELETE\" RPC, allowing (key, value) pairs to be deleted from the DHT. It also adds some useful higher-level features onto the base DHT:\n- Keyword-aware operations: allows keyword-based operations (publish, search, remove)\n- Distributed Tuple Space: a fully distributed, peer-to-peer tuple space implementation','',0,NULL,NULL,0.00),
	(1040,'C++ Raft','http://www.rethinkdb.com/','Multiple contributors','NA','NA','Distributed Consensus','Raft','Cpp,','','','2.1',NULL,'','','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1041,'Distributed consensus - RAFT','https://github.com/coreos/etcd','Xiang Li','xiangli.cs@gmail.com','http://xiangli.co','Distributed Consensus','RAFT','Go,','','12/4/2013','',NULL,'1681038','1642905','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1042,'Distributed Hash table','http://roma-kvs.org/','Multiple contributors','','','Distributed Hash Table','DHT','Ruby,','','','1.2.0',NULL,'','','Mac OS, Linux','','',-1,NULL,NULL,0.00),
	(1043,'DistAlgo example lamutex original','https://sourceforge.net/p/distalgo/git/ci/master/tree/examples/lamutex/orig.da','Bo Lin and Yanhong Liu','liu@cs.stonybrook.edu','http://www.cs.stonybrook.edu/~liu','Distributed mutual exclusion','Lamport\'s algorithm','DistAlgo,','DistAlgo-1.0.9b14','2/26/2015','1',NULL,'63','38','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1044,'C implementation of Needham-shrodner','https://github.com/abender/needham-schroeder','Andreas Bender','https://github.com/abender/needham-schroeder','https://github.com/abender/needham-schroeder','Security Protocol','Needham-schroeder.','C,','1','1/1/2010','1',NULL,'10000','1000','Linux','','',0,NULL,NULL,0.00),
	(1045,'Log Cabin','https://github.com/logcabin/logcabin','Diego Ongaro','ongardie@gmail.com','https://ongardie.net/','Distributed Consensus','RAFT','Cpp,Python,','Python 2.7','6/25/2012','',NULL,'1628071','1490797','Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1046,'BitTorrent','https://github.com/bmuller/kademlia','Brian Muller','bamuller@gmail.com','http://findingscience.com','Distributed Hash Table','Kademelia','Python,','','1/2/2014','1',NULL,'1048','609','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1047,'Chord(Stathis Maroulis)','https://github.com/stathisq/Chord','Stathis Maroulis','stathisq@gmail.com','https://github.com/stathisq','Distributed Hash Table','DHT','Java,','Java 1.7','6/27/2014','1',NULL,'2558','2273','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1048,'Graphical Visualization of RAFT','https://github.com/ongardie/raftscope','Diego Ongaro','ongardie@gmail.com','https://ongardie.net/','Distributed Consensus','RAFT','JavaScript,','','5/21/2014','',NULL,'48824','40560','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1049,'webrtc-chord','https://github.com/tsujio/webrtc-chord/blob/master/src/Chord.js','Naoki Tsujio','ntsujio@gmail.com','https://github.com/tsujio','Unknown','decentralizing distributed system and providing lookup service','JavaScript,','PeerJS>=0.3.9','7/5/2014','v1.0.0',NULL,'185','155','Windows, Mac OS, Linux','Webrtc-chord depends on: Lo-Dash sha256.js of crypto-js libraries and PeerJS\nRequirements:  WebRTC,PeerJS library, PeerServer.\nLicense:The MIT License (MIT)','\" debug: false\"\n\"numberOfEntriesInSuccessorList: 3\"\n\" connectionPoolSize: 10\"\n\"connectionOpenTimeout: 30000\"\n\"requestTimeout: 180000\"\n\"stabilizeTaskInterval: 30000\"\n\" fixFingerTaskInterval: 30000\"\n\"checkPredecessorTaskInterval: 30000\"',0,NULL,NULL,0.00),
	(1050,'Xerox PARC Dragon','http://www.disi.unige.it/person/DelzannoG/CacheProtocol/dragon.hy','Giorgio Delzanno','','http://www.disi.unige.it/person/DelzannoG/protocol.html','Cache Coherence','This protocol uses a write-back policy.','HyTech,','1.04','5/16/2000','1',NULL,'140','132','Linux','','',0,NULL,NULL,0.00),
	(1051,'Java example for needham_schroeder protocol','https://github.com/telnicky/expanded_needham_schroeder','Travis Elnicky','','https://github.com/telnicky','Security Protocol','symmetric encryption algorithm','Java,','1.7','11/8/2013','1',NULL,'1404','1071','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1052,'seNS - a simple extended Needham-Schroeder C-library','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','http://www-ucc.ch.cam.ac.uk/members/ab454','Security Protocol','Needham-Schroeder protocol','C,','C99','5/18/2014','1',NULL,'','','Mac OS, Linux','seNS is a small and simple C-library to perform an extended (symmetric) Needham-Schroeder(NS)-protocol. Extended means, that the basic NS-Protocol has been extended to make use of timestamps, which are used to solve several vulnerabilities by the original protocol.','Use of Timestamps : To solve vulnerabilities of the original protocol.',0,NULL,NULL,0.00),
	(1053,'Python Implementation of Diffie-Hellman key exchange','https://pypi.python.org/pypi/pytickets/0.9.2.1','Krister Hedfors','','http://tripleaes.com/cgi-sys/suspendedpage.cgi','Key Exchange','Diffie-Hellman key exchange','Python,','Python 2.7','1/17/2012','0.9',NULL,'2922','2426','Windows, Mac OS, Linux','Python library implements Diffie-Hellman key exchange','',0,NULL,NULL,0.00),
	(1054,'Diffie-Hellman Key Exchange Protocol in Python','http://sublimerobots.com/2015/01/simple-diffie-hellman-example-python/','Noah Dietrich','','','Key Exchange','Diffie-Hellman','Python,','3','1/3/2015','1',NULL,'33','21','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1055,'Implementaion of Needham-Schroeder Symmetric Key Protocol','http://cryptyc.cs.depaul.edu/ns.html','Andrew D. Gordon','adgXmicrosoft.com where X=@','https://onedrive.live.com/view.aspx/adg?cid=c6149b019d236bf5','Security Protocol','Needham-Schroeder Symmetric Key Protocol','Java,','Java 5','9/13/2004','1.1',NULL,'','164','Windows, Mac OS, Linux','This is a variant of the Needham-Schroeder Symmetric Key Protocol,using message tags rather than nonce arithmetic.  The protocol allows\n the server S to generate a session key Kab for use by A and B.','',0,NULL,NULL,0.00),
	(1056,'msl/DiffieHellmanExchange','https://github.com/Netflix/msl/blob/master/core/src/main/java/com/netflix/msl/keyx/DiffieHellmanExchange.Java','Ntflix OSS','','https://github.com/Netflix','Key Exchange','Diffie Hellman','Java,JavaScript,','','10/5/2015','v1.1198',NULL,'600','450','Web API and support for most browsers.','There are lot of security protocols implemented in this MSL library, best collection available online in 1 place but I was interested in Diffie-hellman simply because it is one of my favourite crypto algorithms, mainly because it is quick and provides perfect forward secrecy. Even though both RSA and DH depend on hard problems of Prime Factorization and discrete Log, the elegance of DH is why I have chosen DH as one of the implementations I have put up over other key exchange protocols.','',0,NULL,NULL,0.00),
	(1057,'CSRP','https://github.com/cocagne/csrp','Tom Cocagne','tom.cocagne@gmail.com','https://github.com/cocagne','Authentication','Secure Remote Password protocol (version 6a)','C,','C99','3/14/2013','1',NULL,'1099','780','Windows, Mac OS, Linux','SRP is a cryptographically strong authentication protocol for password-based, mutual authentication over an insecure network connection.','',0,NULL,NULL,0.00),
	(1058,'MMATRIXSSL- OPEN SOURCE EMBEDDED SSL','http://www.matrixssl.org/','PeerSec Networks is','contact@peersec.com','','Security Protocol','OPEN SOURCE EMBEDDED SSL','C,','','7/15/2015','3.7.2B',NULL,'65181','63000','Windows, Mac OS, Linux, FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX, BREW','MatrixSSL is the only open-source SSL implementation designed specifically for use in embedded environments. There are existing open-source SSL implementations available and there are existing embedded SSL implementations, but there was a notable absence of packages that offer both.','',0,NULL,NULL,0.00),
	(1059,'Berkeley RISC','http://www.disi.unige.it/person/DelzannoG/CacheProtocol/berkeley.hy','Giorgio Delzanno','','http://www.disi.unige.it/person/DelzannoG/protocol.html','Cache Coherence','Berkeley Reduced Instruction Set Computation','HyTech,','1.04','5/16/2000','1',NULL,'88','75','Linux','Techniques developed for and alongside the idea of the reduced instruction set have also been adopted in successively more powerful implementations and extensions of the traditional \"complex\" x86 architecture.','',0,NULL,NULL,0.00),
	(1060,'node-srp  (Secure Remote Protocol)','https://github.com/mozilla/node-srp','mozilla','','','Key Exchange','SRP Authentication and Key Exchange System','JavaScript,','','9/11/2013','0.2.0',NULL,'1200','850','Windows, Mac OS, Linux','SRP is one of my favorite security protocols. It uses a modification of the Diffie-Hellman protocol for the task of password verification without actually send the password over the network. Since it is developed in JavaScript, it is suitable to be deployed over the web. This implementation is currently mostly beign used by Mozzila Browsers for their authentication purposes. Since any SRP has two phases, the account creation phase where the client sends its identifier, password and salt and constructs a verifier and sends it to the server. As you can see that the password is never sent. The second phase or the login phase where the client uses the password and the server uses the verifier to confirm the clients identity. the API for both these phases have been clearly detailed in the documentation and that is all that is needed for the success of this algorithm.','',0,NULL,NULL,0.00),
	(1061,'Simple Paxos','https://github.com/xiang90/paxos','Xiang Li','xiangli.cs@gmail.com','http://xiangli.co','Distributed Consensus','Paxos','Go,','1.4','12/29/2014','1',NULL,'350','300','Linux','Not well commented code but simple and direct implementation of Paxos in GO','',0,NULL,NULL,0.00),
	(1062,'needham-schroeder needham','https://github.com/abender/needham-schroeder/blob/master/needham.c','Andreas Bender','bender86@arcor.de','https://github.com/abender','Security Protocol','Needham-Schroeder(NS)-protocol','C,','unknown','5/18/2014','1',NULL,'1320','1027','Mac OS, Linux','It extended the basic NS-Protocol to make use of timestamps, which are used to solve several vulnerabilities by the original protocol.','\"NS_BLOCKSIZE :16 \"\n\"NS_KEY_LEN: 16    \"\n\"NS_RIN_KEY_LEN :16\"\n\"NS_IDENTITY_LEN :16\"\n\"NS_NONCE_LEN :16 \"\n\"NS_CCM_L: 2\"\n \"NS_CCM_N: (15 - NS_CCM_L) \"\n\"NS_CCM_M: 8 \"\n\"NS_TIMESTAMP_LEN: 8\"',0,NULL,NULL,0.00),
	(1063,'Needham‚ÄìSchroeder','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','bender86@arcor.de','Security Protocol','Needham‚ÄìSchroeder','C,','','5/18/2015','1',NULL,'3256','3015','Linux','this implementation is the extended version of that the basic NS-Protocol. It uses timestamps, which are used to solve several vulnerabilities by the original protocol.','',0,NULL,NULL,0.00),
	(1064,'grempe/secretsharing','https://github.com/grempe/secretsharing','Glenn Rempe','','https://www.rempe.us','Security Protocol','Shamir Secret Sharing','Ruby,','','1/13/2015','1.0.0.0',NULL,'1400','1080','Windows, Mac OS, Linux','This is a very good implementation of the Shamirs secret Sharing algorithm. I chose this algorithm simply because I felt it is one of the few Security protocols that actually have a distributed Flavor. It answers a classic problem of a distributed authentication server where compromise of 1 server does not reveal the key or bring down the service. It is not used a lot in practical application mostly due to its high maintenance when hashing and storing passwords is a much simpler mechanism. This implementation has most of the primitives needed : Encode that takes a secret, asks for the number of shares and generation of these shares. Decode - given the correct number of shares, it decodes the secret. it is based on the idea that k points are requires to solve a k+1 degree polynomial.','',0,NULL,NULL,0.00),
	(1065,'RSA','https://gist.github.com/avalonalex/2122098','Yuhan Hao','yuhanhao@gmail.com','https://github.com/avalonalex','Security Protocol','N/A','Python,','2.7.*','3/19/2012','1',NULL,'302','193','Windows, Mac OS, Linux','This implementation is for educational purpose, and is not intended for real world use.','',0,NULL,NULL,0.00),
	(1066,'Diffie-Hellman key exchange in OpenSSl','https://www.openssl.org/docs/manmaster/crypto/dh.html','OpenSSL Software Foundation','','https://www.openssl.org/','Key Exchange','Diffie-Hellman protocol','C,Cpp,','','11/8/2015','1.1.0',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1067,'Diffie-Hellman key exchange in Crypto++','https://cryptopp.com/wiki/Diffie-Hellman','Wei Dei, Open Source, Public Domain','','http://www.weidai.com/','Key Exchange','Diffie-Hellman','Cpp,','','8/31/2015','5.6.2',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1068,'Diffie-Hellman key exchange in Bouncy Castle','http://www.bouncycastle.org/java.html','The Legion of the Bouncy Castle','feedback-crypto@bouncycastle.org','http://www.bouncycastle.org/java.html','Key Exchange','Diffie-Hellman','Java,','JDK1.1+','11/6/2015','1.53',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1069,'OpenSSH','http://www.openssh.com/','OpenBSD team (Main Contributors :  Bj√∂rn Gr√∂nvall, Theo de Raadt, Niels Provos)','bg@sics.se','http://dblp.uni-trier.de/pers/hd/g/Gr=ouml=nvall:Bj=ouml=rn','Security Protocol','OpenSSH (a FREE version of the SSH protocol)','C,','C11','8/21/2015','7.1',NULL,'','','Mac OS, Linux','OpenSSH, also known as OpenBSD Secure Shell, is a suite of security-related network-level utilities based on the SSH protocol, which help to secure network communications via the encryption of network traffic over multiple authentication methods and by providing secure tunneling capabilities.','',0,NULL,NULL,0.00),
	(1070,'Needham-Schroeder protocol in C','https://github.com/abender/needham-schroeder','Andre Bender','','https://github.com/abender','Security Protocol','Needham-Schroeder','C,','C','5/18/2014','1',NULL,'6704','5468','Mac OS, Linux','Didn\'t have time to read the code, cannot write information here.','No active development',0,NULL,NULL,0.00),
	(1071,'Needham-Schroeder protocol in Java','https://github.com/abender/needham-schroeder','Travis Elnicky','Not Provided.','https://github.com/telnicky','Security Protocol','Needham-Schroeder protocol in Java','Java,','Java 7','11/8/2014','1',NULL,'1505','1203','Windows, Mac OS, Linux','Written in Java and has parts well separated.','Active Dev : No.',0,NULL,NULL,0.00),
	(1072,'Needham-Schroeder-Lowe in Python','https://github.com/teddziuba/pqauth','Ted Dziuba','ted@teddziuba.com','https://github.com/teddziuba','Security Protocol','Needham-Schroeder-Lowe Protocol','Python,','Python 3','4/3/2013','1',NULL,'605','432','Mac OS, Linux','Written in Python and is well documented.','Used in industry. No active development presently.',0,NULL,NULL,0.00),
	(1073,'Secure Remote Password Protocol','http://srp.stanford.edu/','Stanford University','tjw@cs.Stanford.EDU','http://srp.stanford.edu/','Security Protocol','N/A','C,BourneShell,','','','2.1.2',NULL,'142208','102050','Windows, Mac OS, Linux','Performs secure remote authentication of short human-memorizable passwords and resists both passive and active network attacks. Because SRP offers this unique combination of password security, user convenience, and freedom from restrictive licenses, it is the most widely standardized protocol of its type.','',0,NULL,NULL,0.00),
	(1074,'Secure Remote Password Protocol','https://github.com/mozilla/node-srp','Jed Parsons','https://github.com/mozilla/node-srp','http://jedparsons.com/','Security Protocol','Secure Remote Password Protocol.','C,','c89','1/10/2008','1',NULL,'2.5K','2.2K','Linux','','',0,NULL,NULL,0.00),
	(1075,'Cryptlib','https://www.cs.auckland.ac.nz/~pgut001/cryptlib/','Peter Gutmann','pgut001@cs.auckland.ac.nz','https://www.cs.auckland.ac.nz/~pgut001/','Security Protocol','SSL / TLS','C,','GCC(any)','12/17/2012','3.4.2',NULL,'~15231','~11300','Windows, Mac OS, Linux','Cryptlib is an opensource security protocols toolkit library which includes a robust implementation for SSL/TLS. Active since 1995.','Status : Beta\nCurrent Beta: 3.4.3',0,NULL,NULL,0.00),
	(1076,'GNUTLS','https://gitlab.com/gnutls/gnutls.git, http://gnutls.org/','GNUTLS Project, Free software foundation','','http://www.fsf.org/','Security Protocol','SSL / TLS','C,','GCC(Any)','9/1/2015','3.4.5',NULL,'~10500','~8550','Windows, Mac OS, Linux','','Status: Active',0,NULL,NULL,0.00),
	(1077,'OpenSSL','https://openssl.org','Eric Young, Tim Hudson, Sun, OpenSSL project','','','Security Protocol','SSL / TLS','C,Assembly,','GCC(any)','7/9/2015','1.02d',NULL,'~15255','~11211','Windows, Mac OS, Linux','One of the most popular opensource implementations of SSL/TLS.','Status: Active',0,NULL,NULL,0.00),
	(1078,'Java Needham-Schroeder','https://code.google.com/p/pki-java/source/browse/trunk/pki-java/src/CryptoAPI/NeedhamSchroeder.java?r=53','Robin David','mail.robin.david@gmail.com','','Security Protocol','Needham-Schroeder','Java,','','1/1/2012','',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1079,'Kerberos Implementation','https://github.com/mkomitee/wsgi-kerberos','Michael Komitee','mkomitee@gmail.com','http://thoughts.cc/','Security Protocol','Kerberos','Python,','2.7.6','6/29/2015','1.1.1',NULL,'480','370','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1080,'PqAuthentication','https://github.com/teddziuba/pqauth','Ted Dziuba','ted@teddziuba.com','https://plus.google.com/110996344704875278918/posts','Security Protocol','NS protocol','Python,','2.7','5/3/2013','1',NULL,'~800','~650','Windows, Mac OS, Linux','Requirements: Django','\"Developer Claim: \'Web APIs and their clients can authenticate eachother using SSH keys, and agree on a *session key*, a temporary authentication token that the client sends along with API requests\' \"',0,NULL,NULL,0.00),
	(1081,'Expanded Needham Schroeder','https://github.com/telnicky/expanded_needham_schroeder','Travis Elnicky','https://github.com/telnicky','Not Available','Security Protocol','Expanded Needham Schroeder','Java,','7','11/8/2013','1',NULL,'~1500','~1400','Windows, Mac OS, Linux','Has attack simulation which facilitates in the better understanding of the protocol.','\"Helps in understanding the protocol better: Yes\" , \"Extends protocol learned in class: yes\"',0,NULL,NULL,0.00),
	(1082,'C example Kerberos','https://github.com/krb5/krb5','Open source implemnetation:https://github.com/krb5/krb5/graphs/contributors','Open source implemnetation:https://github.com/krb5/krb5/graphs/contributors','https://github.com/krb5/krb5/graphs/contributors','Security Protocol','Kerberos','C,','any version','10/9/2015','V5',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1083,'Kerberos: The Network Authentication Protocol','http://web.mit.edu/kerberos/','Kerberos Team','','http://web.mit.edu/kerberos/','Security Protocol','Kerberos','C,','','10/9/2015','1.14',NULL,'~555k','~391k','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1084,'C implementation of Kerberos','https://github.com/krb5/krb5','https://github.com/krb5/krb5 :MIT','https://github.com/krb5/krb5','https://github.com/krb5/krb5','Security Protocol','Kerberos algorithm','C,','C89','1/1/1985','gets constant update.',NULL,'20K','20K','Linux','','',0,NULL,NULL,0.00),
	(1085,'Implementation of Kerberos security protocol in Python','https://github.com/nloyolag/kerberos-protocol','No√© Loyola','','https://www.linkedin.com/in/nloyola','Security Protocol','Kerberos security protocol algorithm','Python,','2.6','10/26/2015','',NULL,'361','352','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1087,'Lowe\'s fixed version of Needham-Schroder Public Key','http://www.lsv.ens-cachan.fr/Software/spore/nspkLowe.html','Gavin Lowe','','','Security Protocol','Lowe\'s fixed version of Needham-Schroder Public Key','CommonSyntax,','','11/12/1995','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1088,'Lowe\'s modified version of Yahalom','http://www.lsv.ens-cachan.fr/Software/spore/yahalomLowe.html','Paulson','','','Security Protocol','Lowe\'s modified version of Yahalom','CommonSyntax,','','1/1/2001','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1089,'Cache Coherence','http://web.mit.edu/kerberos/','Tom Yu','','http://web.mit.edu/tlyu/','Security Protocol','Needham Schrodinger Protocol','Java,','1.7','10/9/2015','1.14',NULL,'>10,000','>10,000','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1090,'Implementation of an expanded Needham-Schroeder protocol in Java','https://github.com/telnicky/expanded_needham_schroeder','Travis Elnicky','','https://github.com/telnicky','Security Protocol','Needham-Schroder','Java,','','11/1/2013','',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1091,'Needham-Schroeder','https://github.com/telnicky/expanded_needham_schroeder','Travis Elnicky','','https://github.com/telnicky','Security Protocol','Needham-schroeder','Java,','','11/8/2013','1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1092,'Proverif Needham‚ÄìSchroeder protocol','http://prosecco.gforge.inria.fr/personal/bblanche/proverif/','Bruno Blanchet','Bruno.Blanchet@trap-inria.fr','http://prosecco.gforge.inria.fr/personal/bblanche/','Security Protocol','Needham‚ÄìSchroeder protocol','Caml,','4.02.3(Not sure)','9/13/2015','1.91',NULL,'219','141','Linux','None','None',0,NULL,NULL,0.00),
	(1093,'Needham‚ÄìSchroeder Implementation','https://github.com/naveends/ExtendedNeedhamSchroederAuthentication','Naveen','naveen.cse.csg@gmail.com','','Security Protocol','Needham‚ÄìSchroeder protocol','Java,','Java 6','12/10/2015','v1.0',NULL,'1046','600','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1095,'Needham-Schroeder Public Key','http://www.lsv.ens-cachan.fr/Software/spore/nspk.html','Roger Needham and Michael Schroeder','','','Security Protocol','Needham-Schroeder Public Key','CommonSyntax,','','12/12/2015','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1096,'A simple C-library to perform an extended variant of the Needham-Schroeder-protocol.','https://github.com/abender/needham-schroeder','Andreas Bender','','','Security Protocol','Needham-Schroeder-protocol','C,','','','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1097,'A simple C-library to perform an extended variant of the Needham-Schroeder-protocol','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','https://github.com/abender','Security Protocol','Needham-Schroeder-protocol','C,','','11/1/2013','',NULL,'6713','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1098,'Needham-Schroeder','https://github.com/abender/needham-schroeder','Andreas Bender','Not available','Not available','Security Protocol','NS','C,','C 11','5/18/2014','1',NULL,'~1500','~1300','Windows, Mac OS, Linux','It implements the extended version of the NS protocol','\"Code Understanding: Tough\"',0,NULL,NULL,0.00),
	(1099,'OpenSSL Implementation','https://github.com/openssl/openssl','Stephen Henson','','','Security Protocol','OpenSSL','C,','','7/9/2015','OpenSSL 1.1.0-dev',NULL,'400k','300k','Linux','It is official repository. It is well documented and well tested. It is easy to install and use. It is implemented in C and Perl.','',0,NULL,NULL,0.00),
	(1100,'Proverif OtwayRees protocol','http://prosecco.gforge.inria.fr/personal/bblanche/proverif/','Bruno Blanchet','Bruno.Blanchet@trap-inria.fr','http://prosecco.gforge.inria.fr/personal/bblanche/','Security Protocol','OtwayRees protocol','Caml,','4.02.3(Not sure)','9/13/2015','1.91',NULL,'203','130','Linux','None','None',0,NULL,NULL,0.00),
	(1101,'RSA Implementation','https://github.com/bendiken/rsa','Arto Bendiken','arto@bendiken.net','https://github.com/bendiken','Security Protocol','RSA protocol','Ruby,','1.9.1+','10/17/2010','0.1.4',NULL,'788','297','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1102,'ssh2','https://github.com/mscdex/ssh2','Brian White','','','Security Protocol','ssh','JavaScript,','JavaScript 1.8','11/11/2012','ssh2-0.4.12',NULL,'4194','3503','Windows, Mac OS, Linux','SSH2 client and server modules written in pure JavaScript for node.js','',0,NULL,NULL,0.00),
	(1103,'Web API Authentication with SSH Public Keys','https://github.com/teddziuba/pqauth','Ted Dziuba','ted@teddziuba.com','https://plus.google.com/110996344704875278918/posts','Security Protocol','SSH Public Keys','Python,','','','1',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1104,'Java example SSL','http://hg.openjdk.java.net/jdk6/jdk6/jdk/file/04e4c3ec6516/src/share/classes/sun/security/ssl','OpenSource-sun systems','OpenSource-sun systems','','Security Protocol','SSL','Java,','Java6','','V1',NULL,'','','Windows, Mac OS, Linux','This is the official library of SSL implementation for Java.','',0,NULL,NULL,0.00),
	(1105,'C example SSL/TLS','https://github.com/openssl/openssl','open source implementaion: https://github.com/openssl/openssl/graphs/contributors','open source implementaion: https://github.com/openssl/openssl/graphs/contributors','https://github.com/openssl/openssl/graphs/contributors','Security Protocol','SSL/TLS','C,','any version','7/9/2015','V1',NULL,'','','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1109,'Forge- A native implementation of TLS','https://github.com/digitalbazaar/forge','Digital Bazaar, Inc.','support@digitalbazaar.com','http://digitalbazaar.com','Security Protocol','TLS(Transport Layer Security)','JavaScript,','JavaScript 1.8','9/15/2013','forge-0.6.16',NULL,'29838','15340','Windows, Mac OS, Linux','The Forge software is a fully native implementation of the TLS protocol in JavaScript as well as a set of tools for developing Web Apps that utilize many network resources.','',0,NULL,NULL,0.00),
	(1110,'Proverif Yahalom protocol','http://prosecco.gforge.inria.fr/personal/bblanche/proverif/','Bruno Blanchet','Bruno.Blanchet@trap-inria.fr','http://prosecco.gforge.inria.fr/personal/bblanche/','Security Protocol','Yahalom protocol','Caml,','4.02.3(Not sure)','9/13/2015','1.91',NULL,'166','111','Linux','None','None',0,NULL,NULL,0.00),
	(1112,'AES','https://www.openssl.org/','opensslfoundation','info@opensslfoundation.org','opensslfoundation.org','Security Protocol','Advanced Encryption Standard','C,','98','1/1/2002','1',NULL,'44432','37090','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1113,'RSA.py','https://gist.github.com/avalonalex/2122098','Yuhan Hao','Yuhan Hao','https://github.com/avalonalex?tab=repositories','Security Protocol','RSA','Python,','2','6/3/2015','1',NULL,'302','193','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1114,'Shamir\'s threshold secret sharing scheme','https://github.com/amper5and/secrets.js','Alexander Stetsyuk','alex@passguardian.com','','Security Protocol','Shamir\'s threshold secret sharing algorithm','JavaScript,','','1/1/2012','',NULL,'795','740','Windows, Mac OS, Linux','This can be used to split any \"secret\" (i.e. a password, text file, Bitcoin private key, anything) into n number of \"shares\" (each the same size in bits as the original secret), requiring that exactly any number t (\"threshold\") of them be present to reconstruct the original secret.','',0,NULL,NULL,0.00),
	(1116,'Kerberos','https://github.com/krb5/krb5','Greg Hudson','','http://web.mit.edu/kerberos/','Security Protocol','Kerberos','C,','','11/1/2015','v1.15',NULL,'380000','250000','Windows, Mac OS, Linux','It is official repository from MIT. It is well documented and well tested. It is implemented in C. It is easy to install and use. It is also easy to understand using well written documentation.','',0,NULL,NULL,0.00),
	(1117,'Kerberos','https://github.com/krb5/krb5','Theodore Ts\'o','tytso@mit.edu','','Security Protocol','Kerberos security protocol','C,','','10/9/2015','1.14-beta1',NULL,'454K','400K','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1118,'Needham-Schroeder','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','https://github.com/abender','Security Protocol','Needham Schroder Protocol','Unknown,','','5/18/2014','1',NULL,'6595','4525','Windows, Mac OS, Linux','NS-client implementation can perform retransmissions to deal with lossy networks','',0,NULL,NULL,0.00),
	(1119,'Extended Needham Schroeder Implementation','https://github.com/naveends/ExtendedNeedhamSchroederAuthentication/tree/master/NeedhamSchroeder/src','Naveen','naveen.cse.csg@gmail.com','','Security Protocol','Needham Schroeder','Java,','6','12/10/2012','1',NULL,'1000','880','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1122,'expanded_needham_schroeder','https://github.com/telnicky/expanded_needham_schroeder','Travis Elnicky','TravisElnicky@gmail.com','https://github.com/telnicky','Security Protocol','Needham-Schroeder protocol','Java,','Java 1.7','11/8/2013','1',NULL,'723','605','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1123,'authentication_ttp','https://github.com/walerian777/authentication_ttp','Walerian','walerian.sobczak@gmail.com','https://github.com/walerian777','Security Protocol','Needham-Schroeder protocol','Python,','Python3.5.0','3/26/2015','1',NULL,'219','187','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1125,'Kerberos - MIT Project Athena','http://web.mit.edu/kerberos/','Steve Miller and Clifford Neuman','krbdev@mit.edu and bcn@isi.edu','http://clifford.neuman.name/','Security Protocol','Needham‚ÄìSchroeder symmetric key protocol','C,','','6/20/1985','Kerberos 4',NULL,'446312','312482','Windows, Mac OS, Linux, Solaris, BSD','1. Provides mutual authentication‚Äîboth the user and the server verify each other\'s identity.\n2. Kerberos protocol messages are protected against eavesdropping and replay attacks.\n3. Kerberos uses UDP port 88 by default','Active Development: yes\nDocumentation: Well documented\nWidely Used: yes\nOpen-source: yes\nUse in Production: yes',0,NULL,NULL,0.00),
	(1126,'Secure Remote Password Protocol','https://github.com/akonring/srp','Anders Konring Olesen','anders@akonring.com','http://akonring.com','Security Protocol','Secure Remote Password Protocol','Python,','2.6','7/11/2015','',NULL,'279','264','Windows, Mac OS, Linux','This is a POC implementation','',0,NULL,NULL,0.00),
	(1127,'A Python poc implementation of the SRP protocol','https://github.com/akonring/srp','Anders Konring Olesen','anders@akonring.com','http://akonring.com','Security Protocol','Secure Remote Password Protocol','Python,','Python 2 and above','8/11/2015','1',NULL,'279','220 approx','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1128,'Stanford JavaScript Crypto Library','https://github.com/bitwiseshiftleft/sjcl/tree/version-0.8','Emily Stark, Mike Hamburg and Dan Boneh','estark@google.com, mike@shiftleft.org and dabo@cs.stanford.edu','https://www.emilymstark.com/, http://shiftleft.org/ and http://crypto.stanford.edu/~dabo/','Security Protocol','Secure Remote Password protocol - Key exchange','JavaScript,','','5/26/2010','0.8',NULL,'37264','27514','Windows, Mac OS, Linux','1. secure\n2. powerful\n3. fast\n4. small\n5. easy-to-use\n6. cross-browser\n\nIt uses:\n- the industry-standard AES algorithm at 128, 192 or 256 bits.\n- SHA256 hash function\n- HMAC authentication code\n- PBKDF2 password strengthener\n- and the CCM and OCB authenticated-encryption modes.','Open: Yes\nDemo: yes',0,NULL,NULL,0.00),
	(1129,'Open SSL','https://github.com/openssl/openssl','OpenSSL','info@opensslfoundation.org','https://www.openssl.org/','Security Protocol','Secure Socket Layer','C,','','1/15/2013','',NULL,'19786314','14168808','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1130,'samir‚Äôs secret sharing','http://freecode.com/projects/ssss/','B. Poettering','ssss@point-at-infinity.org','http://point-at-infinity.org/','Security Protocol','Shamir\'s Secret Sharing','C,','','1/15/2006','0.5',NULL,'','','Linux','','',0,NULL,NULL,0.00),
	(1131,'Secret Sharing','https://github.com/Archistar/archistar-smc/tree/master/src/main/java/at/archistar/crypto/secretsharing','Andreas Happe','andreashappe@snikt.net','http://snikt.net','Security Protocol','Shamir\'s Secret Sharing','Java,','','11/6/2013','1',NULL,'1130','613','Windows, Mac OS, Linux','1. Secure\n2. Minimal\n3. Extensible\n4. Dynamic\n5. Flexible','OpenSource: yes\nActive Development: yes\nDemo: yes',0,NULL,NULL,0.00),
	(1133,'TLS/SSL implementation in C','https://github.com/awslabs/s2n','Amazon Web Services Labs','https://aws.amazon.com/contact-us/?nc2=h_l1','https://github.com/awslabs','Security Protocol','TLS/SSL protocols','C,','99','9/9/2015','1',NULL,'14978','9842','Windows, Mac OS, Linux','','',0,NULL,NULL,0.00),
	(1135,'Secret sharing for JavaScript','https://github.com/amper5and/secrets.js','Alexander Stetsyuk','alex@passguardian.com','','Security Protocol','Shamir\'s Secret Sharing','JavaScript,','','9/23/2013','0.1.8',NULL,'795','550 approx','Windows, Mac OS, Linux','Some of the useful properties of Shamir\'s \\left(k,n\\right)\\,\\! threshold scheme are:\n\nSecure: Information theoretic security.\nMinimal: The size of each piece does not exceed the size of the original data.\nExtensible:  pieces can be dynamically added or deleted without affecting the other pieces.\nDynamic: Security can be easily enhanced without changing the secret, but by changing the polynomial occasionally (keeping the same free term) and constructing new shares to the participants.\nFlexible: In organizations where hierarchy is important, we can supply each participant different number of pieces according to their importance inside the organization. For instance, the president can unlock the safe alone, whereas 3 secretaries are required together to unlock it.','',0,NULL,NULL,0.00),
	(1136,'Snooping based coherence protocol','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','blucia@gmail.com','https://github.com/blucia0a','Cache Coherence','Emulating MSI protocols','Cpp,','3','9/24/2013','1',NULL,'300','130','Linux','','',0,NULL,NULL,0.00),
	(1137,'Implementation for MESI protocol','http://www.disi.unige.it/person/DelzannoG/CacheProtocol/mesi.hy','Giorgio Delzanno','','http://www.disi.unige.it/person/DelzannoG/protocol.html','Cache Coherence','Snooping cache','HyTech,','1.04','5/16/2000','1',NULL,'98','89','Linux','The snooping cache protocol does not work if there is no bus. Large-scale shared memory multiprocessors may connect processors with memories through switches.','',0,NULL,NULL,0.00),
	(1138,'Spoofing Based Cache Coherence Protocol','https://github.com/blucia0a/MultiCacheSim','Brandon Lucia','blucia@gmail.com','https://github.com/blucia0a','Cache Coherence','Emulator for MESI protocol','Cpp,','3','9/24/2013','1',NULL,'203','117','Linux','','',0,NULL,NULL,0.00),
	(1140,'Open source SSL Implementation','https://tls.mbed.org/','ARM limited','','https://tls.mbed.org/','Key Exchange','RSA, Diffie hellman, DSA, MD5, SHA5, SSL/TLS','C,','','10/12/2015','2.1.2',NULL,'98100','97089','Windows, Mac OS, Linux','mbed TLS offers an SSL library with an intuitive API and readable source code, mbed TLS is available as open source under the Apache 2.0 license, the GPL 2.0 license or under an mbed partnership.','',0,NULL,NULL,0.00),
	(1141,'Matrix SSL','http://www.matrixssl.org/','embedthis','dev@embedthis.com','https://embedthis.com/','Security Protocol','SSL','C,','','','',NULL,'1961583','1925686','Windows, Mac OS, Linux, FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX','','',0,NULL,NULL,0.00),
	(1142,'seNS','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','https://github.com/abender','Security Protocol','Needham‚ÄìSchroeder Symmetric Key Protocol','C,','','5/18/2014','1.0.0',NULL,'3256','3015','Linux','This implementation is the extended version of that the basic NS-Protocol. It uses timestamps, which are used to solve several vulnerabilities by the original protocol.','',0,NULL,NULL,0.00),
	(1143,'paramiko','https://github.com/paramiko/paramiko/blob/master/paramiko/transport.py','Robey Pointer','robeypointer@gmail.com','https://github.com/robey','Security Protocol','Secure Shell Protocol','Python,','unknown','1/1/2003','1',NULL,'2478','2212','Mac OS, Linux','paramiko:Python SSH module','\"socket:sock\"\n\"default_window_size:2097152\"\n\"\"efault_max_packet_size:32768\"\n\"gss_kex=False\"\n\"gss_deleg_creds:True\"',0,NULL,NULL,0.00),
	(1144,'TLS','https://github.com/digitalbazaar/forge/blob/master/js/tls.js','Dave Longley','dlongley@digitalbazaar.com','https://github.com/dlongley','Security Protocol','TLS Protocol','JavaScript,','unknown','6/7/2014','1',NULL,'4317','3986','Mac OS, Linux','Forge: a fully native implementation of the TLS protocol in JavaScript as well as a set of tools for developing Web Apps that utilize many network resources','none',0,NULL,NULL,0.00),
	(1145,'C-library for the Needham-Schroeder-protocol','https://github.com/abender/needham-schroeder','Andreas Bender','bender86@arcor.de','https://github.com/abender','Security Protocol','symmetric encryption algorithm','C,','','5/18/2015','1',NULL,'6679','4575','Mac OS, Linux','It is a small and simple C-library to perform an extended (symmetric) Needham-Schroeder(NS)-protocol. Extended means, that the basic NS-Protocol has been extended to make use of timestamps, which are used to solve several vulnerabilities by the original protocol.','',0,NULL,NULL,0.00),
	(1146,'Python Paxos Implementation(four varieties)','https://github.com/cocagne/paxos/tree/master/paxos','Tom Cocagne','tom.cocagne@gmail.com','','Distributed Consensus','Paxos','Python,','2.7','8/30/2013','2',NULL,'700','300','Windows, Mac OS, Linux','This project has five versions -- essential.py, practical.py, functional.py, external.py and durable.py.','',0,NULL,NULL,0.00),
	(1147,'Matrxi SSL','http://www.matrixssl.org/','','','','Unknown','unknown','C,','','3/21/2014','',NULL,'1961583','1925686','Windows, Mac OS, Linux,  FreeRTOS, Bare Metal, eCos, VxWorks, uClinux, eCos, FreeRTOS, ThreadX, WindowsCE, PocketPC, Palm, pSOS, SMX, BREW','','',0,NULL,NULL,0.00),
	(1148,'An implementation of Chord, a protocol of Distributed Hash Table','https://github.com/tsujio/webrtc-chord','Naoki Tsujio','ntsujio@gmail.com','http://tsujio.org','Unknown','unknown','JavaScript,','','','',NULL,'5000','3500','Linux','','',0,NULL,NULL,0.00),
	(1149,'Cache Coherence Protocols: Evaluation Using a Multiprocessor Simulation Model','http://www.facom.ufu.br/~claudio/Cursos/OC2-old/docs/CacheCoherenceProtocols.pdf','James Archibald and Jean-Loup Baer','','','Unknown','unknown','Unknown,','','9/1/1986','',NULL,'','','','','',0,NULL,NULL,0.00);

/*!40000 ALTER TABLE `projects` ENABLE KEYS */;
UNLOCK TABLES;



/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
